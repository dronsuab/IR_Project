
C:\Users\Iván\Documents\IR_Project\Debug\IR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001404  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080014c4  080014c4  000114c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  20000004  0800150c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000017c  0800150c  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010cc3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002568  00000000  00000000  00030cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004e44  00000000  00000000  00033257  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  000380a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b8  00000000  00000000  000387f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e65  00000000  00000000  000391b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a73  00000000  00000000  0003e015  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001514  00000000  00000000  00040b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080014ac 	.word	0x080014ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080014ac 	.word	0x080014ac

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fd3c 	bl	8000cb4 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f97c 	bl	8000540 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f946 	bl	80004e0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f000 fff3 	bl	8001254 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000298:	2001      	movs	r0, #1
  if(hadc == NULL)
 800029a:	2c00      	cmp	r4, #0
 800029c:	d072      	beq.n	8000384 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800029e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d106      	bne.n	80002b2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002a4:	0022      	movs	r2, r4
 80002a6:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80002a8:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002aa:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80002ac:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80002ae:	f000 ffef 	bl	8001290 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002b4:	06db      	lsls	r3, r3, #27
 80002b6:	d500      	bpl.n	80002ba <HAL_ADC_Init+0x26>
 80002b8:	e079      	b.n	80003ae <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002ba:	2204      	movs	r2, #4
 80002bc:	6823      	ldr	r3, [r4, #0]
 80002be:	6898      	ldr	r0, [r3, #8]
 80002c0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80002c2:	d000      	beq.n	80002c6 <HAL_ADC_Init+0x32>
 80002c4:	e073      	b.n	80003ae <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002c8:	4942      	ldr	r1, [pc, #264]	; (80003d4 <HAL_ADC_Init+0x140>)
 80002ca:	4011      	ands	r1, r2
 80002cc:	2202      	movs	r2, #2
 80002ce:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002d0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80002d2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002d4:	689a      	ldr	r2, [r3, #8]
 80002d6:	400a      	ands	r2, r1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	d000      	beq.n	80002de <HAL_ADC_Init+0x4a>
 80002dc:	e06d      	b.n	80003ba <HAL_ADC_Init+0x126>
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	4211      	tst	r1, r2
 80002e2:	d102      	bne.n	80002ea <HAL_ADC_Init+0x56>
 80002e4:	68da      	ldr	r2, [r3, #12]
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	d567      	bpl.n	80003ba <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80002ea:	68da      	ldr	r2, [r3, #12]
 80002ec:	493a      	ldr	r1, [pc, #232]	; (80003d8 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80002ee:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80002f0:	400a      	ands	r2, r1
 80002f2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80002f4:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80002f6:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80002f8:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80002fa:	69e2      	ldr	r2, [r4, #28]
 80002fc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80002fe:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000300:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000302:	3a01      	subs	r2, #1
 8000304:	1e56      	subs	r6, r2, #1
 8000306:	41b2      	sbcs	r2, r6
 8000308:	0316      	lsls	r6, r2, #12
 800030a:	68e2      	ldr	r2, [r4, #12]
 800030c:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800030e:	6922      	ldr	r2, [r4, #16]
 8000310:	430f      	orrs	r7, r1
 8000312:	2a02      	cmp	r2, #2
 8000314:	d100      	bne.n	8000318 <HAL_ADC_Init+0x84>
 8000316:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000318:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800031a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800031c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800031e:	433a      	orrs	r2, r7
 8000320:	4332      	orrs	r2, r6
 8000322:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000324:	2901      	cmp	r1, #1
 8000326:	d104      	bne.n	8000332 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000328:	2d00      	cmp	r5, #0
 800032a:	d12c      	bne.n	8000386 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800032c:	2180      	movs	r1, #128	; 0x80
 800032e:	0249      	lsls	r1, r1, #9
 8000330:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000332:	20c2      	movs	r0, #194	; 0xc2
 8000334:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000336:	30ff      	adds	r0, #255	; 0xff
 8000338:	4281      	cmp	r1, r0
 800033a:	d002      	beq.n	8000342 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800033c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800033e:	4301      	orrs	r1, r0
 8000340:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000342:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000344:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000346:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000348:	4311      	orrs	r1, r2
 800034a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800034c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800034e:	4281      	cmp	r1, r0
 8000350:	d002      	beq.n	8000358 <HAL_ADC_Init+0xc4>
 8000352:	1e48      	subs	r0, r1, #1
 8000354:	2806      	cmp	r0, #6
 8000356:	d807      	bhi.n	8000368 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000358:	2507      	movs	r5, #7
 800035a:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800035c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800035e:	43a8      	bics	r0, r5
 8000360:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000362:	6958      	ldr	r0, [r3, #20]
 8000364:	4301      	orrs	r1, r0
 8000366:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	491c      	ldr	r1, [pc, #112]	; (80003dc <HAL_ADC_Init+0x148>)
 800036c:	400b      	ands	r3, r1
 800036e:	429a      	cmp	r2, r3
 8000370:	d111      	bne.n	8000396 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000372:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000374:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000376:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000378:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800037a:	4393      	bics	r3, r2
 800037c:	001a      	movs	r2, r3
 800037e:	2301      	movs	r3, #1
 8000380:	4313      	orrs	r3, r2
 8000382:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000386:	2020      	movs	r0, #32
 8000388:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800038a:	4328      	orrs	r0, r5
 800038c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000390:	4301      	orrs	r1, r0
 8000392:	64a1      	str	r1, [r4, #72]	; 0x48
 8000394:	e7cd      	b.n	8000332 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8000396:	2212      	movs	r2, #18
 8000398:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800039c:	4393      	bics	r3, r2
 800039e:	001a      	movs	r2, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	4313      	orrs	r3, r2
 80003a4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003a8:	4303      	orrs	r3, r0
 80003aa:	64a3      	str	r3, [r4, #72]	; 0x48
 80003ac:	e7ea      	b.n	8000384 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ae:	2310      	movs	r3, #16
 80003b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80003b2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003b4:	4313      	orrs	r3, r2
 80003b6:	6463      	str	r3, [r4, #68]	; 0x44
 80003b8:	e7e4      	b.n	8000384 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80003ba:	2118      	movs	r1, #24
 80003bc:	68da      	ldr	r2, [r3, #12]
 80003be:	438a      	bics	r2, r1
 80003c0:	68a1      	ldr	r1, [r4, #8]
 80003c2:	430a      	orrs	r2, r1
 80003c4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003c6:	6919      	ldr	r1, [r3, #16]
 80003c8:	6862      	ldr	r2, [r4, #4]
 80003ca:	0089      	lsls	r1, r1, #2
 80003cc:	0889      	lsrs	r1, r1, #2
 80003ce:	4311      	orrs	r1, r2
 80003d0:	6119      	str	r1, [r3, #16]
 80003d2:	e78a      	b.n	80002ea <HAL_ADC_Init+0x56>
 80003d4:	fffffefd 	.word	0xfffffefd
 80003d8:	fffe0219 	.word	0xfffe0219
 80003dc:	833fffe7 	.word	0x833fffe7

080003e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80003e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80003e2:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003e4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80003e6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80003e8:	3440      	adds	r4, #64	; 0x40
 80003ea:	7823      	ldrb	r3, [r4, #0]
{
 80003ec:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80003ee:	2002      	movs	r0, #2
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d02b      	beq.n	800044c <HAL_ADC_ConfigChannel+0x6c>
 80003f4:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80003f6:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003f8:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80003fa:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80003fc:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80003fe:	0740      	lsls	r0, r0, #29
 8000400:	d45a      	bmi.n	80004b8 <HAL_ADC_ConfigChannel+0xd8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <HAL_ADC_ConfigChannel+0xe4>)
 8000404:	684f      	ldr	r7, [r1, #4]
 8000406:	680d      	ldr	r5, [r1, #0]
 8000408:	4287      	cmp	r7, r0
 800040a:	d03f      	beq.n	800048c <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800040c:	40ab      	lsls	r3, r5
 800040e:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000410:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000412:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000414:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000416:	4338      	orrs	r0, r7
 8000418:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800041a:	429e      	cmp	r6, r3
 800041c:	d00f      	beq.n	800043e <HAL_ADC_ConfigChannel+0x5e>
 800041e:	3e01      	subs	r6, #1
 8000420:	2e06      	cmp	r6, #6
 8000422:	d90c      	bls.n	800043e <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000424:	688b      	ldr	r3, [r1, #8]
 8000426:	2107      	movs	r1, #7
 8000428:	6950      	ldr	r0, [r2, #20]
 800042a:	4008      	ands	r0, r1
 800042c:	4283      	cmp	r3, r0
 800042e:	d006      	beq.n	800043e <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000430:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000432:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000434:	4388      	bics	r0, r1
 8000436:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000438:	6950      	ldr	r0, [r2, #20]
 800043a:	4303      	orrs	r3, r0
 800043c:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800043e:	002b      	movs	r3, r5
 8000440:	3b10      	subs	r3, #16
 8000442:	2b02      	cmp	r3, #2
 8000444:	d903      	bls.n	800044e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000446:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000448:	2300      	movs	r3, #0
 800044a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800044c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <HAL_ADC_ConfigChannel+0xe8>)
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	6811      	ldr	r1, [r2, #0]
 8000454:	2d10      	cmp	r5, #16
 8000456:	d015      	beq.n	8000484 <HAL_ADC_ConfigChannel+0xa4>
 8000458:	2d11      	cmp	r5, #17
 800045a:	d015      	beq.n	8000488 <HAL_ADC_ConfigChannel+0xa8>
 800045c:	045b      	lsls	r3, r3, #17
 800045e:	430b      	orrs	r3, r1
 8000460:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000462:	2d10      	cmp	r5, #16
 8000464:	d1ef      	bne.n	8000446 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <HAL_ADC_ConfigChannel+0xec>)
 8000468:	4919      	ldr	r1, [pc, #100]	; (80004d0 <HAL_ADC_ConfigChannel+0xf0>)
 800046a:	6818      	ldr	r0, [r3, #0]
 800046c:	f7ff fe56 	bl	800011c <__udivsi3>
 8000470:	230a      	movs	r3, #10
 8000472:	4358      	muls	r0, r3
 8000474:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000476:	9b01      	ldr	r3, [sp, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0e4      	beq.n	8000446 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800047c:	9b01      	ldr	r3, [sp, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	9301      	str	r3, [sp, #4]
 8000482:	e7f8      	b.n	8000476 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	e7ea      	b.n	800045e <HAL_ADC_ConfigChannel+0x7e>
 8000488:	03db      	lsls	r3, r3, #15
 800048a:	e7e8      	b.n	800045e <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800048c:	40ab      	lsls	r3, r5
 800048e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000490:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000492:	002b      	movs	r3, r5
 8000494:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000496:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000498:	2b02      	cmp	r3, #2
 800049a:	d8d4      	bhi.n	8000446 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_ADC_ConfigChannel+0xe8>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	2d10      	cmp	r5, #16
 80004a2:	d005      	beq.n	80004b0 <HAL_ADC_ConfigChannel+0xd0>
 80004a4:	2d11      	cmp	r5, #17
 80004a6:	d005      	beq.n	80004b4 <HAL_ADC_ConfigChannel+0xd4>
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <HAL_ADC_ConfigChannel+0xf4>)
 80004aa:	400a      	ands	r2, r1
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	e7ca      	b.n	8000446 <HAL_ADC_ConfigChannel+0x66>
 80004b0:	4909      	ldr	r1, [pc, #36]	; (80004d8 <HAL_ADC_ConfigChannel+0xf8>)
 80004b2:	e7fa      	b.n	80004aa <HAL_ADC_ConfigChannel+0xca>
 80004b4:	4909      	ldr	r1, [pc, #36]	; (80004dc <HAL_ADC_ConfigChannel+0xfc>)
 80004b6:	e7f8      	b.n	80004aa <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004b8:	2220      	movs	r2, #32
 80004ba:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80004bc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004be:	430a      	orrs	r2, r1
 80004c0:	646a      	str	r2, [r5, #68]	; 0x44
 80004c2:	e7c1      	b.n	8000448 <HAL_ADC_ConfigChannel+0x68>
 80004c4:	00001001 	.word	0x00001001
 80004c8:	40012708 	.word	0x40012708
 80004cc:	20000000 	.word	0x20000000
 80004d0:	000f4240 	.word	0x000f4240
 80004d4:	feffffff 	.word	0xfeffffff
 80004d8:	ff7fffff 	.word	0xff7fffff
 80004dc:	ffbfffff 	.word	0xffbfffff

080004e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004e0:	b570      	push	{r4, r5, r6, lr}
 80004e2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004e4:	2800      	cmp	r0, #0
 80004e6:	da14      	bge.n	8000512 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	230f      	movs	r3, #15
 80004ea:	b2c0      	uxtb	r0, r0
 80004ec:	4003      	ands	r3, r0
 80004ee:	3b08      	subs	r3, #8
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <HAL_NVIC_SetPriority+0x58>)
 80004f2:	089b      	lsrs	r3, r3, #2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	189b      	adds	r3, r3, r2
 80004f8:	2203      	movs	r2, #3
 80004fa:	4010      	ands	r0, r2
 80004fc:	4090      	lsls	r0, r2
 80004fe:	32fc      	adds	r2, #252	; 0xfc
 8000500:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000502:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000504:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000506:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	69dc      	ldr	r4, [r3, #28]
 800050a:	43ac      	bics	r4, r5
 800050c:	4321      	orrs	r1, r4
 800050e:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000510:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000512:	2503      	movs	r5, #3
 8000514:	0883      	lsrs	r3, r0, #2
 8000516:	4028      	ands	r0, r5
 8000518:	40a8      	lsls	r0, r5
 800051a:	35fc      	adds	r5, #252	; 0xfc
 800051c:	002e      	movs	r6, r5
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_NVIC_SetPriority+0x5c>)
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	189b      	adds	r3, r3, r2
 8000524:	22c0      	movs	r2, #192	; 0xc0
 8000526:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000528:	4029      	ands	r1, r5
 800052a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	589c      	ldr	r4, [r3, r2]
 8000530:	43b4      	bics	r4, r6
 8000532:	4321      	orrs	r1, r4
 8000534:	5099      	str	r1, [r3, r2]
 8000536:	e7eb      	b.n	8000510 <HAL_NVIC_SetPriority+0x30>
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	e000e100 	.word	0xe000e100

08000540 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000540:	4a09      	ldr	r2, [pc, #36]	; (8000568 <HAL_SYSTICK_Config+0x28>)
 8000542:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000544:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000546:	4293      	cmp	r3, r2
 8000548:	d80d      	bhi.n	8000566 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054c:	4a07      	ldr	r2, [pc, #28]	; (800056c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000550:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	6a03      	ldr	r3, [r0, #32]
 8000554:	0609      	lsls	r1, r1, #24
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	430b      	orrs	r3, r1
 800055c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800055e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000560:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000564:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000566:	4770      	bx	lr
 8000568:	00ffffff 	.word	0x00ffffff
 800056c:	e000e010 	.word	0xe000e010
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000576:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000578:	2804      	cmp	r0, #4
 800057a:	d102      	bne.n	8000582 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800057c:	4310      	orrs	r0, r2
 800057e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000580:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000582:	2104      	movs	r1, #4
 8000584:	438a      	bics	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	e7fa      	b.n	8000580 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	e000e010 	.word	0xe000e010

08000590 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000590:	4770      	bx	lr

08000592 <HAL_SYSTICK_IRQHandler>:
{
 8000592:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000594:	f7ff fffc 	bl	8000590 <HAL_SYSTICK_Callback>
}
 8000598:	bd10      	pop	{r4, pc}

0800059a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800059a:	b510      	push	{r4, lr}
 800059c:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800059e:	d101      	bne.n	80005a4 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80005a0:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80005a2:	bd10      	pop	{r4, pc}
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80005a4:	7f43      	ldrb	r3, [r0, #29]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80005ac:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80005ae:	f000 fe8f 	bl	80012d0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80005b2:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80005b4:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80005b6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80005b8:	f000 f819 	bl	80005ee <HAL_CRCEx_Init>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1ef      	bne.n	80005a0 <HAL_CRC_Init+0x6>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80005c0:	7962      	ldrb	r2, [r4, #5]
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	d110      	bne.n	80005ea <HAL_CRC_Init+0x50>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80005c8:	3a01      	subs	r2, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005ca:	2160      	movs	r1, #96	; 0x60
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80005cc:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	438a      	bics	r2, r1
 80005d2:	6961      	ldr	r1, [r4, #20]
 80005d4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80005d6:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80005da:	689a      	ldr	r2, [r3, #8]
 80005dc:	438a      	bics	r2, r1
 80005de:	69a1      	ldr	r1, [r4, #24]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80005e4:	2301      	movs	r3, #1
 80005e6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80005e8:	e7db      	b.n	80005a2 <HAL_CRC_Init+0x8>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80005ea:	6922      	ldr	r2, [r4, #16]
 80005ec:	e7ed      	b.n	80005ca <HAL_CRC_Init+0x30>

080005ee <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 80005ee:	2000      	movs	r0, #0
 80005f0:	4770      	bx	lr
	...

080005f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005f6:	680b      	ldr	r3, [r1, #0]
{ 
 80005f8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005fa:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80005fc:	2300      	movs	r3, #0
{ 
 80005fe:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000600:	9a02      	ldr	r2, [sp, #8]
 8000602:	40da      	lsrs	r2, r3
 8000604:	d101      	bne.n	800060a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000606:	b007      	add	sp, #28
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800060a:	2201      	movs	r2, #1
 800060c:	409a      	lsls	r2, r3
 800060e:	9203      	str	r2, [sp, #12]
 8000610:	9903      	ldr	r1, [sp, #12]
 8000612:	9a02      	ldr	r2, [sp, #8]
 8000614:	400a      	ands	r2, r1
 8000616:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000618:	d100      	bne.n	800061c <HAL_GPIO_Init+0x28>
 800061a:	e08c      	b.n	8000736 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800061c:	9a01      	ldr	r2, [sp, #4]
 800061e:	2110      	movs	r1, #16
 8000620:	6852      	ldr	r2, [r2, #4]
 8000622:	0016      	movs	r6, r2
 8000624:	438e      	bics	r6, r1
 8000626:	2e02      	cmp	r6, #2
 8000628:	d10e      	bne.n	8000648 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800062a:	2507      	movs	r5, #7
 800062c:	401d      	ands	r5, r3
 800062e:	00ad      	lsls	r5, r5, #2
 8000630:	3901      	subs	r1, #1
 8000632:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000634:	08dc      	lsrs	r4, r3, #3
 8000636:	00a4      	lsls	r4, r4, #2
 8000638:	1904      	adds	r4, r0, r4
 800063a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800063c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	6909      	ldr	r1, [r1, #16]
 8000642:	40a9      	lsls	r1, r5
 8000644:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000646:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000648:	2403      	movs	r4, #3
 800064a:	005f      	lsls	r7, r3, #1
 800064c:	40bc      	lsls	r4, r7
 800064e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000650:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000652:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000654:	4025      	ands	r5, r4
 8000656:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000658:	2503      	movs	r5, #3
 800065a:	4015      	ands	r5, r2
 800065c:	40bd      	lsls	r5, r7
 800065e:	4661      	mov	r1, ip
 8000660:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000662:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2e01      	cmp	r6, #1
 8000666:	d80f      	bhi.n	8000688 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000668:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800066a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800066c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000670:	40bd      	lsls	r5, r7
 8000672:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000674:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000676:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000678:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800067c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	2101      	movs	r1, #1
 8000680:	400d      	ands	r5, r1
 8000682:	409d      	lsls	r5, r3
 8000684:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000686:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000688:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800068a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800068c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800068e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000690:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000692:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000694:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000696:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000698:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800069a:	420a      	tst	r2, r1
 800069c:	d04b      	beq.n	8000736 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2101      	movs	r1, #1
 80006a0:	4c26      	ldr	r4, [pc, #152]	; (800073c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006a2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006a6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	430d      	orrs	r5, r1
 80006aa:	61a5      	str	r5, [r4, #24]
 80006ac:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80006ae:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	400c      	ands	r4, r1
 80006b2:	9405      	str	r4, [sp, #20]
 80006b4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006b6:	240f      	movs	r4, #15
 80006b8:	4921      	ldr	r1, [pc, #132]	; (8000740 <HAL_GPIO_Init+0x14c>)
 80006ba:	00ad      	lsls	r5, r5, #2
 80006bc:	00b6      	lsls	r6, r6, #2
 80006be:	186d      	adds	r5, r5, r1
 80006c0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80006c4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006c6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006c8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ca:	2400      	movs	r4, #0
 80006cc:	4288      	cmp	r0, r1
 80006ce:	d00c      	beq.n	80006ea <HAL_GPIO_Init+0xf6>
 80006d0:	491c      	ldr	r1, [pc, #112]	; (8000744 <HAL_GPIO_Init+0x150>)
 80006d2:	3401      	adds	r4, #1
 80006d4:	4288      	cmp	r0, r1
 80006d6:	d008      	beq.n	80006ea <HAL_GPIO_Init+0xf6>
 80006d8:	491b      	ldr	r1, [pc, #108]	; (8000748 <HAL_GPIO_Init+0x154>)
 80006da:	3401      	adds	r4, #1
 80006dc:	4288      	cmp	r0, r1
 80006de:	d004      	beq.n	80006ea <HAL_GPIO_Init+0xf6>
 80006e0:	491a      	ldr	r1, [pc, #104]	; (800074c <HAL_GPIO_Init+0x158>)
 80006e2:	3403      	adds	r4, #3
 80006e4:	4288      	cmp	r0, r1
 80006e6:	d100      	bne.n	80006ea <HAL_GPIO_Init+0xf6>
 80006e8:	3c02      	subs	r4, #2
 80006ea:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006ec:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ee:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80006f0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80006f2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80006f4:	4c16      	ldr	r4, [pc, #88]	; (8000750 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006f6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80006f8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80006fa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006fc:	03d1      	lsls	r1, r2, #15
 80006fe:	d401      	bmi.n	8000704 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000700:	003e      	movs	r6, r7
 8000702:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000704:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000706:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000708:	9e00      	ldr	r6, [sp, #0]
 800070a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800070c:	0391      	lsls	r1, r2, #14
 800070e:	d401      	bmi.n	8000714 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000710:	003e      	movs	r6, r7
 8000712:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000714:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000716:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000718:	9e00      	ldr	r6, [sp, #0]
 800071a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800071c:	02d1      	lsls	r1, r2, #11
 800071e:	d401      	bmi.n	8000724 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000720:	003e      	movs	r6, r7
 8000722:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000724:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000726:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000728:	9f00      	ldr	r7, [sp, #0]
 800072a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800072c:	0292      	lsls	r2, r2, #10
 800072e:	d401      	bmi.n	8000734 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000730:	402e      	ands	r6, r5
 8000732:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000734:	60e7      	str	r7, [r4, #12]
    position++;
 8000736:	3301      	adds	r3, #1
 8000738:	e762      	b.n	8000600 <HAL_GPIO_Init+0xc>
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000
 8000744:	48000400 	.word	0x48000400
 8000748:	48000800 	.word	0x48000800
 800074c:	48000c00 	.word	0x48000c00
 8000750:	40010400 	.word	0x40010400

08000754 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000754:	2a00      	cmp	r2, #0
 8000756:	d001      	beq.n	800075c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000758:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800075a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800075c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800075e:	e7fc      	b.n	800075a <HAL_GPIO_WritePin+0x6>

08000760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000762:	6803      	ldr	r3, [r0, #0]
{
 8000764:	b085      	sub	sp, #20
 8000766:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000768:	07db      	lsls	r3, r3, #31
 800076a:	d42f      	bmi.n	80007cc <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	079b      	lsls	r3, r3, #30
 8000770:	d500      	bpl.n	8000774 <HAL_RCC_OscConfig+0x14>
 8000772:	e081      	b.n	8000878 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000774:	682b      	ldr	r3, [r5, #0]
 8000776:	071b      	lsls	r3, r3, #28
 8000778:	d500      	bpl.n	800077c <HAL_RCC_OscConfig+0x1c>
 800077a:	e0bc      	b.n	80008f6 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800077c:	682b      	ldr	r3, [r5, #0]
 800077e:	075b      	lsls	r3, r3, #29
 8000780:	d500      	bpl.n	8000784 <HAL_RCC_OscConfig+0x24>
 8000782:	e0df      	b.n	8000944 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000784:	682b      	ldr	r3, [r5, #0]
 8000786:	06db      	lsls	r3, r3, #27
 8000788:	d51a      	bpl.n	80007c0 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800078a:	696a      	ldr	r2, [r5, #20]
 800078c:	4cb5      	ldr	r4, [pc, #724]	; (8000a64 <HAL_RCC_OscConfig+0x304>)
 800078e:	2304      	movs	r3, #4
 8000790:	2a01      	cmp	r2, #1
 8000792:	d000      	beq.n	8000796 <HAL_RCC_OscConfig+0x36>
 8000794:	e14b      	b.n	8000a2e <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000796:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000798:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800079a:	430b      	orrs	r3, r1
 800079c:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800079e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007a0:	431a      	orrs	r2, r3
 80007a2:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007a4:	f7ff fd70 	bl	8000288 <HAL_GetTick>
 80007a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ac:	4233      	tst	r3, r6
 80007ae:	d100      	bne.n	80007b2 <HAL_RCC_OscConfig+0x52>
 80007b0:	e136      	b.n	8000a20 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80007b2:	21f8      	movs	r1, #248	; 0xf8
 80007b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007b6:	69ab      	ldr	r3, [r5, #24]
 80007b8:	438a      	bics	r2, r1
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4313      	orrs	r3, r2
 80007be:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007c0:	6a29      	ldr	r1, [r5, #32]
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d000      	beq.n	80007c8 <HAL_RCC_OscConfig+0x68>
 80007c6:	e159      	b.n	8000a7c <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80007c8:	2000      	movs	r0, #0
 80007ca:	e013      	b.n	80007f4 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007cc:	210c      	movs	r1, #12
 80007ce:	4ca5      	ldr	r4, [pc, #660]	; (8000a64 <HAL_RCC_OscConfig+0x304>)
 80007d0:	6862      	ldr	r2, [r4, #4]
 80007d2:	400a      	ands	r2, r1
 80007d4:	2a04      	cmp	r2, #4
 80007d6:	d006      	beq.n	80007e6 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d8:	6863      	ldr	r3, [r4, #4]
 80007da:	400b      	ands	r3, r1
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d10b      	bne.n	80007f8 <HAL_RCC_OscConfig+0x98>
 80007e0:	6863      	ldr	r3, [r4, #4]
 80007e2:	03db      	lsls	r3, r3, #15
 80007e4:	d508      	bpl.n	80007f8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	039b      	lsls	r3, r3, #14
 80007ea:	d5bf      	bpl.n	800076c <HAL_RCC_OscConfig+0xc>
 80007ec:	686b      	ldr	r3, [r5, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1bc      	bne.n	800076c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80007f2:	2001      	movs	r0, #1
}
 80007f4:	b005      	add	sp, #20
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f8:	686b      	ldr	r3, [r5, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d113      	bne.n	8000826 <HAL_RCC_OscConfig+0xc6>
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	025b      	lsls	r3, r3, #9
 8000804:	4313      	orrs	r3, r2
 8000806:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000808:	f7ff fd3e 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800080c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800080e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000810:	02b6      	lsls	r6, r6, #10
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	4233      	tst	r3, r6
 8000816:	d1a9      	bne.n	800076c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000818:	f7ff fd36 	bl	8000288 <HAL_GetTick>
 800081c:	1bc0      	subs	r0, r0, r7
 800081e:	2864      	cmp	r0, #100	; 0x64
 8000820:	d9f7      	bls.n	8000812 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000822:	2003      	movs	r0, #3
 8000824:	e7e6      	b.n	80007f4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000826:	2b00      	cmp	r3, #0
 8000828:	d116      	bne.n	8000858 <HAL_RCC_OscConfig+0xf8>
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	4a8e      	ldr	r2, [pc, #568]	; (8000a68 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800082e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000830:	4013      	ands	r3, r2
 8000832:	6023      	str	r3, [r4, #0]
 8000834:	6823      	ldr	r3, [r4, #0]
 8000836:	4a8d      	ldr	r2, [pc, #564]	; (8000a6c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000838:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800083a:	4013      	ands	r3, r2
 800083c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800083e:	f7ff fd23 	bl	8000288 <HAL_GetTick>
 8000842:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	4233      	tst	r3, r6
 8000848:	d100      	bne.n	800084c <HAL_RCC_OscConfig+0xec>
 800084a:	e78f      	b.n	800076c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800084c:	f7ff fd1c 	bl	8000288 <HAL_GetTick>
 8000850:	1bc0      	subs	r0, r0, r7
 8000852:	2864      	cmp	r0, #100	; 0x64
 8000854:	d9f6      	bls.n	8000844 <HAL_RCC_OscConfig+0xe4>
 8000856:	e7e4      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000858:	2b05      	cmp	r3, #5
 800085a:	d105      	bne.n	8000868 <HAL_RCC_OscConfig+0x108>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	6822      	ldr	r2, [r4, #0]
 8000860:	02db      	lsls	r3, r3, #11
 8000862:	4313      	orrs	r3, r2
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	e7ca      	b.n	80007fe <HAL_RCC_OscConfig+0x9e>
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	4a7f      	ldr	r2, [pc, #508]	; (8000a68 <HAL_RCC_OscConfig+0x308>)
 800086c:	4013      	ands	r3, r2
 800086e:	6023      	str	r3, [r4, #0]
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	4a7e      	ldr	r2, [pc, #504]	; (8000a6c <HAL_RCC_OscConfig+0x30c>)
 8000874:	4013      	ands	r3, r2
 8000876:	e7c6      	b.n	8000806 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000878:	220c      	movs	r2, #12
 800087a:	4c7a      	ldr	r4, [pc, #488]	; (8000a64 <HAL_RCC_OscConfig+0x304>)
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	4213      	tst	r3, r2
 8000880:	d006      	beq.n	8000890 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	4013      	ands	r3, r2
 8000886:	2b08      	cmp	r3, #8
 8000888:	d110      	bne.n	80008ac <HAL_RCC_OscConfig+0x14c>
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	03db      	lsls	r3, r3, #15
 800088e:	d40d      	bmi.n	80008ac <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	079b      	lsls	r3, r3, #30
 8000894:	d502      	bpl.n	800089c <HAL_RCC_OscConfig+0x13c>
 8000896:	68eb      	ldr	r3, [r5, #12]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d1aa      	bne.n	80007f2 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800089c:	21f8      	movs	r1, #248	; 0xf8
 800089e:	6822      	ldr	r2, [r4, #0]
 80008a0:	692b      	ldr	r3, [r5, #16]
 80008a2:	438a      	bics	r2, r1
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6023      	str	r3, [r4, #0]
 80008aa:	e763      	b.n	8000774 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008ac:	68ea      	ldr	r2, [r5, #12]
 80008ae:	2301      	movs	r3, #1
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d00f      	beq.n	80008d4 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80008b4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80008b8:	4313      	orrs	r3, r2
 80008ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fce4 	bl	8000288 <HAL_GetTick>
 80008c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	4233      	tst	r3, r6
 80008c6:	d1e9      	bne.n	800089c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008c8:	f7ff fcde 	bl	8000288 <HAL_GetTick>
 80008cc:	1bc0      	subs	r0, r0, r7
 80008ce:	2802      	cmp	r0, #2
 80008d0:	d9f7      	bls.n	80008c2 <HAL_RCC_OscConfig+0x162>
 80008d2:	e7a6      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80008d4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008d6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80008d8:	439a      	bics	r2, r3
 80008da:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80008dc:	f7ff fcd4 	bl	8000288 <HAL_GetTick>
 80008e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	4233      	tst	r3, r6
 80008e6:	d100      	bne.n	80008ea <HAL_RCC_OscConfig+0x18a>
 80008e8:	e744      	b.n	8000774 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ea:	f7ff fccd 	bl	8000288 <HAL_GetTick>
 80008ee:	1bc0      	subs	r0, r0, r7
 80008f0:	2802      	cmp	r0, #2
 80008f2:	d9f6      	bls.n	80008e2 <HAL_RCC_OscConfig+0x182>
 80008f4:	e795      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008f6:	69ea      	ldr	r2, [r5, #28]
 80008f8:	2301      	movs	r3, #1
 80008fa:	4c5a      	ldr	r4, [pc, #360]	; (8000a64 <HAL_RCC_OscConfig+0x304>)
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	d010      	beq.n	8000922 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000900:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000902:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000904:	4313      	orrs	r3, r2
 8000906:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000908:	f7ff fcbe 	bl	8000288 <HAL_GetTick>
 800090c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800090e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000910:	4233      	tst	r3, r6
 8000912:	d000      	beq.n	8000916 <HAL_RCC_OscConfig+0x1b6>
 8000914:	e732      	b.n	800077c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000916:	f7ff fcb7 	bl	8000288 <HAL_GetTick>
 800091a:	1bc0      	subs	r0, r0, r7
 800091c:	2802      	cmp	r0, #2
 800091e:	d9f6      	bls.n	800090e <HAL_RCC_OscConfig+0x1ae>
 8000920:	e77f      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000922:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000924:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000926:	439a      	bics	r2, r3
 8000928:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800092a:	f7ff fcad 	bl	8000288 <HAL_GetTick>
 800092e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000932:	4233      	tst	r3, r6
 8000934:	d100      	bne.n	8000938 <HAL_RCC_OscConfig+0x1d8>
 8000936:	e721      	b.n	800077c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000938:	f7ff fca6 	bl	8000288 <HAL_GetTick>
 800093c:	1bc0      	subs	r0, r0, r7
 800093e:	2802      	cmp	r0, #2
 8000940:	d9f6      	bls.n	8000930 <HAL_RCC_OscConfig+0x1d0>
 8000942:	e76e      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000944:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000946:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000948:	4c46      	ldr	r4, [pc, #280]	; (8000a64 <HAL_RCC_OscConfig+0x304>)
 800094a:	0552      	lsls	r2, r2, #21
 800094c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800094e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000950:	4213      	tst	r3, r2
 8000952:	d108      	bne.n	8000966 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	69e3      	ldr	r3, [r4, #28]
 8000956:	4313      	orrs	r3, r2
 8000958:	61e3      	str	r3, [r4, #28]
 800095a:	69e3      	ldr	r3, [r4, #28]
 800095c:	4013      	ands	r3, r2
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000962:	2301      	movs	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000966:	2780      	movs	r7, #128	; 0x80
 8000968:	4e41      	ldr	r6, [pc, #260]	; (8000a70 <HAL_RCC_OscConfig+0x310>)
 800096a:	007f      	lsls	r7, r7, #1
 800096c:	6833      	ldr	r3, [r6, #0]
 800096e:	423b      	tst	r3, r7
 8000970:	d006      	beq.n	8000980 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000972:	68ab      	ldr	r3, [r5, #8]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d113      	bne.n	80009a0 <HAL_RCC_OscConfig+0x240>
 8000978:	6a22      	ldr	r2, [r4, #32]
 800097a:	4313      	orrs	r3, r2
 800097c:	6223      	str	r3, [r4, #32]
 800097e:	e030      	b.n	80009e2 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000980:	6833      	ldr	r3, [r6, #0]
 8000982:	433b      	orrs	r3, r7
 8000984:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000986:	f7ff fc7f 	bl	8000288 <HAL_GetTick>
 800098a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098c:	6833      	ldr	r3, [r6, #0]
 800098e:	423b      	tst	r3, r7
 8000990:	d1ef      	bne.n	8000972 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000992:	f7ff fc79 	bl	8000288 <HAL_GetTick>
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	1ac0      	subs	r0, r0, r3
 800099a:	2864      	cmp	r0, #100	; 0x64
 800099c:	d9f6      	bls.n	800098c <HAL_RCC_OscConfig+0x22c>
 800099e:	e740      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
 80009a0:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d114      	bne.n	80009d0 <HAL_RCC_OscConfig+0x270>
 80009a6:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009a8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009aa:	4393      	bics	r3, r2
 80009ac:	6223      	str	r3, [r4, #32]
 80009ae:	6a23      	ldr	r3, [r4, #32]
 80009b0:	3203      	adds	r2, #3
 80009b2:	4393      	bics	r3, r2
 80009b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009b6:	f7ff fc67 	bl	8000288 <HAL_GetTick>
 80009ba:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009bc:	6a23      	ldr	r3, [r4, #32]
 80009be:	423b      	tst	r3, r7
 80009c0:	d025      	beq.n	8000a0e <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c2:	f7ff fc61 	bl	8000288 <HAL_GetTick>
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_RCC_OscConfig+0x314>)
 80009c8:	1b80      	subs	r0, r0, r6
 80009ca:	4298      	cmp	r0, r3
 80009cc:	d9f6      	bls.n	80009bc <HAL_RCC_OscConfig+0x25c>
 80009ce:	e728      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d0:	2b05      	cmp	r3, #5
 80009d2:	d10b      	bne.n	80009ec <HAL_RCC_OscConfig+0x28c>
 80009d4:	6a21      	ldr	r1, [r4, #32]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	430b      	orrs	r3, r1
 80009da:	6223      	str	r3, [r4, #32]
 80009dc:	6a23      	ldr	r3, [r4, #32]
 80009de:	431a      	orrs	r2, r3
 80009e0:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80009e2:	f7ff fc51 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80009e8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ea:	e00d      	b.n	8000a08 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ec:	6a23      	ldr	r3, [r4, #32]
 80009ee:	4393      	bics	r3, r2
 80009f0:	2204      	movs	r2, #4
 80009f2:	6223      	str	r3, [r4, #32]
 80009f4:	6a23      	ldr	r3, [r4, #32]
 80009f6:	4393      	bics	r3, r2
 80009f8:	e7c0      	b.n	800097c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f7ff fc45 	bl	8000288 <HAL_GetTick>
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_RCC_OscConfig+0x314>)
 8000a00:	1b80      	subs	r0, r0, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d900      	bls.n	8000a08 <HAL_RCC_OscConfig+0x2a8>
 8000a06:	e70c      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a08:	6a23      	ldr	r3, [r4, #32]
 8000a0a:	423b      	tst	r3, r7
 8000a0c:	d0f5      	beq.n	80009fa <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d000      	beq.n	8000a16 <HAL_RCC_OscConfig+0x2b6>
 8000a14:	e6b6      	b.n	8000784 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a16:	69e3      	ldr	r3, [r4, #28]
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_RCC_OscConfig+0x318>)
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61e3      	str	r3, [r4, #28]
 8000a1e:	e6b1      	b.n	8000784 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a20:	f7ff fc32 	bl	8000288 <HAL_GetTick>
 8000a24:	1bc0      	subs	r0, r0, r7
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d800      	bhi.n	8000a2c <HAL_RCC_OscConfig+0x2cc>
 8000a2a:	e6be      	b.n	80007aa <HAL_RCC_OscConfig+0x4a>
 8000a2c:	e6f9      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000a2e:	3205      	adds	r2, #5
 8000a30:	d103      	bne.n	8000a3a <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000a32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a34:	439a      	bics	r2, r3
 8000a36:	6362      	str	r2, [r4, #52]	; 0x34
 8000a38:	e6bb      	b.n	80007b2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a3c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a3e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000a40:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a42:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a46:	4393      	bics	r3, r2
 8000a48:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fc1d 	bl	8000288 <HAL_GetTick>
 8000a4e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a52:	4233      	tst	r3, r6
 8000a54:	d100      	bne.n	8000a58 <HAL_RCC_OscConfig+0x2f8>
 8000a56:	e6b3      	b.n	80007c0 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a58:	f7ff fc16 	bl	8000288 <HAL_GetTick>
 8000a5c:	1bc0      	subs	r0, r0, r7
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0x2f0>
 8000a62:	e6de      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
 8000a64:	40021000 	.word	0x40021000
 8000a68:	fffeffff 	.word	0xfffeffff
 8000a6c:	fffbffff 	.word	0xfffbffff
 8000a70:	40007000 	.word	0x40007000
 8000a74:	00001388 	.word	0x00001388
 8000a78:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	4c26      	ldr	r4, [pc, #152]	; (8000b18 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000a80:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a82:	6863      	ldr	r3, [r4, #4]
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d100      	bne.n	8000a8c <HAL_RCC_OscConfig+0x32c>
 8000a8a:	e6b3      	b.n	80007f4 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_RCC_OscConfig+0x3bc>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a94:	2902      	cmp	r1, #2
 8000a96:	d12f      	bne.n	8000af8 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000a98:	f7ff fbf6 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a9c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa0:	04b6      	lsls	r6, r6, #18
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	4233      	tst	r3, r6
 8000aa6:	d121      	bne.n	8000aec <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000aac:	4393      	bics	r3, r2
 8000aae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ab4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ab6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ab8:	6862      	ldr	r2, [r4, #4]
 8000aba:	430b      	orrs	r3, r1
 8000abc:	4918      	ldr	r1, [pc, #96]	; (8000b20 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000abe:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	6822      	ldr	r2, [r4, #0]
 8000aca:	045b      	lsls	r3, r3, #17
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fbda 	bl	8000288 <HAL_GetTick>
 8000ad4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ad6:	04ad      	lsls	r5, r5, #18
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	422b      	tst	r3, r5
 8000adc:	d000      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x380>
 8000ade:	e673      	b.n	80007c8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae0:	f7ff fbd2 	bl	8000288 <HAL_GetTick>
 8000ae4:	1b80      	subs	r0, r0, r6
 8000ae6:	2802      	cmp	r0, #2
 8000ae8:	d9f6      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x378>
 8000aea:	e69a      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aec:	f7ff fbcc 	bl	8000288 <HAL_GetTick>
 8000af0:	1bc0      	subs	r0, r0, r7
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9d5      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x342>
 8000af6:	e694      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000af8:	f7ff fbc6 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000afc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000afe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b00:	04ad      	lsls	r5, r5, #18
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	422b      	tst	r3, r5
 8000b06:	d100      	bne.n	8000b0a <HAL_RCC_OscConfig+0x3aa>
 8000b08:	e65e      	b.n	80007c8 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fbbd 	bl	8000288 <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f6      	bls.n	8000b02 <HAL_RCC_OscConfig+0x3a2>
 8000b14:	e685      	b.n	8000822 <HAL_RCC_OscConfig+0xc2>
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	feffffff 	.word	0xfeffffff
 8000b20:	ffc2ffff 	.word	0xffc2ffff

08000b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b24:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000b26:	4c14      	ldr	r4, [pc, #80]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000b28:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	0021      	movs	r1, r4
 8000b2e:	4668      	mov	r0, sp
 8000b30:	f000 fcb2 	bl	8001498 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000b34:	0021      	movs	r1, r4
 8000b36:	ad04      	add	r5, sp, #16
 8000b38:	2210      	movs	r2, #16
 8000b3a:	3110      	adds	r1, #16
 8000b3c:	0028      	movs	r0, r5
 8000b3e:	f000 fcab 	bl	8001498 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b42:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000b44:	4e0d      	ldr	r6, [pc, #52]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b46:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b48:	401a      	ands	r2, r3
 8000b4a:	2a08      	cmp	r2, #8
 8000b4c:	d111      	bne.n	8000b72 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000b4e:	200f      	movs	r0, #15
 8000b50:	466a      	mov	r2, sp
 8000b52:	0c99      	lsrs	r1, r3, #18
 8000b54:	4001      	ands	r1, r0
 8000b56:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000b58:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000b5a:	4002      	ands	r2, r0
 8000b5c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000b5e:	03db      	lsls	r3, r3, #15
 8000b60:	d505      	bpl.n	8000b6e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b64:	f7ff fada 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000b68:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b6a:	b008      	add	sp, #32
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b70:	e7fa      	b.n	8000b68 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000b72:	4803      	ldr	r0, [pc, #12]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000b74:	e7f9      	b.n	8000b6a <HAL_RCC_GetSysClockFreq+0x46>
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	080014c4 	.word	0x080014c4
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	007a1200 	.word	0x007a1200
 8000b84:	003d0900 	.word	0x003d0900

08000b88 <HAL_RCC_ClockConfig>:
{
 8000b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4c43      	ldr	r4, [pc, #268]	; (8000c9c <HAL_RCC_ClockConfig+0x114>)
{
 8000b8e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b90:	6823      	ldr	r3, [r4, #0]
{
 8000b92:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b94:	4013      	ands	r3, r2
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d31c      	bcc.n	8000bd4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b9a:	6832      	ldr	r2, [r6, #0]
 8000b9c:	0793      	lsls	r3, r2, #30
 8000b9e:	d423      	bmi.n	8000be8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba0:	07d3      	lsls	r3, r2, #31
 8000ba2:	d429      	bmi.n	8000bf8 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	401a      	ands	r2, r3
 8000baa:	4297      	cmp	r7, r2
 8000bac:	d367      	bcc.n	8000c7e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bae:	6833      	ldr	r3, [r6, #0]
 8000bb0:	4c3b      	ldr	r4, [pc, #236]	; (8000ca0 <HAL_RCC_ClockConfig+0x118>)
 8000bb2:	075b      	lsls	r3, r3, #29
 8000bb4:	d46a      	bmi.n	8000c8c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bb6:	f7ff ffb5 	bl	8000b24 <HAL_RCC_GetSysClockFreq>
 8000bba:	6863      	ldr	r3, [r4, #4]
 8000bbc:	4a39      	ldr	r2, [pc, #228]	; (8000ca4 <HAL_RCC_ClockConfig+0x11c>)
 8000bbe:	061b      	lsls	r3, r3, #24
 8000bc0:	0f1b      	lsrs	r3, r3, #28
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	40d8      	lsrs	r0, r3
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_RCC_ClockConfig+0x120>)
 8000bc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fb32 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	4393      	bics	r3, r2
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	4013      	ands	r3, r2
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d0da      	beq.n	8000b9a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
}
 8000be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000be8:	20f0      	movs	r0, #240	; 0xf0
 8000bea:	492d      	ldr	r1, [pc, #180]	; (8000ca0 <HAL_RCC_ClockConfig+0x118>)
 8000bec:	684b      	ldr	r3, [r1, #4]
 8000bee:	4383      	bics	r3, r0
 8000bf0:	68b0      	ldr	r0, [r6, #8]
 8000bf2:	4303      	orrs	r3, r0
 8000bf4:	604b      	str	r3, [r1, #4]
 8000bf6:	e7d3      	b.n	8000ba0 <HAL_RCC_ClockConfig+0x18>
 8000bf8:	4d29      	ldr	r5, [pc, #164]	; (8000ca0 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bfa:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d11a      	bne.n	8000c38 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c02:	039b      	lsls	r3, r3, #14
 8000c04:	d5ee      	bpl.n	8000be4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c06:	2103      	movs	r1, #3
 8000c08:	686b      	ldr	r3, [r5, #4]
 8000c0a:	438b      	bics	r3, r1
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c10:	f7ff fb3a 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c14:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c16:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d115      	bne.n	8000c48 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	686b      	ldr	r3, [r5, #4]
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d0be      	beq.n	8000ba4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c26:	f7ff fb2f 	bl	8000288 <HAL_GetTick>
 8000c2a:	9b01      	ldr	r3, [sp, #4]
 8000c2c:	1ac0      	subs	r0, r0, r3
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c30:	4298      	cmp	r0, r3
 8000c32:	d9f3      	bls.n	8000c1c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000c34:	2003      	movs	r0, #3
 8000c36:	e7d6      	b.n	8000be6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c38:	2a02      	cmp	r2, #2
 8000c3a:	d102      	bne.n	8000c42 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	d4e2      	bmi.n	8000c06 <HAL_RCC_ClockConfig+0x7e>
 8000c40:	e7d0      	b.n	8000be4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c42:	079b      	lsls	r3, r3, #30
 8000c44:	d4df      	bmi.n	8000c06 <HAL_RCC_ClockConfig+0x7e>
 8000c46:	e7cd      	b.n	8000be4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d012      	beq.n	8000c72 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c4c:	220c      	movs	r2, #12
 8000c4e:	686b      	ldr	r3, [r5, #4]
 8000c50:	4213      	tst	r3, r2
 8000c52:	d0a7      	beq.n	8000ba4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c54:	f7ff fb18 	bl	8000288 <HAL_GetTick>
 8000c58:	9b01      	ldr	r3, [sp, #4]
 8000c5a:	1ac0      	subs	r0, r0, r3
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c5e:	4298      	cmp	r0, r3
 8000c60:	d9f4      	bls.n	8000c4c <HAL_RCC_ClockConfig+0xc4>
 8000c62:	e7e7      	b.n	8000c34 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c64:	f7ff fb10 	bl	8000288 <HAL_GetTick>
 8000c68:	9b01      	ldr	r3, [sp, #4]
 8000c6a:	1ac0      	subs	r0, r0, r3
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_RCC_ClockConfig+0x124>)
 8000c6e:	4298      	cmp	r0, r3
 8000c70:	d8e0      	bhi.n	8000c34 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c72:	220c      	movs	r2, #12
 8000c74:	686b      	ldr	r3, [r5, #4]
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d1f3      	bne.n	8000c64 <HAL_RCC_ClockConfig+0xdc>
 8000c7c:	e792      	b.n	8000ba4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	439a      	bics	r2, r3
 8000c82:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	421a      	tst	r2, r3
 8000c88:	d1ac      	bne.n	8000be4 <HAL_RCC_ClockConfig+0x5c>
 8000c8a:	e790      	b.n	8000bae <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_RCC_ClockConfig+0x128>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	68f2      	ldr	r2, [r6, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	6063      	str	r3, [r4, #4]
 8000c98:	e78d      	b.n	8000bb6 <HAL_RCC_ClockConfig+0x2e>
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40022000 	.word	0x40022000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	080014e8 	.word	0x080014e8
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	00001388 	.word	0x00001388
 8000cb0:	fffff8ff 	.word	0xfffff8ff

08000cb4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
}
 8000cb8:	4770      	bx	lr
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	20000000 	.word	0x20000000

08000cc0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	0f5b      	lsrs	r3, r3, #29
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cce:	6810      	ldr	r0, [r2, #0]
 8000cd0:	40d8      	lsrs	r0, r3
}    
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	080014f8 	.word	0x080014f8
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ce2:	6803      	ldr	r3, [r0, #0]
{
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ce8:	03db      	lsls	r3, r3, #15
 8000cea:	d528      	bpl.n	8000d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cec:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cee:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf0:	4c3b      	ldr	r4, [pc, #236]	; (8000de0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000cf2:	0552      	lsls	r2, r2, #21
 8000cf4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cf6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf8:	4213      	tst	r3, r2
 8000cfa:	d108      	bne.n	8000d0e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	69e3      	ldr	r3, [r4, #28]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61e3      	str	r3, [r4, #28]
 8000d02:	69e3      	ldr	r3, [r4, #28]
 8000d04:	4013      	ands	r3, r2
 8000d06:	9303      	str	r3, [sp, #12]
 8000d08:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0e:	2780      	movs	r7, #128	; 0x80
 8000d10:	4e34      	ldr	r6, [pc, #208]	; (8000de4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000d12:	007f      	lsls	r7, r7, #1
 8000d14:	6833      	ldr	r3, [r6, #0]
 8000d16:	423b      	tst	r3, r7
 8000d18:	d02f      	beq.n	8000d7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d1a:	22c0      	movs	r2, #192	; 0xc0
 8000d1c:	6a23      	ldr	r3, [r4, #32]
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4013      	ands	r3, r2
 8000d22:	4e31      	ldr	r6, [pc, #196]	; (8000de8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d24:	d13b      	bne.n	8000d9e <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d26:	6a23      	ldr	r3, [r4, #32]
 8000d28:	401e      	ands	r6, r3
 8000d2a:	686b      	ldr	r3, [r5, #4]
 8000d2c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d2e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d30:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d103      	bne.n	8000d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d36:	69e3      	ldr	r3, [r4, #28]
 8000d38:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d3e:	682a      	ldr	r2, [r5, #0]
 8000d40:	07d3      	lsls	r3, r2, #31
 8000d42:	d506      	bpl.n	8000d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d44:	2003      	movs	r0, #3
 8000d46:	4926      	ldr	r1, [pc, #152]	; (8000de0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d4a:	4383      	bics	r3, r0
 8000d4c:	68a8      	ldr	r0, [r5, #8]
 8000d4e:	4303      	orrs	r3, r0
 8000d50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d52:	0693      	lsls	r3, r2, #26
 8000d54:	d506      	bpl.n	8000d64 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d56:	2010      	movs	r0, #16
 8000d58:	4921      	ldr	r1, [pc, #132]	; (8000de0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d5a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d5c:	4383      	bics	r3, r0
 8000d5e:	68e8      	ldr	r0, [r5, #12]
 8000d60:	4303      	orrs	r3, r0
 8000d62:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000d64:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000d66:	0553      	lsls	r3, r2, #21
 8000d68:	d517      	bpl.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d70:	438b      	bics	r3, r1
 8000d72:	6929      	ldr	r1, [r5, #16]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	e00f      	b.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d7a:	6833      	ldr	r3, [r6, #0]
 8000d7c:	433b      	orrs	r3, r7
 8000d7e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d80:	f7ff fa82 	bl	8000288 <HAL_GetTick>
 8000d84:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	6833      	ldr	r3, [r6, #0]
 8000d88:	423b      	tst	r3, r7
 8000d8a:	d1c6      	bne.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8c:	f7ff fa7c 	bl	8000288 <HAL_GetTick>
 8000d90:	9b01      	ldr	r3, [sp, #4]
 8000d92:	1ac0      	subs	r0, r0, r3
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9f6      	bls.n	8000d86 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
}
 8000d9a:	b005      	add	sp, #20
 8000d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d9e:	6869      	ldr	r1, [r5, #4]
 8000da0:	400a      	ands	r2, r1
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d0bf      	beq.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000da6:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000da8:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000daa:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dac:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	4303      	orrs	r3, r0
 8000db2:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000db4:	6a23      	ldr	r3, [r4, #32]
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000db8:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000dba:	4003      	ands	r3, r0
 8000dbc:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000dbe:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000dc0:	07d3      	lsls	r3, r2, #31
 8000dc2:	d5b0      	bpl.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fa60 	bl	8000288 <HAL_GetTick>
 8000dc8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	6a23      	ldr	r3, [r4, #32]
 8000dce:	4213      	tst	r3, r2
 8000dd0:	d1a9      	bne.n	8000d26 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fa59 	bl	8000288 <HAL_GetTick>
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000dd8:	1bc0      	subs	r0, r0, r7
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d9f5      	bls.n	8000dca <HAL_RCCEx_PeriphCLKConfig+0xea>
 8000dde:	e7db      	b.n	8000d98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40007000 	.word	0x40007000
 8000de8:	fffffcff 	.word	0xfffffcff
 8000dec:	efffffff 	.word	0xefffffff
 8000df0:	fffeffff 	.word	0xfffeffff
 8000df4:	00001388 	.word	0x00001388

08000df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d04b      	beq.n	8000e9a <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e02:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e04:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e08:	355d      	adds	r5, #93	; 0x5d
 8000e0a:	782b      	ldrb	r3, [r5, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000e12:	0022      	movs	r2, r4
 8000e14:	325c      	adds	r2, #92	; 0x5c
 8000e16:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e18:	0020      	movs	r0, r4
 8000e1a:	f000 fa6d 	bl	80012f8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000e1e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e20:	2240      	movs	r2, #64	; 0x40
 8000e22:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e24:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000e26:	680b      	ldr	r3, [r1, #0]
 8000e28:	2000      	movs	r0, #0
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]
 8000e2e:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e30:	68e2      	ldr	r2, [r4, #12]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d931      	bls.n	8000e9c <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000e38:	26f0      	movs	r6, #240	; 0xf0
 8000e3a:	0136      	lsls	r6, r6, #4
 8000e3c:	42b2      	cmp	r2, r6
 8000e3e:	d133      	bne.n	8000ea8 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000e40:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000e42:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d103      	bne.n	8000e50 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d92f      	bls.n	8000eac <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000e4c:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000e4e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000e50:	68a7      	ldr	r7, [r4, #8]
 8000e52:	6863      	ldr	r3, [r4, #4]
 8000e54:	69a0      	ldr	r0, [r4, #24]
 8000e56:	433b      	orrs	r3, r7
 8000e58:	6927      	ldr	r7, [r4, #16]
 8000e5a:	433b      	orrs	r3, r7
 8000e5c:	6967      	ldr	r7, [r4, #20]
 8000e5e:	433b      	orrs	r3, r7
 8000e60:	69e7      	ldr	r7, [r4, #28]
 8000e62:	433b      	orrs	r3, r7
 8000e64:	6a27      	ldr	r7, [r4, #32]
 8000e66:	433b      	orrs	r3, r7
 8000e68:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000e6a:	433b      	orrs	r3, r7
 8000e6c:	2780      	movs	r7, #128	; 0x80
 8000e6e:	00bf      	lsls	r7, r7, #2
 8000e70:	4007      	ands	r7, r0
 8000e72:	433b      	orrs	r3, r7
 8000e74:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e78:	0c00      	lsrs	r0, r0, #16
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	2304      	movs	r3, #4
 8000e82:	4018      	ands	r0, r3
 8000e84:	4310      	orrs	r0, r2
 8000e86:	4306      	orrs	r6, r0
 8000e88:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e8a:	69cb      	ldr	r3, [r1, #28]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e8e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e90:	4013      	ands	r3, r2
 8000e92:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000e94:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e96:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000e98:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000e9c:	2680      	movs	r6, #128	; 0x80
 8000e9e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d0ce      	beq.n	8000e42 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	62a0      	str	r0, [r4, #40]	; 0x28
 8000ea6:	e7cc      	b.n	8000e42 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ea8:	0006      	movs	r6, r0
 8000eaa:	e7fb      	b.n	8000ea4 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e7ce      	b.n	8000e4e <HAL_SPI_Init+0x56>
 8000eb0:	fffff7ff 	.word	0xfffff7ff

08000eb4 <USART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	000e      	movs	r6, r1
 8000eba:	0017      	movs	r7, r2
 8000ebc:	001d      	movs	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8000ebe:	6822      	ldr	r2, [r4, #0]
 8000ec0:	69d3      	ldr	r3, [r2, #28]
 8000ec2:	4033      	ands	r3, r6
 8000ec4:	429e      	cmp	r6, r3
 8000ec6:	d101      	bne.n	8000ecc <USART_WaitOnFlagUntilTimeout.constprop.3+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e014      	b.n	8000ef6 <USART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8000ecc:	1c6b      	adds	r3, r5, #1
 8000ece:	d0f7      	beq.n	8000ec0 <USART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	d111      	bne.n	8000ef8 <USART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	490b      	ldr	r1, [pc, #44]	; (8000f04 <USART_WaitOnFlagUntilTimeout.constprop.3+0x50>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(husart);
 8000eda:	2003      	movs	r0, #3
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000edc:	400a      	ands	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	31a3      	adds	r1, #163	; 0xa3
 8000ee4:	31ff      	adds	r1, #255	; 0xff
 8000ee6:	438a      	bics	r2, r1
 8000ee8:	609a      	str	r2, [r3, #8]
        husart->State= HAL_USART_STATE_READY;
 8000eea:	0023      	movs	r3, r4
 8000eec:	3341      	adds	r3, #65	; 0x41
 8000eee:	7019      	strb	r1, [r3, #0]
        __HAL_UNLOCK(husart);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	3440      	adds	r4, #64	; 0x40
 8000ef4:	7023      	strb	r3, [r4, #0]
}
 8000ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ef8:	f7ff f9c6 	bl	8000288 <HAL_GetTick>
 8000efc:	1bc0      	subs	r0, r0, r7
 8000efe:	4285      	cmp	r5, r0
 8000f00:	d2dd      	bcs.n	8000ebe <USART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f02:	e7e7      	b.n	8000ed4 <USART_WaitOnFlagUntilTimeout.constprop.3+0x20>
 8000f04:	fffffe5f 	.word	0xfffffe5f

08000f08 <HAL_USART_Init>:
{
 8000f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f0a:	1e04      	subs	r4, r0, #0
  if(husart == NULL)
 8000f0c:	d102      	bne.n	8000f14 <HAL_USART_Init+0xc>
    return HAL_ERROR;
 8000f0e:	2501      	movs	r5, #1
}
 8000f10:	0028      	movs	r0, r5
 8000f12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(husart->State == HAL_USART_STATE_RESET)
 8000f14:	0007      	movs	r7, r0
 8000f16:	3741      	adds	r7, #65	; 0x41
 8000f18:	783b      	ldrb	r3, [r7, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <HAL_USART_Init+0x22>
    husart->Lock = HAL_UNLOCKED;
 8000f20:	0002      	movs	r2, r0
 8000f22:	3240      	adds	r2, #64	; 0x40
 8000f24:	7013      	strb	r3, [r2, #0]
    HAL_USART_MspInit(husart);
 8000f26:	f000 fa0b 	bl	8001340 <HAL_USART_MspInit>
  husart->State = HAL_USART_STATE_BUSY;
 8000f2a:	2302      	movs	r3, #2
  __HAL_USART_DISABLE(husart);
 8000f2c:	2501      	movs	r5, #1
 8000f2e:	6822      	ldr	r2, [r4, #0]
  husart->State = HAL_USART_STATE_BUSY;
 8000f30:	703b      	strb	r3, [r7, #0]
  __HAL_USART_DISABLE(husart);
 8000f32:	6813      	ldr	r3, [r2, #0]
   *  the USART Word Length, Parity and Mode:
   *  set the M bits according to husart->Init.WordLength value
   *  set PCE and PS bits according to husart->Init.Parity value
   *  set TE and RE bits according to husart->Init.Mode value 
   *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8)  */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f34:	68a0      	ldr	r0, [r4, #8]
  __HAL_USART_DISABLE(husart);
 8000f36:	43ab      	bics	r3, r5
 8000f38:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f3a:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f3c:	6811      	ldr	r1, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f3e:	4318      	orrs	r0, r3
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	4303      	orrs	r3, r0
 8000f46:	6960      	ldr	r0, [r4, #20]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* no CR3 register configuration                                            */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */ 
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f48:	4e42      	ldr	r6, [pc, #264]	; (8001054 <HAL_USART_Init+0x14c>)
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f4a:	4303      	orrs	r3, r0
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f4c:	4842      	ldr	r0, [pc, #264]	; (8001058 <HAL_USART_Init+0x150>)
 8000f4e:	4001      	ands	r1, r0
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8000f54:	69a1      	ldr	r1, [r4, #24]
 8000f56:	69e3      	ldr	r3, [r4, #28]
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 8000f58:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8000f5a:	4319      	orrs	r1, r3
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6a21      	ldr	r1, [r4, #32]
 8000f64:	430b      	orrs	r3, r1
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 8000f66:	4303      	orrs	r3, r0
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8000f68:	6851      	ldr	r1, [r2, #4]
 8000f6a:	483c      	ldr	r0, [pc, #240]	; (800105c <HAL_USART_Init+0x154>)
 8000f6c:	4001      	ands	r1, r0
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6053      	str	r3, [r2, #4]
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f72:	42b2      	cmp	r2, r6
 8000f74:	d10e      	bne.n	8000f94 <HAL_USART_Init+0x8c>
 8000f76:	2203      	movs	r2, #3
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <HAL_USART_Init+0x158>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4013      	ands	r3, r2
  switch (clocksource)
 8000f7e:	4a39      	ldr	r2, [pc, #228]	; (8001064 <HAL_USART_Init+0x15c>)
 8000f80:	5cd0      	ldrb	r0, [r2, r3]
 8000f82:	2808      	cmp	r0, #8
 8000f84:	d845      	bhi.n	8001012 <HAL_USART_Init+0x10a>
 8000f86:	f7ff f8bf 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f8a:	4409      	.short	0x4409
 8000f8c:	443c440f 	.word	0x443c440f
 8000f90:	4444      	.short	0x4444
 8000f92:	3f          	.byte	0x3f
 8000f93:	00          	.byte	0x00
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_USART_Init+0x160>)
  uint16_t usartdiv                    = 0x0000U;  
 8000f96:	2000      	movs	r0, #0
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d10e      	bne.n	8000fba <HAL_USART_Init+0xb2>
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(((2*HAL_RCC_GetPCLK1Freq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000f9c:	f7ff fe90 	bl	8000cc0 <HAL_RCC_GetPCLK1Freq>
      break;
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
      break;
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	0040      	lsls	r0, r0, #1
 8000fa4:	085b      	lsrs	r3, r3, #1
 8000fa6:	e002      	b.n	8000fae <HAL_USART_Init+0xa6>
      usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	0858      	lsrs	r0, r3, #1
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_USART_Init+0x164>)
      break;
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fae:	18c0      	adds	r0, r0, r3
 8000fb0:	6861      	ldr	r1, [r4, #4]
 8000fb2:	f7ff f8b3 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret                = HAL_OK;
 8000fb6:	2500      	movs	r5, #0
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fb8:	b280      	uxth	r0, r0
    default:
      ret = HAL_ERROR;
      break;
  }
  
  brrtemp = usartdiv & 0xFFF0U;
 8000fba:	230f      	movs	r3, #15
 8000fbc:	0002      	movs	r2, r0
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fbe:	0700      	lsls	r0, r0, #28
  brrtemp = usartdiv & 0xFFF0U;
 8000fc0:	439a      	bics	r2, r3
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fc2:	0f40      	lsrs	r0, r0, #29
  husart->Instance->BRR = brrtemp;
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	4310      	orrs	r0, r2
 8000fc8:	60d8      	str	r0, [r3, #12]
  if (USART_SetConfig(husart) == HAL_ERROR)
 8000fca:	2d01      	cmp	r5, #1
 8000fcc:	d09f      	beq.n	8000f0e <HAL_USART_Init+0x6>
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4927      	ldr	r1, [pc, #156]	; (8001070 <HAL_USART_Init+0x168>)
 8000fd2:	400a      	ands	r2, r1
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000fd4:	212a      	movs	r1, #42	; 0x2a
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8000fd6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	438a      	bics	r2, r1
 8000fdc:	609a      	str	r2, [r3, #8]
  __HAL_USART_ENABLE(husart);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	6819      	ldr	r1, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	6463      	str	r3, [r4, #68]	; 0x44

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8000fea:	f7ff f94d 	bl	8000288 <HAL_GetTick>

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(husart->Instance))
 8000fee:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000ff0:	9001      	str	r0, [sp, #4]
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(husart->Instance))
 8000ff2:	42b3      	cmp	r3, r6
 8000ff4:	d010      	beq.n	8001018 <HAL_USART_Init+0x110>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART state*/
  husart->State= HAL_USART_STATE_READY;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	703b      	strb	r3, [r7, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	3440      	adds	r4, #64	; 0x40
 8000ffe:	7023      	strb	r3, [r4, #0]
 8001000:	e786      	b.n	8000f10 <HAL_USART_Init+0x8>
      usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8001002:	f7ff fd8f 	bl	8000b24 <HAL_RCC_GetSysClockFreq>
 8001006:	e7cb      	b.n	8000fa0 <HAL_USART_Init+0x98>
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8001008:	6863      	ldr	r3, [r4, #4]
 800100a:	0858      	lsrs	r0, r3, #1
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	025b      	lsls	r3, r3, #9
 8001010:	e7cd      	b.n	8000fae <HAL_USART_Init+0xa6>
  uint16_t usartdiv                    = 0x0000U;  
 8001012:	2000      	movs	r0, #0
      ret = HAL_ERROR;
 8001014:	2501      	movs	r5, #1
 8001016:	e7d0      	b.n	8000fba <HAL_USART_Init+0xb2>
    if((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	071b      	lsls	r3, r3, #28
 800101c:	d40e      	bmi.n	800103c <HAL_USART_Init+0x134>
    if((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	075b      	lsls	r3, r3, #29
 8001024:	d5e7      	bpl.n	8000ff6 <HAL_USART_Init+0xee>
      if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001026:	23fa      	movs	r3, #250	; 0xfa
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	9a01      	ldr	r2, [sp, #4]
 800102e:	03c9      	lsls	r1, r1, #15
 8001030:	0020      	movs	r0, r4
 8001032:	f7ff ff3f 	bl	8000eb4 <USART_WaitOnFlagUntilTimeout.constprop.3>
 8001036:	2800      	cmp	r0, #0
 8001038:	d10a      	bne.n	8001050 <HAL_USART_Init+0x148>
 800103a:	e7dc      	b.n	8000ff6 <HAL_USART_Init+0xee>
      if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800103c:	23fa      	movs	r3, #250	; 0xfa
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	9a01      	ldr	r2, [sp, #4]
 8001044:	0389      	lsls	r1, r1, #14
 8001046:	0020      	movs	r0, r4
 8001048:	f7ff ff34 	bl	8000eb4 <USART_WaitOnFlagUntilTimeout.constprop.3>
 800104c:	2800      	cmp	r0, #0
 800104e:	d0e6      	beq.n	800101e <HAL_USART_Init+0x116>
        return HAL_TIMEOUT;
 8001050:	2503      	movs	r5, #3
 8001052:	e75d      	b.n	8000f10 <HAL_USART_Init+0x8>
 8001054:	40013800 	.word	0x40013800
 8001058:	ffff69f3 	.word	0xffff69f3
 800105c:	ffffc0ff 	.word	0xffffc0ff
 8001060:	40021000 	.word	0x40021000
 8001064:	080014e4 	.word	0x080014e4
 8001068:	40004400 	.word	0x40004400
 800106c:	00f42400 	.word	0x00f42400
 8001070:	ffffbfff 	.word	0xffffbfff

08001074 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001074:	2312      	movs	r3, #18
{
 8001076:	b510      	push	{r4, lr}
 8001078:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800107a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800107c:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107e:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001080:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001082:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800108a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800108c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f7ff fb67 	bl	8000760 <HAL_RCC_OscConfig>
 8001092:	1e01      	subs	r1, r0, #0
 8001094:	d000      	beq.n	8001098 <SystemClock_Config+0x24>
 8001096:	e7fe      	b.n	8001096 <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a4:	f7ff fd70 	bl	8000b88 <HAL_RCC_ClockConfig>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d000      	beq.n	80010ae <SystemClock_Config+0x3a>
 80010ac:	e7fe      	b.n	80010ac <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010ae:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b2:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f7ff fe14 	bl	8000ce0 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	1e04      	subs	r4, r0, #0
 80010ba:	d000      	beq.n	80010be <SystemClock_Config+0x4a>
 80010bc:	e7fe      	b.n	80010bc <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010be:	f7ff fdf9 	bl	8000cb4 <HAL_RCC_GetHCLKFreq>
 80010c2:	21fa      	movs	r1, #250	; 0xfa
 80010c4:	0089      	lsls	r1, r1, #2
 80010c6:	f7ff f829 	bl	800011c <__udivsi3>
 80010ca:	f7ff fa39 	bl	8000540 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010ce:	2004      	movs	r0, #4
 80010d0:	f7ff fa50 	bl	8000574 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010d4:	2001      	movs	r0, #1
 80010d6:	0022      	movs	r2, r4
 80010d8:	0021      	movs	r1, r4
 80010da:	4240      	negs	r0, r0
 80010dc:	f7ff fa00 	bl	80004e0 <HAL_NVIC_SetPriority>
}
 80010e0:	b016      	add	sp, #88	; 0x58
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <main>:
{
 80010e4:	b530      	push	{r4, r5, lr}
 80010e6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80010e8:	f7ff f8b6 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 80010ec:	f7ff ffc2 	bl	8001074 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	4b4e      	ldr	r3, [pc, #312]	; (800122c <main+0x148>)
 80010f4:	0280      	lsls	r0, r0, #10
 80010f6:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80010f8:	24e0      	movs	r4, #224	; 0xe0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4301      	orrs	r1, r0
 80010fc:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4002      	ands	r2, r0
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800110c:	00a4      	lsls	r4, r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	400b      	ands	r3, r1
 8001118:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800111a:	0021      	movs	r1, r4
 800111c:	4844      	ldr	r0, [pc, #272]	; (8001230 <main+0x14c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001122:	f7ff fb17 	bl	8000754 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001126:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	4841      	ldr	r0, [pc, #260]	; (8001230 <main+0x14c>)
 800112c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f7ff fa5e 	bl	80005f4 <HAL_GPIO_Init>
  husart2.Instance = USART2;
 8001138:	483e      	ldr	r0, [pc, #248]	; (8001234 <main+0x150>)
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <main+0x154>)
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800113c:	6084      	str	r4, [r0, #8]
  husart2.Instance = USART2;
 800113e:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate = 38400;
 8001140:	2396      	movs	r3, #150	; 0x96
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	6043      	str	r3, [r0, #4]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001146:	230c      	movs	r3, #12
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001148:	60c4      	str	r4, [r0, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800114a:	6104      	str	r4, [r0, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800114c:	6143      	str	r3, [r0, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800114e:	6184      	str	r4, [r0, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001150:	61c4      	str	r4, [r0, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001152:	6204      	str	r4, [r0, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001154:	f7ff fed8 	bl	8000f08 <HAL_USART_Init>
 8001158:	42a0      	cmp	r0, r4
 800115a:	d000      	beq.n	800115e <main+0x7a>
 800115c:	e7fe      	b.n	800115c <main+0x78>
  hspi1.Instance = SPI1;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <main+0x158>)
 8001160:	4a37      	ldr	r2, [pc, #220]	; (8001240 <main+0x15c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	6098      	str	r0, [r3, #8]
  hspi1.Instance = SPI1;
 8001164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001166:	2282      	movs	r2, #130	; 0x82
 8001168:	0052      	lsls	r2, r2, #1
 800116a:	605a      	str	r2, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800116c:	32fd      	adds	r2, #253	; 0xfd
 800116e:	32ff      	adds	r2, #255	; 0xff
 8001170:	60da      	str	r2, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	3a01      	subs	r2, #1
 8001174:	3aff      	subs	r2, #255	; 0xff
 8001176:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001178:	3afa      	subs	r2, #250	; 0xfa
 800117a:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117c:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117e:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001180:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001182:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001184:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001186:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118a:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	3201      	adds	r2, #1
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118e:	0018      	movs	r0, r3
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001192:	f7ff fe31 	bl	8000df8 <HAL_SPI_Init>
 8001196:	2800      	cmp	r0, #0
 8001198:	d000      	beq.n	800119c <main+0xb8>
 800119a:	e7fe      	b.n	800119a <main+0xb6>
  hadc.Instance = ADC1;
 800119c:	4c29      	ldr	r4, [pc, #164]	; (8001244 <main+0x160>)
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <main+0x164>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011a0:	6060      	str	r0, [r4, #4]
  hadc.Instance = ADC1;
 80011a2:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a4:	2304      	movs	r3, #4
 80011a6:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011aa:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ac:	60e0      	str	r0, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011ae:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011b0:	61e0      	str	r0, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80011b2:	6220      	str	r0, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011b4:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b6:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011ba:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011bc:	0020      	movs	r0, r4
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80011be:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c2:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011c4:	f7ff f866 	bl	8000294 <HAL_ADC_Init>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d000      	beq.n	80011ce <main+0xea>
 80011cc:	e7fe      	b.n	80011cc <main+0xe8>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d4:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 80011d6:	9003      	str	r0, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d8:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011da:	a903      	add	r1, sp, #12
 80011dc:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011de:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011e0:	f7ff f8fe 	bl	80003e0 <HAL_ADC_ConfigChannel>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d000      	beq.n	80011ea <main+0x106>
 80011e8:	e7fe      	b.n	80011e8 <main+0x104>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ea:	a903      	add	r1, sp, #12
 80011ec:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80011ee:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011f0:	f7ff f8f6 	bl	80003e0 <HAL_ADC_ConfigChannel>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d000      	beq.n	80011fa <main+0x116>
 80011f8:	e7fe      	b.n	80011f8 <main+0x114>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80011fa:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011fc:	a903      	add	r1, sp, #12
 80011fe:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001200:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001202:	f7ff f8ed 	bl	80003e0 <HAL_ADC_ConfigChannel>
 8001206:	2800      	cmp	r0, #0
 8001208:	d000      	beq.n	800120c <main+0x128>
 800120a:	e7fe      	b.n	800120a <main+0x126>
  hcrc.Instance = CRC;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <main+0x168>)
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <main+0x16c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001210:	7118      	strb	r0, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001212:	7158      	strb	r0, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001214:	6158      	str	r0, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001216:	6198      	str	r0, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001218:	0018      	movs	r0, r3
  hcrc.Instance = CRC;
 800121a:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800121c:	621d      	str	r5, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800121e:	f7ff f9bc 	bl	800059a <HAL_CRC_Init>
 8001222:	2800      	cmp	r0, #0
 8001224:	d000      	beq.n	8001228 <main+0x144>
 8001226:	e7fe      	b.n	8001226 <main+0x142>
 8001228:	e7fe      	b.n	8001228 <main+0x144>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800
 8001234:	20000084 	.word	0x20000084
 8001238:	40004400 	.word	0x40004400
 800123c:	200000cc 	.word	0x200000cc
 8001240:	40013000 	.word	0x40013000
 8001244:	20000130 	.word	0x20000130
 8001248:	40012400 	.word	0x40012400
 800124c:	20000060 	.word	0x20000060
 8001250:	40023000 	.word	0x40023000

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2001      	movs	r0, #1
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_MspInit+0x38>)
 800125a:	6991      	ldr	r1, [r2, #24]
 800125c:	4301      	orrs	r1, r0
 800125e:	6191      	str	r1, [r2, #24]
 8001260:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001266:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001268:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800126a:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800126e:	f7ff f937 	bl	80004e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2002      	movs	r0, #2
 8001276:	0011      	movs	r1, r2
 8001278:	4240      	negs	r0, r0
 800127a:	f7ff f931 	bl	80004e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2001      	movs	r0, #1
 8001282:	0011      	movs	r1, r2
 8001284:	4240      	negs	r0, r0
 8001286:	f7ff f92b 	bl	80004e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bd07      	pop	{r0, r1, r2, pc}
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_ADC_MspInit+0x38>)
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d113      	bne.n	80012c2 <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129a:	2080      	movs	r0, #128	; 0x80
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_ADC_MspInit+0x3c>)
 800129e:	0080      	lsls	r0, r0, #2
 80012a0:	6991      	ldr	r1, [r2, #24]
 80012a2:	4301      	orrs	r1, r0
 80012a4:	6191      	str	r1, [r2, #24]
 80012a6:	6993      	ldr	r3, [r2, #24]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012aa:	4003      	ands	r3, r0
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f7ff f999 	bl	80005f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c2:	b007      	add	sp, #28
 80012c4:	bd00      	pop	{pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40012400 	.word	0x40012400
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_CRC_MspInit+0x20>)
 80012d2:	6802      	ldr	r2, [r0, #0]
{
 80012d4:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d108      	bne.n	80012ec <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012da:	2040      	movs	r0, #64	; 0x40
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_CRC_MspInit+0x24>)
 80012de:	6951      	ldr	r1, [r2, #20]
 80012e0:	4301      	orrs	r1, r0
 80012e2:	6151      	str	r1, [r2, #20]
 80012e4:	6953      	ldr	r3, [r2, #20]
 80012e6:	4003      	ands	r3, r0
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012ec:	b002      	add	sp, #8
 80012ee:	4770      	bx	lr
 80012f0:	40023000 	.word	0x40023000
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_SPI_MspInit+0x40>)
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d117      	bne.n	8001332 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	2080      	movs	r0, #128	; 0x80
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_SPI_MspInit+0x44>)
 8001306:	0140      	lsls	r0, r0, #5
 8001308:	6991      	ldr	r1, [r2, #24]
 800130a:	4301      	orrs	r1, r0
 800130c:	6191      	str	r1, [r2, #24]
 800130e:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	4003      	ands	r3, r0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001318:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800131c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	3bde      	subs	r3, #222	; 0xde
 8001320:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	a901      	add	r1, sp, #4
 8001326:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800132c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f7ff f961 	bl	80005f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001332:	b007      	add	sp, #28
 8001334:	bd00      	pop	{pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40013000 	.word	0x40013000
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_USART_MspInit>:
  }

}

void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(husart->Instance==USART2)
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_USART_MspInit+0x40>)
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d118      	bne.n	800137c <HAL_USART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <HAL_USART_MspInit+0x44>)
 800134e:	0280      	lsls	r0, r0, #10
 8001350:	69d1      	ldr	r1, [r2, #28]
 8001352:	4301      	orrs	r1, r0
 8001354:	61d1      	str	r1, [r2, #28]
 8001356:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800135a:	4003      	ands	r3, r0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001360:	231c      	movs	r3, #28
 8001362:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	3b1a      	subs	r3, #26
 8001366:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	3303      	adds	r3, #3
 8001370:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001374:	3b02      	subs	r3, #2
 8001376:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f7ff f93c 	bl	80005f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	b007      	add	sp, #28
 800137e:	bd00      	pop	{pc}
 8001380:	40004400 	.word	0x40004400
 8001384:	40021000 	.word	0x40021000

08001388 <NMI_Handler>:
 8001388:	4770      	bx	lr

0800138a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800138a:	e7fe      	b.n	800138a <HardFault_Handler>

0800138c <SVC_Handler>:
 800138c:	4770      	bx	lr

0800138e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001390:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f7fe ff71 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001396:	f7ff f8fc 	bl	8000592 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bd10      	pop	{r4, pc}

0800139c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800139c:	2101      	movs	r1, #1
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80013a0:	4811      	ldr	r0, [pc, #68]	; (80013e8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4002      	ands	r2, r0
 80013ac:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <SystemInit+0x50>)
 80013b2:	4002      	ands	r2, r0
 80013b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <SystemInit+0x54>)
 80013ba:	4002      	ands	r2, r0
 80013bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <SystemInit+0x58>)
 80013c2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80013c4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80013c6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80013c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ca:	4382      	bics	r2, r0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <SystemInit+0x5c>)
 80013d2:	4002      	ands	r2, r0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80013d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d8:	438a      	bics	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]

}
 80013e0:	4770      	bx	lr
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	40021000 	.word	0x40021000
 80013e8:	f8ffb80c 	.word	0xf8ffb80c
 80013ec:	fef6ffff 	.word	0xfef6ffff
 80013f0:	fffbffff 	.word	0xfffbffff
 80013f4:	ffc0ffff 	.word	0xffc0ffff
 80013f8:	fffffeac 	.word	0xfffffeac

080013fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <LoopForever+0x6>)
  ldr r1, =_edata
 8001402:	490e      	ldr	r1, [pc, #56]	; (800143c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <LoopForever+0xe>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001418:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <LoopForever+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001426:	f7ff ffb9 	bl	800139c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800142a:	f000 f811 	bl	8001450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142e:	f7ff fe59 	bl	80010e4 <main>

08001432 <LoopForever>:

LoopForever:
    b LoopForever
 8001432:	e7fe      	b.n	8001432 <LoopForever>
  ldr   r0, =_estack
 8001434:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001440:	08001508 	.word	0x08001508
  ldr r2, =_sbss
 8001444:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001448:	2000017c 	.word	0x2000017c

0800144c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_COMP_IRQHandler>
	...

08001450 <__libc_init_array>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	2600      	movs	r6, #0
 8001454:	4d0c      	ldr	r5, [pc, #48]	; (8001488 <__libc_init_array+0x38>)
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <__libc_init_array+0x3c>)
 8001458:	1b64      	subs	r4, r4, r5
 800145a:	10a4      	asrs	r4, r4, #2
 800145c:	42a6      	cmp	r6, r4
 800145e:	d109      	bne.n	8001474 <__libc_init_array+0x24>
 8001460:	2600      	movs	r6, #0
 8001462:	f000 f823 	bl	80014ac <_init>
 8001466:	4d0a      	ldr	r5, [pc, #40]	; (8001490 <__libc_init_array+0x40>)
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <__libc_init_array+0x44>)
 800146a:	1b64      	subs	r4, r4, r5
 800146c:	10a4      	asrs	r4, r4, #2
 800146e:	42a6      	cmp	r6, r4
 8001470:	d105      	bne.n	800147e <__libc_init_array+0x2e>
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	00b3      	lsls	r3, r6, #2
 8001476:	58eb      	ldr	r3, [r5, r3]
 8001478:	4798      	blx	r3
 800147a:	3601      	adds	r6, #1
 800147c:	e7ee      	b.n	800145c <__libc_init_array+0xc>
 800147e:	00b3      	lsls	r3, r6, #2
 8001480:	58eb      	ldr	r3, [r5, r3]
 8001482:	4798      	blx	r3
 8001484:	3601      	adds	r6, #1
 8001486:	e7f2      	b.n	800146e <__libc_init_array+0x1e>
 8001488:	08001500 	.word	0x08001500
 800148c:	08001500 	.word	0x08001500
 8001490:	08001500 	.word	0x08001500
 8001494:	08001504 	.word	0x08001504

08001498 <memcpy>:
 8001498:	2300      	movs	r3, #0
 800149a:	b510      	push	{r4, lr}
 800149c:	429a      	cmp	r2, r3
 800149e:	d100      	bne.n	80014a2 <memcpy+0xa>
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	5ccc      	ldrb	r4, [r1, r3]
 80014a4:	54c4      	strb	r4, [r0, r3]
 80014a6:	3301      	adds	r3, #1
 80014a8:	e7f8      	b.n	800149c <memcpy+0x4>
	...

080014ac <_init>:
 80014ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b2:	bc08      	pop	{r3}
 80014b4:	469e      	mov	lr, r3
 80014b6:	4770      	bx	lr

080014b8 <_fini>:
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014be:	bc08      	pop	{r3}
 80014c0:	469e      	mov	lr, r3
 80014c2:	4770      	bx	lr
