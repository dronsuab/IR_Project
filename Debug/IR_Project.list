
C:\Users\Iván\Documents\TFG\IR_Project-SerialPort\Debug\IR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080018e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000810  20000004  080018e8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000814  080018e8  00020814  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015153  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fc9  00000000  00000000  0003517f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005303  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000860  00000000  00000000  0003d450  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a60  00000000  00000000  0003dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005f7f  00000000  00000000  0003e710  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002eee  00000000  00000000  0004468f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004757d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001710  00000000  00000000  000475fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017d0 	.word	0x080017d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080017d0 	.word	0x080017d0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fd50 	bl	8000cdc <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f98c 	bl	8000560 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f956 	bl	8000500 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 f97d 	bl	8001568 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80002ba:	2c00      	cmp	r4, #0
 80002bc:	d072      	beq.n	80003a4 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d106      	bne.n	80002d2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002c4:	0022      	movs	r2, r4
 80002c6:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80002c8:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ca:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80002cc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80002ce:	f001 f969 	bl	80015a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002d4:	06db      	lsls	r3, r3, #27
 80002d6:	d500      	bpl.n	80002da <HAL_ADC_Init+0x26>
 80002d8:	e079      	b.n	80003ce <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002da:	2204      	movs	r2, #4
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	6898      	ldr	r0, [r3, #8]
 80002e0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80002e2:	d000      	beq.n	80002e6 <HAL_ADC_Init+0x32>
 80002e4:	e073      	b.n	80003ce <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002e8:	4942      	ldr	r1, [pc, #264]	; (80003f4 <HAL_ADC_Init+0x140>)
 80002ea:	4011      	ands	r1, r2
 80002ec:	2202      	movs	r2, #2
 80002ee:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002f0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80002f2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	400a      	ands	r2, r1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	d000      	beq.n	80002fe <HAL_ADC_Init+0x4a>
 80002fc:	e06d      	b.n	80003da <HAL_ADC_Init+0x126>
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	4211      	tst	r1, r2
 8000302:	d102      	bne.n	800030a <HAL_ADC_Init+0x56>
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	0412      	lsls	r2, r2, #16
 8000308:	d567      	bpl.n	80003da <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	493a      	ldr	r1, [pc, #232]	; (80003f8 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800030e:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000310:	400a      	ands	r2, r1
 8000312:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000314:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000316:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000318:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800031a:	69e2      	ldr	r2, [r4, #28]
 800031c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800031e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000320:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000322:	3a01      	subs	r2, #1
 8000324:	1e56      	subs	r6, r2, #1
 8000326:	41b2      	sbcs	r2, r6
 8000328:	0316      	lsls	r6, r2, #12
 800032a:	68e2      	ldr	r2, [r4, #12]
 800032c:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800032e:	6922      	ldr	r2, [r4, #16]
 8000330:	430f      	orrs	r7, r1
 8000332:	2a02      	cmp	r2, #2
 8000334:	d100      	bne.n	8000338 <HAL_ADC_Init+0x84>
 8000336:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000338:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800033a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800033c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800033e:	433a      	orrs	r2, r7
 8000340:	4332      	orrs	r2, r6
 8000342:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000344:	2901      	cmp	r1, #1
 8000346:	d104      	bne.n	8000352 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000348:	2d00      	cmp	r5, #0
 800034a:	d12c      	bne.n	80003a6 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0249      	lsls	r1, r1, #9
 8000350:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000352:	20c2      	movs	r0, #194	; 0xc2
 8000354:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000356:	30ff      	adds	r0, #255	; 0xff
 8000358:	4281      	cmp	r1, r0
 800035a:	d002      	beq.n	8000362 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800035c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800035e:	4301      	orrs	r1, r0
 8000360:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000362:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000364:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000366:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000368:	4311      	orrs	r1, r2
 800036a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800036c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800036e:	4281      	cmp	r1, r0
 8000370:	d002      	beq.n	8000378 <HAL_ADC_Init+0xc4>
 8000372:	1e48      	subs	r0, r1, #1
 8000374:	2806      	cmp	r0, #6
 8000376:	d807      	bhi.n	8000388 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000378:	2507      	movs	r5, #7
 800037a:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800037c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800037e:	43a8      	bics	r0, r5
 8000380:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000382:	6958      	ldr	r0, [r3, #20]
 8000384:	4301      	orrs	r1, r0
 8000386:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	491c      	ldr	r1, [pc, #112]	; (80003fc <HAL_ADC_Init+0x148>)
 800038c:	400b      	ands	r3, r1
 800038e:	429a      	cmp	r2, r3
 8000390:	d111      	bne.n	80003b6 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000392:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000394:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000396:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000398:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800039a:	4393      	bics	r3, r2
 800039c:	001a      	movs	r2, r3
 800039e:	2301      	movs	r3, #1
 80003a0:	4313      	orrs	r3, r2
 80003a2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80003a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003a6:	2020      	movs	r0, #32
 80003a8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80003aa:	4328      	orrs	r0, r5
 80003ac:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80003b0:	4301      	orrs	r1, r0
 80003b2:	64a1      	str	r1, [r4, #72]	; 0x48
 80003b4:	e7cd      	b.n	8000352 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80003b6:	2212      	movs	r2, #18
 80003b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ba:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80003bc:	4393      	bics	r3, r2
 80003be:	001a      	movs	r2, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	4313      	orrs	r3, r2
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003c8:	4303      	orrs	r3, r0
 80003ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80003cc:	e7ea      	b.n	80003a4 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ce:	2310      	movs	r3, #16
 80003d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80003d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003d4:	4313      	orrs	r3, r2
 80003d6:	6463      	str	r3, [r4, #68]	; 0x44
 80003d8:	e7e4      	b.n	80003a4 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80003da:	2118      	movs	r1, #24
 80003dc:	68da      	ldr	r2, [r3, #12]
 80003de:	438a      	bics	r2, r1
 80003e0:	68a1      	ldr	r1, [r4, #8]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003e6:	6919      	ldr	r1, [r3, #16]
 80003e8:	6862      	ldr	r2, [r4, #4]
 80003ea:	0089      	lsls	r1, r1, #2
 80003ec:	0889      	lsrs	r1, r1, #2
 80003ee:	4311      	orrs	r1, r2
 80003f0:	6119      	str	r1, [r3, #16]
 80003f2:	e78a      	b.n	800030a <HAL_ADC_Init+0x56>
 80003f4:	fffffefd 	.word	0xfffffefd
 80003f8:	fffe0219 	.word	0xfffe0219
 80003fc:	833fffe7 	.word	0x833fffe7

08000400 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000402:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000404:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000406:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000408:	3440      	adds	r4, #64	; 0x40
 800040a:	7823      	ldrb	r3, [r4, #0]
{
 800040c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800040e:	2002      	movs	r0, #2
 8000410:	2b01      	cmp	r3, #1
 8000412:	d02b      	beq.n	800046c <HAL_ADC_ConfigChannel+0x6c>
 8000414:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000416:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000418:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800041a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 800041c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800041e:	0740      	lsls	r0, r0, #29
 8000420:	d45a      	bmi.n	80004d8 <HAL_ADC_ConfigChannel+0xd8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000422:	4830      	ldr	r0, [pc, #192]	; (80004e4 <HAL_ADC_ConfigChannel+0xe4>)
 8000424:	684f      	ldr	r7, [r1, #4]
 8000426:	680d      	ldr	r5, [r1, #0]
 8000428:	4287      	cmp	r7, r0
 800042a:	d03f      	beq.n	80004ac <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800042c:	40ab      	lsls	r3, r5
 800042e:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000430:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000432:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000434:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000436:	4338      	orrs	r0, r7
 8000438:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800043a:	429e      	cmp	r6, r3
 800043c:	d00f      	beq.n	800045e <HAL_ADC_ConfigChannel+0x5e>
 800043e:	3e01      	subs	r6, #1
 8000440:	2e06      	cmp	r6, #6
 8000442:	d90c      	bls.n	800045e <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000444:	688b      	ldr	r3, [r1, #8]
 8000446:	2107      	movs	r1, #7
 8000448:	6950      	ldr	r0, [r2, #20]
 800044a:	4008      	ands	r0, r1
 800044c:	4283      	cmp	r3, r0
 800044e:	d006      	beq.n	800045e <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000450:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000452:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000454:	4388      	bics	r0, r1
 8000456:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000458:	6950      	ldr	r0, [r2, #20]
 800045a:	4303      	orrs	r3, r0
 800045c:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800045e:	002b      	movs	r3, r5
 8000460:	3b10      	subs	r3, #16
 8000462:	2b02      	cmp	r3, #2
 8000464:	d903      	bls.n	800046e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000466:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000468:	2300      	movs	r3, #0
 800046a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800046c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800046e:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <HAL_ADC_ConfigChannel+0xe8>)
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	6811      	ldr	r1, [r2, #0]
 8000474:	2d10      	cmp	r5, #16
 8000476:	d015      	beq.n	80004a4 <HAL_ADC_ConfigChannel+0xa4>
 8000478:	2d11      	cmp	r5, #17
 800047a:	d015      	beq.n	80004a8 <HAL_ADC_ConfigChannel+0xa8>
 800047c:	045b      	lsls	r3, r3, #17
 800047e:	430b      	orrs	r3, r1
 8000480:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000482:	2d10      	cmp	r5, #16
 8000484:	d1ef      	bne.n	8000466 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <HAL_ADC_ConfigChannel+0xec>)
 8000488:	4919      	ldr	r1, [pc, #100]	; (80004f0 <HAL_ADC_ConfigChannel+0xf0>)
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	f7ff fe46 	bl	800011c <__udivsi3>
 8000490:	230a      	movs	r3, #10
 8000492:	4358      	muls	r0, r3
 8000494:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000496:	9b01      	ldr	r3, [sp, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0e4      	beq.n	8000466 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	3b01      	subs	r3, #1
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	e7f8      	b.n	8000496 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80004a4:	041b      	lsls	r3, r3, #16
 80004a6:	e7ea      	b.n	800047e <HAL_ADC_ConfigChannel+0x7e>
 80004a8:	03db      	lsls	r3, r3, #15
 80004aa:	e7e8      	b.n	800047e <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80004ac:	40ab      	lsls	r3, r5
 80004ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80004b0:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80004b2:	002b      	movs	r3, r5
 80004b4:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80004b6:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d8d4      	bhi.n	8000466 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_ADC_ConfigChannel+0xe8>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2d10      	cmp	r5, #16
 80004c2:	d005      	beq.n	80004d0 <HAL_ADC_ConfigChannel+0xd0>
 80004c4:	2d11      	cmp	r5, #17
 80004c6:	d005      	beq.n	80004d4 <HAL_ADC_ConfigChannel+0xd4>
 80004c8:	490a      	ldr	r1, [pc, #40]	; (80004f4 <HAL_ADC_ConfigChannel+0xf4>)
 80004ca:	400a      	ands	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	e7ca      	b.n	8000466 <HAL_ADC_ConfigChannel+0x66>
 80004d0:	4909      	ldr	r1, [pc, #36]	; (80004f8 <HAL_ADC_ConfigChannel+0xf8>)
 80004d2:	e7fa      	b.n	80004ca <HAL_ADC_ConfigChannel+0xca>
 80004d4:	4909      	ldr	r1, [pc, #36]	; (80004fc <HAL_ADC_ConfigChannel+0xfc>)
 80004d6:	e7f8      	b.n	80004ca <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004d8:	2220      	movs	r2, #32
 80004da:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80004dc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004de:	430a      	orrs	r2, r1
 80004e0:	646a      	str	r2, [r5, #68]	; 0x44
 80004e2:	e7c1      	b.n	8000468 <HAL_ADC_ConfigChannel+0x68>
 80004e4:	00001001 	.word	0x00001001
 80004e8:	40012708 	.word	0x40012708
 80004ec:	20000000 	.word	0x20000000
 80004f0:	000f4240 	.word	0x000f4240
 80004f4:	feffffff 	.word	0xfeffffff
 80004f8:	ff7fffff 	.word	0xff7fffff
 80004fc:	ffbfffff 	.word	0xffbfffff

08000500 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000504:	2800      	cmp	r0, #0
 8000506:	da14      	bge.n	8000532 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	230f      	movs	r3, #15
 800050a:	b2c0      	uxtb	r0, r0
 800050c:	4003      	ands	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_NVIC_SetPriority+0x58>)
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	189b      	adds	r3, r3, r2
 8000518:	2203      	movs	r2, #3
 800051a:	4010      	ands	r0, r2
 800051c:	4090      	lsls	r0, r2
 800051e:	32fc      	adds	r2, #252	; 0xfc
 8000520:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000522:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000524:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000526:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000528:	69dc      	ldr	r4, [r3, #28]
 800052a:	43ac      	bics	r4, r5
 800052c:	4321      	orrs	r1, r4
 800052e:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000530:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	2503      	movs	r5, #3
 8000534:	0883      	lsrs	r3, r0, #2
 8000536:	4028      	ands	r0, r5
 8000538:	40a8      	lsls	r0, r5
 800053a:	35fc      	adds	r5, #252	; 0xfc
 800053c:	002e      	movs	r6, r5
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_NVIC_SetPriority+0x5c>)
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	189b      	adds	r3, r3, r2
 8000544:	22c0      	movs	r2, #192	; 0xc0
 8000546:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000548:	4029      	ands	r1, r5
 800054a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	589c      	ldr	r4, [r3, r2]
 8000550:	43b4      	bics	r4, r6
 8000552:	4321      	orrs	r1, r4
 8000554:	5099      	str	r1, [r3, r2]
 8000556:	e7eb      	b.n	8000530 <HAL_NVIC_SetPriority+0x30>
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	e000e100 	.word	0xe000e100

08000560 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <HAL_SYSTICK_Config+0x28>)
 8000562:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000564:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000566:	4293      	cmp	r3, r2
 8000568:	d80d      	bhi.n	8000586 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000570:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000572:	6a03      	ldr	r3, [r0, #32]
 8000574:	0609      	lsls	r1, r1, #24
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	430b      	orrs	r3, r1
 800057c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800057e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000580:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000582:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000584:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000586:	4770      	bx	lr
 8000588:	00ffffff 	.word	0x00ffffff
 800058c:	e000e010 	.word	0xe000e010
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000596:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000598:	2804      	cmp	r0, #4
 800059a:	d102      	bne.n	80005a2 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800059c:	4310      	orrs	r0, r2
 800059e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80005a0:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005a2:	2104      	movs	r1, #4
 80005a4:	438a      	bics	r2, r1
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	e7fa      	b.n	80005a0 <HAL_SYSTICK_CLKSourceConfig+0xc>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	e000e010 	.word	0xe000e010

080005b0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80005b0:	4770      	bx	lr

080005b2 <HAL_SYSTICK_IRQHandler>:
{
 80005b2:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80005b4:	f7ff fffc 	bl	80005b0 <HAL_SYSTICK_Callback>
}
 80005b8:	bd10      	pop	{r4, pc}

080005ba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80005ba:	b510      	push	{r4, lr}
 80005bc:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80005be:	d101      	bne.n	80005c4 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80005c2:	bd10      	pop	{r4, pc}
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80005c4:	7f43      	ldrb	r3, [r0, #29]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80005cc:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80005ce:	f001 f809 	bl	80015e4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80005d2:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80005d4:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80005d6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80005d8:	f000 f819 	bl	800060e <HAL_CRCEx_Init>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d1ef      	bne.n	80005c0 <HAL_CRC_Init+0x6>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80005e0:	7962      	ldrb	r2, [r4, #5]
 80005e2:	6823      	ldr	r3, [r4, #0]
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	d110      	bne.n	800060a <HAL_CRC_Init+0x50>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80005e8:	3a01      	subs	r2, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005ea:	2160      	movs	r1, #96	; 0x60
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80005ec:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	438a      	bics	r2, r1
 80005f2:	6961      	ldr	r1, [r4, #20]
 80005f4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80005f6:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80005f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	438a      	bics	r2, r1
 80005fe:	69a1      	ldr	r1, [r4, #24]
 8000600:	430a      	orrs	r2, r1
 8000602:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000604:	2301      	movs	r3, #1
 8000606:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8000608:	e7db      	b.n	80005c2 <HAL_CRC_Init+0x8>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800060a:	6922      	ldr	r2, [r4, #16]
 800060c:	e7ed      	b.n	80005ea <HAL_CRC_Init+0x30>

0800060e <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 800060e:	2000      	movs	r0, #0
 8000610:	4770      	bx	lr
	...

08000614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000616:	680b      	ldr	r3, [r1, #0]
{ 
 8000618:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800061a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 800061c:	2300      	movs	r3, #0
{ 
 800061e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000620:	9a02      	ldr	r2, [sp, #8]
 8000622:	40da      	lsrs	r2, r3
 8000624:	d101      	bne.n	800062a <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000626:	b007      	add	sp, #28
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800062a:	2201      	movs	r2, #1
 800062c:	409a      	lsls	r2, r3
 800062e:	9203      	str	r2, [sp, #12]
 8000630:	9903      	ldr	r1, [sp, #12]
 8000632:	9a02      	ldr	r2, [sp, #8]
 8000634:	400a      	ands	r2, r1
 8000636:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000638:	d100      	bne.n	800063c <HAL_GPIO_Init+0x28>
 800063a:	e08c      	b.n	8000756 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800063c:	9a01      	ldr	r2, [sp, #4]
 800063e:	2110      	movs	r1, #16
 8000640:	6852      	ldr	r2, [r2, #4]
 8000642:	0016      	movs	r6, r2
 8000644:	438e      	bics	r6, r1
 8000646:	2e02      	cmp	r6, #2
 8000648:	d10e      	bne.n	8000668 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800064a:	2507      	movs	r5, #7
 800064c:	401d      	ands	r5, r3
 800064e:	00ad      	lsls	r5, r5, #2
 8000650:	3901      	subs	r1, #1
 8000652:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000654:	08dc      	lsrs	r4, r3, #3
 8000656:	00a4      	lsls	r4, r4, #2
 8000658:	1904      	adds	r4, r0, r4
 800065a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800065c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800065e:	9901      	ldr	r1, [sp, #4]
 8000660:	6909      	ldr	r1, [r1, #16]
 8000662:	40a9      	lsls	r1, r5
 8000664:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000666:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000668:	2403      	movs	r4, #3
 800066a:	005f      	lsls	r7, r3, #1
 800066c:	40bc      	lsls	r4, r7
 800066e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000670:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000672:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000674:	4025      	ands	r5, r4
 8000676:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000678:	2503      	movs	r5, #3
 800067a:	4015      	ands	r5, r2
 800067c:	40bd      	lsls	r5, r7
 800067e:	4661      	mov	r1, ip
 8000680:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000682:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000684:	2e01      	cmp	r6, #1
 8000686:	d80f      	bhi.n	80006a8 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000688:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800068a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800068c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000690:	40bd      	lsls	r5, r7
 8000692:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000694:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000696:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000698:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800069a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800069c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800069e:	2101      	movs	r1, #1
 80006a0:	400d      	ands	r5, r1
 80006a2:	409d      	lsls	r5, r3
 80006a4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80006a6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80006a8:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006aa:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ac:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006ae:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006b0:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006b2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006b4:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006b6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80006b8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006ba:	420a      	tst	r2, r1
 80006bc:	d04b      	beq.n	8000756 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	2101      	movs	r1, #1
 80006c0:	4c26      	ldr	r4, [pc, #152]	; (800075c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006c2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006c6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c8:	430d      	orrs	r5, r1
 80006ca:	61a5      	str	r5, [r4, #24]
 80006cc:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80006ce:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d0:	400c      	ands	r4, r1
 80006d2:	9405      	str	r4, [sp, #20]
 80006d4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006d6:	240f      	movs	r4, #15
 80006d8:	4921      	ldr	r1, [pc, #132]	; (8000760 <HAL_GPIO_Init+0x14c>)
 80006da:	00ad      	lsls	r5, r5, #2
 80006dc:	00b6      	lsls	r6, r6, #2
 80006de:	186d      	adds	r5, r5, r1
 80006e0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80006e4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006e8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ea:	2400      	movs	r4, #0
 80006ec:	4288      	cmp	r0, r1
 80006ee:	d00c      	beq.n	800070a <HAL_GPIO_Init+0xf6>
 80006f0:	491c      	ldr	r1, [pc, #112]	; (8000764 <HAL_GPIO_Init+0x150>)
 80006f2:	3401      	adds	r4, #1
 80006f4:	4288      	cmp	r0, r1
 80006f6:	d008      	beq.n	800070a <HAL_GPIO_Init+0xf6>
 80006f8:	491b      	ldr	r1, [pc, #108]	; (8000768 <HAL_GPIO_Init+0x154>)
 80006fa:	3401      	adds	r4, #1
 80006fc:	4288      	cmp	r0, r1
 80006fe:	d004      	beq.n	800070a <HAL_GPIO_Init+0xf6>
 8000700:	491a      	ldr	r1, [pc, #104]	; (800076c <HAL_GPIO_Init+0x158>)
 8000702:	3403      	adds	r4, #3
 8000704:	4288      	cmp	r0, r1
 8000706:	d100      	bne.n	800070a <HAL_GPIO_Init+0xf6>
 8000708:	3c02      	subs	r4, #2
 800070a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800070c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000710:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000712:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000714:	4c16      	ldr	r4, [pc, #88]	; (8000770 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000716:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000718:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800071a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800071c:	03d1      	lsls	r1, r2, #15
 800071e:	d401      	bmi.n	8000724 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000720:	003e      	movs	r6, r7
 8000722:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000724:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000726:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000728:	9e00      	ldr	r6, [sp, #0]
 800072a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800072c:	0391      	lsls	r1, r2, #14
 800072e:	d401      	bmi.n	8000734 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000730:	003e      	movs	r6, r7
 8000732:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000734:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000736:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000738:	9e00      	ldr	r6, [sp, #0]
 800073a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800073c:	02d1      	lsls	r1, r2, #11
 800073e:	d401      	bmi.n	8000744 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000740:	003e      	movs	r6, r7
 8000742:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000744:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000746:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000748:	9f00      	ldr	r7, [sp, #0]
 800074a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074c:	0292      	lsls	r2, r2, #10
 800074e:	d401      	bmi.n	8000754 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000750:	402e      	ands	r6, r5
 8000752:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000754:	60e7      	str	r7, [r4, #12]
    position++;
 8000756:	3301      	adds	r3, #1
 8000758:	e762      	b.n	8000620 <HAL_GPIO_Init+0xc>
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000
 8000764:	48000400 	.word	0x48000400
 8000768:	48000800 	.word	0x48000800
 800076c:	48000c00 	.word	0x48000c00
 8000770:	40010400 	.word	0x40010400

08000774 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000774:	2a00      	cmp	r2, #0
 8000776:	d001      	beq.n	800077c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000778:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800077a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800077c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800077e:	e7fc      	b.n	800077a <HAL_GPIO_WritePin+0x6>

08000780 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000780:	6943      	ldr	r3, [r0, #20]
 8000782:	4059      	eors	r1, r3
 8000784:	6141      	str	r1, [r0, #20]
}
 8000786:	4770      	bx	lr

08000788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078a:	6803      	ldr	r3, [r0, #0]
{
 800078c:	b085      	sub	sp, #20
 800078e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000790:	07db      	lsls	r3, r3, #31
 8000792:	d42f      	bmi.n	80007f4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	079b      	lsls	r3, r3, #30
 8000798:	d500      	bpl.n	800079c <HAL_RCC_OscConfig+0x14>
 800079a:	e081      	b.n	80008a0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	071b      	lsls	r3, r3, #28
 80007a0:	d500      	bpl.n	80007a4 <HAL_RCC_OscConfig+0x1c>
 80007a2:	e0bc      	b.n	800091e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	075b      	lsls	r3, r3, #29
 80007a8:	d500      	bpl.n	80007ac <HAL_RCC_OscConfig+0x24>
 80007aa:	e0df      	b.n	800096c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80007ac:	682b      	ldr	r3, [r5, #0]
 80007ae:	06db      	lsls	r3, r3, #27
 80007b0:	d51a      	bpl.n	80007e8 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80007b2:	696a      	ldr	r2, [r5, #20]
 80007b4:	4cb5      	ldr	r4, [pc, #724]	; (8000a8c <HAL_RCC_OscConfig+0x304>)
 80007b6:	2304      	movs	r3, #4
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d000      	beq.n	80007be <HAL_RCC_OscConfig+0x36>
 80007bc:	e14b      	b.n	8000a56 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80007be:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007c0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80007c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007c8:	431a      	orrs	r2, r3
 80007ca:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007cc:	f7ff fd5c 	bl	8000288 <HAL_GetTick>
 80007d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80007d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007d4:	4233      	tst	r3, r6
 80007d6:	d100      	bne.n	80007da <HAL_RCC_OscConfig+0x52>
 80007d8:	e136      	b.n	8000a48 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80007da:	21f8      	movs	r1, #248	; 0xf8
 80007dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007de:	69ab      	ldr	r3, [r5, #24]
 80007e0:	438a      	bics	r2, r1
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e8:	6a29      	ldr	r1, [r5, #32]
 80007ea:	2900      	cmp	r1, #0
 80007ec:	d000      	beq.n	80007f0 <HAL_RCC_OscConfig+0x68>
 80007ee:	e159      	b.n	8000aa4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80007f0:	2000      	movs	r0, #0
 80007f2:	e013      	b.n	800081c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007f4:	210c      	movs	r1, #12
 80007f6:	4ca5      	ldr	r4, [pc, #660]	; (8000a8c <HAL_RCC_OscConfig+0x304>)
 80007f8:	6862      	ldr	r2, [r4, #4]
 80007fa:	400a      	ands	r2, r1
 80007fc:	2a04      	cmp	r2, #4
 80007fe:	d006      	beq.n	800080e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000800:	6863      	ldr	r3, [r4, #4]
 8000802:	400b      	ands	r3, r1
 8000804:	2b08      	cmp	r3, #8
 8000806:	d10b      	bne.n	8000820 <HAL_RCC_OscConfig+0x98>
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	03db      	lsls	r3, r3, #15
 800080c:	d508      	bpl.n	8000820 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	039b      	lsls	r3, r3, #14
 8000812:	d5bf      	bpl.n	8000794 <HAL_RCC_OscConfig+0xc>
 8000814:	686b      	ldr	r3, [r5, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1bc      	bne.n	8000794 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
}
 800081c:	b005      	add	sp, #20
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000820:	686b      	ldr	r3, [r5, #4]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d113      	bne.n	800084e <HAL_RCC_OscConfig+0xc6>
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	6822      	ldr	r2, [r4, #0]
 800082a:	025b      	lsls	r3, r3, #9
 800082c:	4313      	orrs	r3, r2
 800082e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000830:	f7ff fd2a 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000834:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000836:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000838:	02b6      	lsls	r6, r6, #10
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	4233      	tst	r3, r6
 800083e:	d1a9      	bne.n	8000794 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000840:	f7ff fd22 	bl	8000288 <HAL_GetTick>
 8000844:	1bc0      	subs	r0, r0, r7
 8000846:	2864      	cmp	r0, #100	; 0x64
 8000848:	d9f7      	bls.n	800083a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800084a:	2003      	movs	r0, #3
 800084c:	e7e6      	b.n	800081c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084e:	2b00      	cmp	r3, #0
 8000850:	d116      	bne.n	8000880 <HAL_RCC_OscConfig+0xf8>
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	4a8e      	ldr	r2, [pc, #568]	; (8000a90 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000856:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000858:	4013      	ands	r3, r2
 800085a:	6023      	str	r3, [r4, #0]
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	4a8d      	ldr	r2, [pc, #564]	; (8000a94 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000860:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000862:	4013      	ands	r3, r2
 8000864:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000866:	f7ff fd0f 	bl	8000288 <HAL_GetTick>
 800086a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	4233      	tst	r3, r6
 8000870:	d100      	bne.n	8000874 <HAL_RCC_OscConfig+0xec>
 8000872:	e78f      	b.n	8000794 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000874:	f7ff fd08 	bl	8000288 <HAL_GetTick>
 8000878:	1bc0      	subs	r0, r0, r7
 800087a:	2864      	cmp	r0, #100	; 0x64
 800087c:	d9f6      	bls.n	800086c <HAL_RCC_OscConfig+0xe4>
 800087e:	e7e4      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000880:	2b05      	cmp	r3, #5
 8000882:	d105      	bne.n	8000890 <HAL_RCC_OscConfig+0x108>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	02db      	lsls	r3, r3, #11
 800088a:	4313      	orrs	r3, r2
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	e7ca      	b.n	8000826 <HAL_RCC_OscConfig+0x9e>
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	4a7f      	ldr	r2, [pc, #508]	; (8000a90 <HAL_RCC_OscConfig+0x308>)
 8000894:	4013      	ands	r3, r2
 8000896:	6023      	str	r3, [r4, #0]
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	4a7e      	ldr	r2, [pc, #504]	; (8000a94 <HAL_RCC_OscConfig+0x30c>)
 800089c:	4013      	ands	r3, r2
 800089e:	e7c6      	b.n	800082e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008a0:	220c      	movs	r2, #12
 80008a2:	4c7a      	ldr	r4, [pc, #488]	; (8000a8c <HAL_RCC_OscConfig+0x304>)
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	4213      	tst	r3, r2
 80008a8:	d006      	beq.n	80008b8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b08      	cmp	r3, #8
 80008b0:	d110      	bne.n	80008d4 <HAL_RCC_OscConfig+0x14c>
 80008b2:	6863      	ldr	r3, [r4, #4]
 80008b4:	03db      	lsls	r3, r3, #15
 80008b6:	d40d      	bmi.n	80008d4 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	079b      	lsls	r3, r3, #30
 80008bc:	d502      	bpl.n	80008c4 <HAL_RCC_OscConfig+0x13c>
 80008be:	68eb      	ldr	r3, [r5, #12]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d1aa      	bne.n	800081a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c4:	21f8      	movs	r1, #248	; 0xf8
 80008c6:	6822      	ldr	r2, [r4, #0]
 80008c8:	692b      	ldr	r3, [r5, #16]
 80008ca:	438a      	bics	r2, r1
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	e763      	b.n	800079c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d4:	68ea      	ldr	r2, [r5, #12]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d00f      	beq.n	80008fc <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80008dc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80008e0:	4313      	orrs	r3, r2
 80008e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008e4:	f7ff fcd0 	bl	8000288 <HAL_GetTick>
 80008e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	4233      	tst	r3, r6
 80008ee:	d1e9      	bne.n	80008c4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f0:	f7ff fcca 	bl	8000288 <HAL_GetTick>
 80008f4:	1bc0      	subs	r0, r0, r7
 80008f6:	2802      	cmp	r0, #2
 80008f8:	d9f7      	bls.n	80008ea <HAL_RCC_OscConfig+0x162>
 80008fa:	e7a6      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80008fc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fe:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000900:	439a      	bics	r2, r3
 8000902:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000904:	f7ff fcc0 	bl	8000288 <HAL_GetTick>
 8000908:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	4233      	tst	r3, r6
 800090e:	d100      	bne.n	8000912 <HAL_RCC_OscConfig+0x18a>
 8000910:	e744      	b.n	800079c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000912:	f7ff fcb9 	bl	8000288 <HAL_GetTick>
 8000916:	1bc0      	subs	r0, r0, r7
 8000918:	2802      	cmp	r0, #2
 800091a:	d9f6      	bls.n	800090a <HAL_RCC_OscConfig+0x182>
 800091c:	e795      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091e:	69ea      	ldr	r2, [r5, #28]
 8000920:	2301      	movs	r3, #1
 8000922:	4c5a      	ldr	r4, [pc, #360]	; (8000a8c <HAL_RCC_OscConfig+0x304>)
 8000924:	2a00      	cmp	r2, #0
 8000926:	d010      	beq.n	800094a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000928:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800092a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800092c:	4313      	orrs	r3, r2
 800092e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000930:	f7ff fcaa 	bl	8000288 <HAL_GetTick>
 8000934:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000938:	4233      	tst	r3, r6
 800093a:	d000      	beq.n	800093e <HAL_RCC_OscConfig+0x1b6>
 800093c:	e732      	b.n	80007a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800093e:	f7ff fca3 	bl	8000288 <HAL_GetTick>
 8000942:	1bc0      	subs	r0, r0, r7
 8000944:	2802      	cmp	r0, #2
 8000946:	d9f6      	bls.n	8000936 <HAL_RCC_OscConfig+0x1ae>
 8000948:	e77f      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800094a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800094c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800094e:	439a      	bics	r2, r3
 8000950:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000952:	f7ff fc99 	bl	8000288 <HAL_GetTick>
 8000956:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800095a:	4233      	tst	r3, r6
 800095c:	d100      	bne.n	8000960 <HAL_RCC_OscConfig+0x1d8>
 800095e:	e721      	b.n	80007a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000960:	f7ff fc92 	bl	8000288 <HAL_GetTick>
 8000964:	1bc0      	subs	r0, r0, r7
 8000966:	2802      	cmp	r0, #2
 8000968:	d9f6      	bls.n	8000958 <HAL_RCC_OscConfig+0x1d0>
 800096a:	e76e      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800096c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800096e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000970:	4c46      	ldr	r4, [pc, #280]	; (8000a8c <HAL_RCC_OscConfig+0x304>)
 8000972:	0552      	lsls	r2, r2, #21
 8000974:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000976:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000978:	4213      	tst	r3, r2
 800097a:	d108      	bne.n	800098e <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	69e3      	ldr	r3, [r4, #28]
 800097e:	4313      	orrs	r3, r2
 8000980:	61e3      	str	r3, [r4, #28]
 8000982:	69e3      	ldr	r3, [r4, #28]
 8000984:	4013      	ands	r3, r2
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800098a:	2301      	movs	r3, #1
 800098c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098e:	2780      	movs	r7, #128	; 0x80
 8000990:	4e41      	ldr	r6, [pc, #260]	; (8000a98 <HAL_RCC_OscConfig+0x310>)
 8000992:	007f      	lsls	r7, r7, #1
 8000994:	6833      	ldr	r3, [r6, #0]
 8000996:	423b      	tst	r3, r7
 8000998:	d006      	beq.n	80009a8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800099a:	68ab      	ldr	r3, [r5, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d113      	bne.n	80009c8 <HAL_RCC_OscConfig+0x240>
 80009a0:	6a22      	ldr	r2, [r4, #32]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	6223      	str	r3, [r4, #32]
 80009a6:	e030      	b.n	8000a0a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009a8:	6833      	ldr	r3, [r6, #0]
 80009aa:	433b      	orrs	r3, r7
 80009ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009ae:	f7ff fc6b 	bl	8000288 <HAL_GetTick>
 80009b2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009b4:	6833      	ldr	r3, [r6, #0]
 80009b6:	423b      	tst	r3, r7
 80009b8:	d1ef      	bne.n	800099a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ba:	f7ff fc65 	bl	8000288 <HAL_GetTick>
 80009be:	9b01      	ldr	r3, [sp, #4]
 80009c0:	1ac0      	subs	r0, r0, r3
 80009c2:	2864      	cmp	r0, #100	; 0x64
 80009c4:	d9f6      	bls.n	80009b4 <HAL_RCC_OscConfig+0x22c>
 80009c6:	e740      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
 80009c8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d114      	bne.n	80009f8 <HAL_RCC_OscConfig+0x270>
 80009ce:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009d0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d2:	4393      	bics	r3, r2
 80009d4:	6223      	str	r3, [r4, #32]
 80009d6:	6a23      	ldr	r3, [r4, #32]
 80009d8:	3203      	adds	r2, #3
 80009da:	4393      	bics	r3, r2
 80009dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009de:	f7ff fc53 	bl	8000288 <HAL_GetTick>
 80009e2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009e4:	6a23      	ldr	r3, [r4, #32]
 80009e6:	423b      	tst	r3, r7
 80009e8:	d025      	beq.n	8000a36 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ea:	f7ff fc4d 	bl	8000288 <HAL_GetTick>
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_RCC_OscConfig+0x314>)
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x25c>
 80009f6:	e728      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f8:	2b05      	cmp	r3, #5
 80009fa:	d10b      	bne.n	8000a14 <HAL_RCC_OscConfig+0x28c>
 80009fc:	6a21      	ldr	r1, [r4, #32]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6223      	str	r3, [r4, #32]
 8000a04:	6a23      	ldr	r3, [r4, #32]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000a0a:	f7ff fc3d 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a0e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000a10:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a12:	e00d      	b.n	8000a30 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a14:	6a23      	ldr	r3, [r4, #32]
 8000a16:	4393      	bics	r3, r2
 8000a18:	2204      	movs	r2, #4
 8000a1a:	6223      	str	r3, [r4, #32]
 8000a1c:	6a23      	ldr	r3, [r4, #32]
 8000a1e:	4393      	bics	r3, r2
 8000a20:	e7c0      	b.n	80009a4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a22:	f7ff fc31 	bl	8000288 <HAL_GetTick>
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_RCC_OscConfig+0x314>)
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	4298      	cmp	r0, r3
 8000a2c:	d900      	bls.n	8000a30 <HAL_RCC_OscConfig+0x2a8>
 8000a2e:	e70c      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	6a23      	ldr	r3, [r4, #32]
 8000a32:	423b      	tst	r3, r7
 8000a34:	d0f5      	beq.n	8000a22 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000a36:	9b00      	ldr	r3, [sp, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d000      	beq.n	8000a3e <HAL_RCC_OscConfig+0x2b6>
 8000a3c:	e6b6      	b.n	80007ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a3e:	69e3      	ldr	r3, [r4, #28]
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_RCC_OscConfig+0x318>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	61e3      	str	r3, [r4, #28]
 8000a46:	e6b1      	b.n	80007ac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a48:	f7ff fc1e 	bl	8000288 <HAL_GetTick>
 8000a4c:	1bc0      	subs	r0, r0, r7
 8000a4e:	2802      	cmp	r0, #2
 8000a50:	d800      	bhi.n	8000a54 <HAL_RCC_OscConfig+0x2cc>
 8000a52:	e6be      	b.n	80007d2 <HAL_RCC_OscConfig+0x4a>
 8000a54:	e6f9      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000a56:	3205      	adds	r2, #5
 8000a58:	d103      	bne.n	8000a62 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000a5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a5c:	439a      	bics	r2, r3
 8000a5e:	6362      	str	r2, [r4, #52]	; 0x34
 8000a60:	e6bb      	b.n	80007da <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a62:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a64:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a66:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000a68:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a6a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a6e:	4393      	bics	r3, r2
 8000a70:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a72:	f7ff fc09 	bl	8000288 <HAL_GetTick>
 8000a76:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a7a:	4233      	tst	r3, r6
 8000a7c:	d100      	bne.n	8000a80 <HAL_RCC_OscConfig+0x2f8>
 8000a7e:	e6b3      	b.n	80007e8 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a80:	f7ff fc02 	bl	8000288 <HAL_GetTick>
 8000a84:	1bc0      	subs	r0, r0, r7
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9f6      	bls.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
 8000a8a:	e6de      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	fffeffff 	.word	0xfffeffff
 8000a94:	fffbffff 	.word	0xfffbffff
 8000a98:	40007000 	.word	0x40007000
 8000a9c:	00001388 	.word	0x00001388
 8000aa0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	4c26      	ldr	r4, [pc, #152]	; (8000b40 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aaa:	6863      	ldr	r3, [r4, #4]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d100      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x32c>
 8000ab2:	e6b3      	b.n	800081c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_RCC_OscConfig+0x3bc>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000abc:	2902      	cmp	r1, #2
 8000abe:	d12f      	bne.n	8000b20 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fbe2 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ac4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ac6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ac8:	04b6      	lsls	r6, r6, #18
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	4233      	tst	r3, r6
 8000ace:	d121      	bne.n	8000b14 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ad4:	4393      	bics	r3, r2
 8000ad6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000adc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ade:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ae0:	6862      	ldr	r2, [r4, #4]
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	4918      	ldr	r1, [pc, #96]	; (8000b48 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ae6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae8:	400a      	ands	r2, r1
 8000aea:	4313      	orrs	r3, r2
 8000aec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	045b      	lsls	r3, r3, #17
 8000af4:	4313      	orrs	r3, r2
 8000af6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000af8:	f7ff fbc6 	bl	8000288 <HAL_GetTick>
 8000afc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000afe:	04ad      	lsls	r5, r5, #18
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	422b      	tst	r3, r5
 8000b04:	d000      	beq.n	8000b08 <HAL_RCC_OscConfig+0x380>
 8000b06:	e673      	b.n	80007f0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b08:	f7ff fbbe 	bl	8000288 <HAL_GetTick>
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	2802      	cmp	r0, #2
 8000b10:	d9f6      	bls.n	8000b00 <HAL_RCC_OscConfig+0x378>
 8000b12:	e69a      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b14:	f7ff fbb8 	bl	8000288 <HAL_GetTick>
 8000b18:	1bc0      	subs	r0, r0, r7
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9d5      	bls.n	8000aca <HAL_RCC_OscConfig+0x342>
 8000b1e:	e694      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000b20:	f7ff fbb2 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b24:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b28:	04ad      	lsls	r5, r5, #18
 8000b2a:	6823      	ldr	r3, [r4, #0]
 8000b2c:	422b      	tst	r3, r5
 8000b2e:	d100      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3aa>
 8000b30:	e65e      	b.n	80007f0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b32:	f7ff fba9 	bl	8000288 <HAL_GetTick>
 8000b36:	1b80      	subs	r0, r0, r6
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9f6      	bls.n	8000b2a <HAL_RCC_OscConfig+0x3a2>
 8000b3c:	e685      	b.n	800084a <HAL_RCC_OscConfig+0xc2>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000
 8000b44:	feffffff 	.word	0xfeffffff
 8000b48:	ffc2ffff 	.word	0xffc2ffff

08000b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b4c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000b4e:	4c14      	ldr	r4, [pc, #80]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000b50:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000b52:	2210      	movs	r2, #16
 8000b54:	0021      	movs	r1, r4
 8000b56:	4668      	mov	r0, sp
 8000b58:	f000 fe28 	bl	80017ac <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	ad04      	add	r5, sp, #16
 8000b60:	2210      	movs	r2, #16
 8000b62:	3110      	adds	r1, #16
 8000b64:	0028      	movs	r0, r5
 8000b66:	f000 fe21 	bl	80017ac <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b6a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000b6c:	4e0d      	ldr	r6, [pc, #52]	; (8000ba4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b6e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b70:	401a      	ands	r2, r3
 8000b72:	2a08      	cmp	r2, #8
 8000b74:	d111      	bne.n	8000b9a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000b76:	200f      	movs	r0, #15
 8000b78:	466a      	mov	r2, sp
 8000b7a:	0c99      	lsrs	r1, r3, #18
 8000b7c:	4001      	ands	r1, r0
 8000b7e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000b80:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000b82:	4002      	ands	r2, r0
 8000b84:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000b86:	03db      	lsls	r3, r3, #15
 8000b88:	d505      	bpl.n	8000b96 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b8c:	f7ff fac6 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000b90:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b92:	b008      	add	sp, #32
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <HAL_RCC_GetSysClockFreq+0x60>)
 8000b98:	e7fa      	b.n	8000b90 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000b9c:	e7f9      	b.n	8000b92 <HAL_RCC_GetSysClockFreq+0x46>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	080017e8 	.word	0x080017e8
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	007a1200 	.word	0x007a1200
 8000bac:	003d0900 	.word	0x003d0900

08000bb0 <HAL_RCC_ClockConfig>:
{
 8000bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4c43      	ldr	r4, [pc, #268]	; (8000cc4 <HAL_RCC_ClockConfig+0x114>)
{
 8000bb6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb8:	6823      	ldr	r3, [r4, #0]
{
 8000bba:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d31c      	bcc.n	8000bfc <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bc2:	6832      	ldr	r2, [r6, #0]
 8000bc4:	0793      	lsls	r3, r2, #30
 8000bc6:	d423      	bmi.n	8000c10 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc8:	07d3      	lsls	r3, r2, #31
 8000bca:	d429      	bmi.n	8000c20 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bcc:	2301      	movs	r3, #1
 8000bce:	6822      	ldr	r2, [r4, #0]
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	4297      	cmp	r7, r2
 8000bd4:	d367      	bcc.n	8000ca6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd6:	6833      	ldr	r3, [r6, #0]
 8000bd8:	4c3b      	ldr	r4, [pc, #236]	; (8000cc8 <HAL_RCC_ClockConfig+0x118>)
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	d46a      	bmi.n	8000cb4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bde:	f7ff ffb5 	bl	8000b4c <HAL_RCC_GetSysClockFreq>
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <HAL_RCC_ClockConfig+0x11c>)
 8000be6:	061b      	lsls	r3, r3, #24
 8000be8:	0f1b      	lsrs	r3, r3, #28
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	40d8      	lsrs	r0, r3
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_RCC_ClockConfig+0x120>)
 8000bf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fb1e 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	4393      	bics	r3, r2
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	4013      	ands	r3, r2
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d0da      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
}
 8000c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c10:	20f0      	movs	r0, #240	; 0xf0
 8000c12:	492d      	ldr	r1, [pc, #180]	; (8000cc8 <HAL_RCC_ClockConfig+0x118>)
 8000c14:	684b      	ldr	r3, [r1, #4]
 8000c16:	4383      	bics	r3, r0
 8000c18:	68b0      	ldr	r0, [r6, #8]
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	604b      	str	r3, [r1, #4]
 8000c1e:	e7d3      	b.n	8000bc8 <HAL_RCC_ClockConfig+0x18>
 8000c20:	4d29      	ldr	r5, [pc, #164]	; (8000cc8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c22:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c24:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c26:	2a01      	cmp	r2, #1
 8000c28:	d11a      	bne.n	8000c60 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	039b      	lsls	r3, r3, #14
 8000c2c:	d5ee      	bpl.n	8000c0c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2e:	2103      	movs	r1, #3
 8000c30:	686b      	ldr	r3, [r5, #4]
 8000c32:	438b      	bics	r3, r1
 8000c34:	4313      	orrs	r3, r2
 8000c36:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c38:	f7ff fb26 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c3c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c3e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d115      	bne.n	8000c70 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c44:	220c      	movs	r2, #12
 8000c46:	686b      	ldr	r3, [r5, #4]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d0be      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c4e:	f7ff fb1b 	bl	8000288 <HAL_GetTick>
 8000c52:	9b01      	ldr	r3, [sp, #4]
 8000c54:	1ac0      	subs	r0, r0, r3
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_RCC_ClockConfig+0x124>)
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d9f3      	bls.n	8000c44 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	e7d6      	b.n	8000c0e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c60:	2a02      	cmp	r2, #2
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	d4e2      	bmi.n	8000c2e <HAL_RCC_ClockConfig+0x7e>
 8000c68:	e7d0      	b.n	8000c0c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	079b      	lsls	r3, r3, #30
 8000c6c:	d4df      	bmi.n	8000c2e <HAL_RCC_ClockConfig+0x7e>
 8000c6e:	e7cd      	b.n	8000c0c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d012      	beq.n	8000c9a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c74:	220c      	movs	r2, #12
 8000c76:	686b      	ldr	r3, [r5, #4]
 8000c78:	4213      	tst	r3, r2
 8000c7a:	d0a7      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7c:	f7ff fb04 	bl	8000288 <HAL_GetTick>
 8000c80:	9b01      	ldr	r3, [sp, #4]
 8000c82:	1ac0      	subs	r0, r0, r3
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_RCC_ClockConfig+0x124>)
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d9f4      	bls.n	8000c74 <HAL_RCC_ClockConfig+0xc4>
 8000c8a:	e7e7      	b.n	8000c5c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8c:	f7ff fafc 	bl	8000288 <HAL_GetTick>
 8000c90:	9b01      	ldr	r3, [sp, #4]
 8000c92:	1ac0      	subs	r0, r0, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_RCC_ClockConfig+0x124>)
 8000c96:	4298      	cmp	r0, r3
 8000c98:	d8e0      	bhi.n	8000c5c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	686b      	ldr	r3, [r5, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d1f3      	bne.n	8000c8c <HAL_RCC_ClockConfig+0xdc>
 8000ca4:	e792      	b.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	439a      	bics	r2, r3
 8000caa:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cac:	6822      	ldr	r2, [r4, #0]
 8000cae:	421a      	tst	r2, r3
 8000cb0:	d1ac      	bne.n	8000c0c <HAL_RCC_ClockConfig+0x5c>
 8000cb2:	e790      	b.n	8000bd6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_RCC_ClockConfig+0x128>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	68f2      	ldr	r2, [r6, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	6063      	str	r3, [r4, #4]
 8000cc0:	e78d      	b.n	8000bde <HAL_RCC_ClockConfig+0x2e>
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	080018c4 	.word	0x080018c4
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	00001388 	.word	0x00001388
 8000cd8:	fffff8ff 	.word	0xfffff8ff

08000cdc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	055b      	lsls	r3, r3, #21
 8000cf0:	0f5b      	lsrs	r3, r3, #29
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cf6:	6810      	ldr	r0, [r2, #0]
 8000cf8:	40d8      	lsrs	r0, r3
}    
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	080018d4 	.word	0x080018d4
 8000d04:	20000000 	.word	0x20000000

08000d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d0a:	6803      	ldr	r3, [r0, #0]
{
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d10:	03db      	lsls	r3, r3, #15
 8000d12:	d528      	bpl.n	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d14:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000d16:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d18:	4c3b      	ldr	r4, [pc, #236]	; (8000e08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d1a:	0552      	lsls	r2, r2, #21
 8000d1c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d20:	4213      	tst	r3, r2
 8000d22:	d108      	bne.n	8000d36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	69e3      	ldr	r3, [r4, #28]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61e3      	str	r3, [r4, #28]
 8000d2a:	69e3      	ldr	r3, [r4, #28]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	9303      	str	r3, [sp, #12]
 8000d30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	2780      	movs	r7, #128	; 0x80
 8000d38:	4e34      	ldr	r6, [pc, #208]	; (8000e0c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000d3a:	007f      	lsls	r7, r7, #1
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	423b      	tst	r3, r7
 8000d40:	d02f      	beq.n	8000da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d42:	22c0      	movs	r2, #192	; 0xc0
 8000d44:	6a23      	ldr	r3, [r4, #32]
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4013      	ands	r3, r2
 8000d4a:	4e31      	ldr	r6, [pc, #196]	; (8000e10 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d4c:	d13b      	bne.n	8000dc6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d4e:	6a23      	ldr	r3, [r4, #32]
 8000d50:	401e      	ands	r6, r3
 8000d52:	686b      	ldr	r3, [r5, #4]
 8000d54:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d56:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d58:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d103      	bne.n	8000d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d5e:	69e3      	ldr	r3, [r4, #28]
 8000d60:	4a2c      	ldr	r2, [pc, #176]	; (8000e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d66:	682a      	ldr	r2, [r5, #0]
 8000d68:	07d3      	lsls	r3, r2, #31
 8000d6a:	d506      	bpl.n	8000d7a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	4926      	ldr	r1, [pc, #152]	; (8000e08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d72:	4383      	bics	r3, r0
 8000d74:	68a8      	ldr	r0, [r5, #8]
 8000d76:	4303      	orrs	r3, r0
 8000d78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d7a:	0693      	lsls	r3, r2, #26
 8000d7c:	d506      	bpl.n	8000d8c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d7e:	2010      	movs	r0, #16
 8000d80:	4921      	ldr	r1, [pc, #132]	; (8000e08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d84:	4383      	bics	r3, r0
 8000d86:	68e8      	ldr	r0, [r5, #12]
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000d8c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000d8e:	0553      	lsls	r3, r2, #21
 8000d90:	d517      	bpl.n	8000dc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000d96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d98:	438b      	bics	r3, r1
 8000d9a:	6929      	ldr	r1, [r5, #16]
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	e00f      	b.n	8000dc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000da2:	6833      	ldr	r3, [r6, #0]
 8000da4:	433b      	orrs	r3, r7
 8000da6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000da8:	f7ff fa6e 	bl	8000288 <HAL_GetTick>
 8000dac:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	6833      	ldr	r3, [r6, #0]
 8000db0:	423b      	tst	r3, r7
 8000db2:	d1c6      	bne.n	8000d42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db4:	f7ff fa68 	bl	8000288 <HAL_GetTick>
 8000db8:	9b01      	ldr	r3, [sp, #4]
 8000dba:	1ac0      	subs	r0, r0, r3
 8000dbc:	2864      	cmp	r0, #100	; 0x64
 8000dbe:	d9f6      	bls.n	8000dae <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8000dc0:	2003      	movs	r0, #3
}
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc6:	6869      	ldr	r1, [r5, #4]
 8000dc8:	400a      	ands	r2, r1
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d0bf      	beq.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dce:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dd0:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dd2:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dd4:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dd6:	025b      	lsls	r3, r3, #9
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ddc:	6a23      	ldr	r3, [r4, #32]
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000de0:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000de2:	4003      	ands	r3, r0
 8000de4:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000de6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000de8:	07d3      	lsls	r3, r2, #31
 8000dea:	d5b0      	bpl.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000dec:	f7ff fa4c 	bl	8000288 <HAL_GetTick>
 8000df0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df2:	2202      	movs	r2, #2
 8000df4:	6a23      	ldr	r3, [r4, #32]
 8000df6:	4213      	tst	r3, r2
 8000df8:	d1a9      	bne.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfa:	f7ff fa45 	bl	8000288 <HAL_GetTick>
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	4298      	cmp	r0, r3
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8000e06:	e7db      	b.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40007000 	.word	0x40007000
 8000e10:	fffffcff 	.word	0xfffffcff
 8000e14:	efffffff 	.word	0xefffffff
 8000e18:	fffeffff 	.word	0xfffeffff
 8000e1c:	00001388 	.word	0x00001388

08000e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d04b      	beq.n	8000ec2 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e2c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e30:	355d      	adds	r5, #93	; 0x5d
 8000e32:	782b      	ldrb	r3, [r5, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000e3a:	0022      	movs	r2, r4
 8000e3c:	325c      	adds	r2, #92	; 0x5c
 8000e3e:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e40:	0020      	movs	r0, r4
 8000e42:	f000 fbe3 	bl	800160c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000e46:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e48:	2240      	movs	r2, #64	; 0x40
 8000e4a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e4c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000e4e:	680b      	ldr	r3, [r1, #0]
 8000e50:	2000      	movs	r0, #0
 8000e52:	4393      	bics	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
 8000e56:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e58:	68e2      	ldr	r2, [r4, #12]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d931      	bls.n	8000ec4 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000e60:	26f0      	movs	r6, #240	; 0xf0
 8000e62:	0136      	lsls	r6, r6, #4
 8000e64:	42b2      	cmp	r2, r6
 8000e66:	d133      	bne.n	8000ed0 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000e68:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000e6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d103      	bne.n	8000e78 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d92f      	bls.n	8000ed4 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000e74:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000e76:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000e78:	68a7      	ldr	r7, [r4, #8]
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	69a0      	ldr	r0, [r4, #24]
 8000e7e:	433b      	orrs	r3, r7
 8000e80:	6927      	ldr	r7, [r4, #16]
 8000e82:	433b      	orrs	r3, r7
 8000e84:	6967      	ldr	r7, [r4, #20]
 8000e86:	433b      	orrs	r3, r7
 8000e88:	69e7      	ldr	r7, [r4, #28]
 8000e8a:	433b      	orrs	r3, r7
 8000e8c:	6a27      	ldr	r7, [r4, #32]
 8000e8e:	433b      	orrs	r3, r7
 8000e90:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000e92:	433b      	orrs	r3, r7
 8000e94:	2780      	movs	r7, #128	; 0x80
 8000e96:	00bf      	lsls	r7, r7, #2
 8000e98:	4007      	ands	r7, r0
 8000e9a:	433b      	orrs	r3, r7
 8000e9c:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ea0:	0c00      	lsrs	r0, r0, #16
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	4018      	ands	r0, r3
 8000eac:	4310      	orrs	r0, r2
 8000eae:	4306      	orrs	r6, r0
 8000eb0:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eb2:	69cb      	ldr	r3, [r1, #28]
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000eb6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000ebc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ebe:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000ec0:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000ec4:	2680      	movs	r6, #128	; 0x80
 8000ec6:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d0ce      	beq.n	8000e6a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	62a0      	str	r0, [r4, #40]	; 0x28
 8000ece:	e7cc      	b.n	8000e6a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ed0:	0006      	movs	r6, r0
 8000ed2:	e7fb      	b.n	8000ecc <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e7ce      	b.n	8000e76 <HAL_SPI_Init+0x56>
 8000ed8:	fffff7ff 	.word	0xfffff7ff

08000edc <USART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	0004      	movs	r4, r0
 8000ee0:	000e      	movs	r6, r1
 8000ee2:	0017      	movs	r7, r2
 8000ee4:	001d      	movs	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	69d3      	ldr	r3, [r2, #28]
 8000eea:	4033      	ands	r3, r6
 8000eec:	429e      	cmp	r6, r3
 8000eee:	d101      	bne.n	8000ef4 <USART_WaitOnFlagUntilTimeout.constprop.3+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e014      	b.n	8000f1e <USART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8000ef4:	1c6b      	adds	r3, r5, #1
 8000ef6:	d0f7      	beq.n	8000ee8 <USART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d111      	bne.n	8000f20 <USART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	490b      	ldr	r1, [pc, #44]	; (8000f2c <USART_WaitOnFlagUntilTimeout.constprop.3+0x50>)
 8000f00:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(husart);
 8000f02:	2003      	movs	r0, #3
        CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	31a3      	adds	r1, #163	; 0xa3
 8000f0c:	31ff      	adds	r1, #255	; 0xff
 8000f0e:	438a      	bics	r2, r1
 8000f10:	609a      	str	r2, [r3, #8]
        husart->State= HAL_USART_STATE_READY;
 8000f12:	0023      	movs	r3, r4
 8000f14:	3341      	adds	r3, #65	; 0x41
 8000f16:	7019      	strb	r1, [r3, #0]
        __HAL_UNLOCK(husart);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	3440      	adds	r4, #64	; 0x40
 8000f1c:	7023      	strb	r3, [r4, #0]
}
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f20:	f7ff f9b2 	bl	8000288 <HAL_GetTick>
 8000f24:	1bc0      	subs	r0, r0, r7
 8000f26:	4285      	cmp	r5, r0
 8000f28:	d2dd      	bcs.n	8000ee6 <USART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f2a:	e7e7      	b.n	8000efc <USART_WaitOnFlagUntilTimeout.constprop.3+0x20>
 8000f2c:	fffffe5f 	.word	0xfffffe5f

08000f30 <HAL_USART_Init>:
{
 8000f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f32:	1e04      	subs	r4, r0, #0
  if(husart == NULL)
 8000f34:	d102      	bne.n	8000f3c <HAL_USART_Init+0xc>
    return HAL_ERROR;
 8000f36:	2501      	movs	r5, #1
}
 8000f38:	0028      	movs	r0, r5
 8000f3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(husart->State == HAL_USART_STATE_RESET)
 8000f3c:	0007      	movs	r7, r0
 8000f3e:	3741      	adds	r7, #65	; 0x41
 8000f40:	783b      	ldrb	r3, [r7, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <HAL_USART_Init+0x22>
    husart->Lock = HAL_UNLOCKED;
 8000f48:	0002      	movs	r2, r0
 8000f4a:	3240      	adds	r2, #64	; 0x40
 8000f4c:	7013      	strb	r3, [r2, #0]
    HAL_USART_MspInit(husart);
 8000f4e:	f000 fb81 	bl	8001654 <HAL_USART_MspInit>
  husart->State = HAL_USART_STATE_BUSY;
 8000f52:	2302      	movs	r3, #2
  __HAL_USART_DISABLE(husart);
 8000f54:	2501      	movs	r5, #1
 8000f56:	6822      	ldr	r2, [r4, #0]
  husart->State = HAL_USART_STATE_BUSY;
 8000f58:	703b      	strb	r3, [r7, #0]
  __HAL_USART_DISABLE(husart);
 8000f5a:	6813      	ldr	r3, [r2, #0]
   *  the USART Word Length, Parity and Mode:
   *  set the M bits according to husart->Init.WordLength value
   *  set PCE and PS bits according to husart->Init.Parity value
   *  set TE and RE bits according to husart->Init.Mode value 
   *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8)  */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f5c:	68a0      	ldr	r0, [r4, #8]
  __HAL_USART_DISABLE(husart);
 8000f5e:	43ab      	bics	r3, r5
 8000f60:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f62:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f64:	6811      	ldr	r1, [r2, #0]
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f66:	4318      	orrs	r0, r3
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	4303      	orrs	r3, r0
 8000f6e:	6960      	ldr	r0, [r4, #20]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* no CR3 register configuration                                            */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */ 
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f70:	4e42      	ldr	r6, [pc, #264]	; (800107c <HAL_USART_Init+0x14c>)
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8000f72:	4303      	orrs	r3, r0
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f74:	4842      	ldr	r0, [pc, #264]	; (8001080 <HAL_USART_Init+0x150>)
 8000f76:	4001      	ands	r1, r0
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6013      	str	r3, [r2, #0]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8000f7c:	69a1      	ldr	r1, [r4, #24]
 8000f7e:	69e3      	ldr	r3, [r4, #28]
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 8000f80:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8000f82:	4319      	orrs	r1, r3
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6a21      	ldr	r1, [r4, #32]
 8000f8c:	430b      	orrs	r3, r1
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 8000f8e:	4303      	orrs	r3, r0
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8000f90:	6851      	ldr	r1, [r2, #4]
 8000f92:	483c      	ldr	r0, [pc, #240]	; (8001084 <HAL_USART_Init+0x154>)
 8000f94:	4001      	ands	r1, r0
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6053      	str	r3, [r2, #4]
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000f9a:	42b2      	cmp	r2, r6
 8000f9c:	d10e      	bne.n	8000fbc <HAL_USART_Init+0x8c>
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_USART_Init+0x158>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4013      	ands	r3, r2
  switch (clocksource)
 8000fa6:	4a39      	ldr	r2, [pc, #228]	; (800108c <HAL_USART_Init+0x15c>)
 8000fa8:	5cd0      	ldrb	r0, [r2, r3]
 8000faa:	2808      	cmp	r0, #8
 8000fac:	d845      	bhi.n	800103a <HAL_USART_Init+0x10a>
 8000fae:	f7ff f8ab 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000fb2:	4409      	.short	0x4409
 8000fb4:	443c440f 	.word	0x443c440f
 8000fb8:	4444      	.short	0x4444
 8000fba:	3f          	.byte	0x3f
 8000fbb:	00          	.byte	0x00
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <HAL_USART_Init+0x160>)
  uint16_t usartdiv                    = 0x0000U;  
 8000fbe:	2000      	movs	r0, #0
  USART_GETCLOCKSOURCE(husart, clocksource);
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d10e      	bne.n	8000fe2 <HAL_USART_Init+0xb2>
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(((2*HAL_RCC_GetPCLK1Freq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fc4:	f7ff fe90 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
      break;
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
      break;
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	0040      	lsls	r0, r0, #1
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	e002      	b.n	8000fd6 <HAL_USART_Init+0xa6>
      usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fd0:	6863      	ldr	r3, [r4, #4]
 8000fd2:	0858      	lsrs	r0, r3, #1
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_USART_Init+0x164>)
      break;
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fd6:	18c0      	adds	r0, r0, r3
 8000fd8:	6861      	ldr	r1, [r4, #4]
 8000fda:	f7ff f89f 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret                = HAL_OK;
 8000fde:	2500      	movs	r5, #0
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8000fe0:	b280      	uxth	r0, r0
    default:
      ret = HAL_ERROR;
      break;
  }
  
  brrtemp = usartdiv & 0xFFF0U;
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	0002      	movs	r2, r0
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fe6:	0700      	lsls	r0, r0, #28
  brrtemp = usartdiv & 0xFFF0U;
 8000fe8:	439a      	bics	r2, r3
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fea:	0f40      	lsrs	r0, r0, #29
  husart->Instance->BRR = brrtemp;
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	60d8      	str	r0, [r3, #12]
  if (USART_SetConfig(husart) == HAL_ERROR)
 8000ff2:	2d01      	cmp	r5, #1
 8000ff4:	d09f      	beq.n	8000f36 <HAL_USART_Init+0x6>
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4927      	ldr	r1, [pc, #156]	; (8001098 <HAL_USART_Init+0x168>)
 8000ffa:	400a      	ands	r2, r1
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000ffc:	212a      	movs	r1, #42	; 0x2a
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8000ffe:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	438a      	bics	r2, r1
 8001004:	609a      	str	r2, [r3, #8]
  __HAL_USART_ENABLE(husart);
 8001006:	2201      	movs	r2, #1
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	6463      	str	r3, [r4, #68]	; 0x44

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001012:	f7ff f939 	bl	8000288 <HAL_GetTick>

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(husart->Instance))
 8001016:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001018:	9001      	str	r0, [sp, #4]
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(husart->Instance))
 800101a:	42b3      	cmp	r3, r6
 800101c:	d010      	beq.n	8001040 <HAL_USART_Init+0x110>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART state*/
  husart->State= HAL_USART_STATE_READY;
 800101e:	2301      	movs	r3, #1
 8001020:	703b      	strb	r3, [r7, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8001022:	2300      	movs	r3, #0
 8001024:	3440      	adds	r4, #64	; 0x40
 8001026:	7023      	strb	r3, [r4, #0]
 8001028:	e786      	b.n	8000f38 <HAL_USART_Init+0x8>
      usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 800102a:	f7ff fd8f 	bl	8000b4c <HAL_RCC_GetSysClockFreq>
 800102e:	e7cb      	b.n	8000fc8 <HAL_USART_Init+0x98>
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	0858      	lsrs	r0, r3, #1
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	e7cd      	b.n	8000fd6 <HAL_USART_Init+0xa6>
  uint16_t usartdiv                    = 0x0000U;  
 800103a:	2000      	movs	r0, #0
      ret = HAL_ERROR;
 800103c:	2501      	movs	r5, #1
 800103e:	e7d0      	b.n	8000fe2 <HAL_USART_Init+0xb2>
    if((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001040:	6833      	ldr	r3, [r6, #0]
 8001042:	071b      	lsls	r3, r3, #28
 8001044:	d40e      	bmi.n	8001064 <HAL_USART_Init+0x134>
    if((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	075b      	lsls	r3, r3, #29
 800104c:	d5e7      	bpl.n	800101e <HAL_USART_Init+0xee>
      if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800104e:	23fa      	movs	r3, #250	; 0xfa
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	9a01      	ldr	r2, [sp, #4]
 8001056:	03c9      	lsls	r1, r1, #15
 8001058:	0020      	movs	r0, r4
 800105a:	f7ff ff3f 	bl	8000edc <USART_WaitOnFlagUntilTimeout.constprop.3>
 800105e:	2800      	cmp	r0, #0
 8001060:	d10a      	bne.n	8001078 <HAL_USART_Init+0x148>
 8001062:	e7dc      	b.n	800101e <HAL_USART_Init+0xee>
      if(USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001064:	23fa      	movs	r3, #250	; 0xfa
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	9a01      	ldr	r2, [sp, #4]
 800106c:	0389      	lsls	r1, r1, #14
 800106e:	0020      	movs	r0, r4
 8001070:	f7ff ff34 	bl	8000edc <USART_WaitOnFlagUntilTimeout.constprop.3>
 8001074:	2800      	cmp	r0, #0
 8001076:	d0e6      	beq.n	8001046 <HAL_USART_Init+0x116>
        return HAL_TIMEOUT;
 8001078:	2503      	movs	r5, #3
 800107a:	e75d      	b.n	8000f38 <HAL_USART_Init+0x8>
 800107c:	40013800 	.word	0x40013800
 8001080:	ffff69f3 	.word	0xffff69f3
 8001084:	ffffc0ff 	.word	0xffffc0ff
 8001088:	40021000 	.word	0x40021000
 800108c:	08001808 	.word	0x08001808
 8001090:	40004400 	.word	0x40004400
 8001094:	00f42400 	.word	0x00f42400
 8001098:	ffffbfff 	.word	0xffffbfff

0800109c <HAL_USART_Transmit_IT>:
{
 800109c:	b570      	push	{r4, r5, r6, lr}
  if(husart->State == HAL_USART_STATE_READY)
 800109e:	0006      	movs	r6, r0
 80010a0:	3641      	adds	r6, #65	; 0x41
 80010a2:	7833      	ldrb	r3, [r6, #0]
{
 80010a4:	0004      	movs	r4, r0
  if(husart->State == HAL_USART_STATE_READY)
 80010a6:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
 80010a8:	2002      	movs	r0, #2
  if(husart->State == HAL_USART_STATE_READY)
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d122      	bne.n	80010f4 <HAL_USART_Transmit_IT+0x58>
      return HAL_ERROR;
 80010ae:	0018      	movs	r0, r3
    if((pTxData == NULL) || (Size == 0U))
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d01f      	beq.n	80010f4 <HAL_USART_Transmit_IT+0x58>
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	d01d      	beq.n	80010f4 <HAL_USART_Transmit_IT+0x58>
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	68a5      	ldr	r5, [r4, #8]
 80010bc:	015b      	lsls	r3, r3, #5
 80010be:	429d      	cmp	r5, r3
 80010c0:	d104      	bne.n	80010cc <HAL_USART_Transmit_IT+0x30>
 80010c2:	6923      	ldr	r3, [r4, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_USART_Transmit_IT+0x30>
      if((((uint32_t)pTxData)&1U) != 0U)
 80010c8:	4201      	tst	r1, r0
 80010ca:	d113      	bne.n	80010f4 <HAL_USART_Transmit_IT+0x58>
    __HAL_LOCK(husart);
 80010cc:	0025      	movs	r5, r4
 80010ce:	3540      	adds	r5, #64	; 0x40
 80010d0:	782b      	ldrb	r3, [r5, #0]
    return HAL_BUSY;
 80010d2:	2002      	movs	r0, #2
    __HAL_LOCK(husart);
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00d      	beq.n	80010f4 <HAL_USART_Transmit_IT+0x58>
    husart->TxXferCount = Size;
 80010d8:	8562      	strh	r2, [r4, #42]	; 0x2a
    husart->TxXferSize = Size;
 80010da:	8522      	strh	r2, [r4, #40]	; 0x28
    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80010dc:	2300      	movs	r3, #0
    husart->State = HAL_USART_STATE_BUSY_TX;
 80010de:	2212      	movs	r2, #18
    husart->pTxBuffPtr = pTxData;
 80010e0:	6261      	str	r1, [r4, #36]	; 0x24
    __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 80010e2:	6821      	ldr	r1, [r4, #0]
    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80010e4:	6463      	str	r3, [r4, #68]	; 0x44
    husart->State = HAL_USART_STATE_BUSY_TX;
 80010e6:	7032      	strb	r2, [r6, #0]
    __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 80010e8:	6808      	ldr	r0, [r1, #0]
 80010ea:	326e      	adds	r2, #110	; 0x6e
 80010ec:	4302      	orrs	r2, r0
    return HAL_OK;
 80010ee:	0018      	movs	r0, r3
    __HAL_UNLOCK(husart);
 80010f0:	702b      	strb	r3, [r5, #0]
    __HAL_USART_ENABLE_IT(husart, USART_IT_TXE);
 80010f2:	600a      	str	r2, [r1, #0]
}
 80010f4:	bd70      	pop	{r4, r5, r6, pc}

080010f6 <CreateFIFO>:

void CreateFIFO(CircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
	buffer->bufferLen = size;
	buffer->rxPtr = 0;
 80010f6:	2300      	movs	r3, #0
	buffer->bufferPtr = bufferPtr;
 80010f8:	6041      	str	r1, [r0, #4]
	buffer->bufferLen = size;
 80010fa:	8102      	strh	r2, [r0, #8]
	buffer->rxPtr = 0;
 80010fc:	8003      	strh	r3, [r0, #0]
	buffer->txPtr = 0;
 80010fe:	8043      	strh	r3, [r0, #2]
    buffer->numOfBytes = 0;
 8001100:	8143      	strh	r3, [r0, #10]
}
 8001102:	4770      	bx	lr

08001104 <AddFIFOByte>:
    //interruptsEnable();
    return result;
}

void AddFIFOByte(CircularBuffer* buffer, uint8_t data)
{
 8001104:	b510      	push	{r4, lr}
 8001106:	0004      	movs	r4, r0
	//interruptsDisable();
    buffer->bufferPtr[buffer->txPtr]= data;
 8001108:	8843      	ldrh	r3, [r0, #2]
 800110a:	6842      	ldr	r2, [r0, #4]
 800110c:	54d1      	strb	r1, [r2, r3]
    buffer->numOfBytes++;
 800110e:	8943      	ldrh	r3, [r0, #10]
 8001110:	3301      	adds	r3, #1
 8001112:	8143      	strh	r3, [r0, #10]
    buffer->txPtr++;
 8001114:	8840      	ldrh	r0, [r0, #2]
    buffer->txPtr %= buffer->bufferLen;
 8001116:	8921      	ldrh	r1, [r4, #8]
    buffer->txPtr++;
 8001118:	3001      	adds	r0, #1
    buffer->txPtr %= buffer->bufferLen;
 800111a:	b280      	uxth	r0, r0
 800111c:	f7ff f884 	bl	8000228 <__aeabi_uidivmod>
 8001120:	8061      	strh	r1, [r4, #2]
	//interruptsEnable();
}
 8001122:	bd10      	pop	{r4, pc}

08001124 <GetFIFOPendingBytes>:



uint16_t GetFIFOPendingBytes(CircularBuffer* buffer)
{
    return buffer->numOfBytes;
 8001124:	8940      	ldrh	r0, [r0, #10]
}
 8001126:	4770      	bx	lr

08001128 <GetFIFOFreeBytes>:

uint16_t GetFIFOFreeBytes(CircularBuffer* buffer)
{
    return (buffer->bufferLen)-(buffer->numOfBytes);
 8001128:	8903      	ldrh	r3, [r0, #8]
 800112a:	8940      	ldrh	r0, [r0, #10]
 800112c:	1a18      	subs	r0, r3, r0
 800112e:	b280      	uxth	r0, r0
}
 8001130:	4770      	bx	lr
	...

08001134 <InitGPIOClock>:

void InitGPIOClock(eGPIO port)
{
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8001134:	2290      	movs	r2, #144	; 0x90
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <InitGPIOClock+0x98>)
 8001138:	0100      	lsls	r0, r0, #4
 800113a:	58c3      	ldr	r3, [r0, r3]
{
 800113c:	b086      	sub	sp, #24
	if ( GPIOInstanceMap[port].port == GPIOA ){
 800113e:	05d2      	lsls	r2, r2, #23
 8001140:	4293      	cmp	r3, r2
 8001142:	d10b      	bne.n	800115c <InitGPIOClock+0x28>
		__GPIOA_CLK_ENABLE();
 8001144:	2080      	movs	r0, #128	; 0x80
 8001146:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <InitGPIOClock+0x9c>)
 8001148:	0280      	lsls	r0, r0, #10
 800114a:	6951      	ldr	r1, [r2, #20]
 800114c:	4301      	orrs	r1, r0
 800114e:	6151      	str	r1, [r2, #20]
 8001150:	6953      	ldr	r3, [r2, #20]
 8001152:	4003      	ands	r3, r0
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
	if( GPIOInstanceMap[port].port == GPIOF ){
		__GPIOF_CLK_ENABLE();
	}
#endif //GPIOF

}
 8001158:	b006      	add	sp, #24
 800115a:	4770      	bx	lr
	if( GPIOInstanceMap[port].port == GPIOB ){
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <InitGPIOClock+0xa0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10a      	bne.n	8001178 <InitGPIOClock+0x44>
		__GPIOB_CLK_ENABLE();
 8001162:	2080      	movs	r0, #128	; 0x80
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <InitGPIOClock+0x9c>)
 8001166:	02c0      	lsls	r0, r0, #11
 8001168:	6951      	ldr	r1, [r2, #20]
 800116a:	4301      	orrs	r1, r0
 800116c:	6151      	str	r1, [r2, #20]
 800116e:	6953      	ldr	r3, [r2, #20]
 8001170:	4003      	ands	r3, r0
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	9b02      	ldr	r3, [sp, #8]
 8001176:	e7ef      	b.n	8001158 <InitGPIOClock+0x24>
	if( GPIOInstanceMap[port].port == GPIOC ){
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <InitGPIOClock+0xa4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10a      	bne.n	8001194 <InitGPIOClock+0x60>
		__GPIOC_CLK_ENABLE();
 800117e:	2080      	movs	r0, #128	; 0x80
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <InitGPIOClock+0x9c>)
 8001182:	0300      	lsls	r0, r0, #12
 8001184:	6951      	ldr	r1, [r2, #20]
 8001186:	4301      	orrs	r1, r0
 8001188:	6151      	str	r1, [r2, #20]
 800118a:	6953      	ldr	r3, [r2, #20]
 800118c:	4003      	ands	r3, r0
 800118e:	9303      	str	r3, [sp, #12]
 8001190:	9b03      	ldr	r3, [sp, #12]
 8001192:	e7e1      	b.n	8001158 <InitGPIOClock+0x24>
	if( GPIOInstanceMap[port].port == GPIOD ){
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <InitGPIOClock+0xa8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d10a      	bne.n	80011b0 <InitGPIOClock+0x7c>
		__GPIOD_CLK_ENABLE();
 800119a:	2080      	movs	r0, #128	; 0x80
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <InitGPIOClock+0x9c>)
 800119e:	0340      	lsls	r0, r0, #13
 80011a0:	6951      	ldr	r1, [r2, #20]
 80011a2:	4301      	orrs	r1, r0
 80011a4:	6151      	str	r1, [r2, #20]
 80011a6:	6953      	ldr	r3, [r2, #20]
 80011a8:	4003      	ands	r3, r0
 80011aa:	9304      	str	r3, [sp, #16]
 80011ac:	9b04      	ldr	r3, [sp, #16]
 80011ae:	e7d3      	b.n	8001158 <InitGPIOClock+0x24>
	if( GPIOInstanceMap[port].port == GPIOF ){
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <InitGPIOClock+0xac>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d1d0      	bne.n	8001158 <InitGPIOClock+0x24>
		__GPIOF_CLK_ENABLE();
 80011b6:	2080      	movs	r0, #128	; 0x80
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <InitGPIOClock+0x9c>)
 80011ba:	03c0      	lsls	r0, r0, #15
 80011bc:	6951      	ldr	r1, [r2, #20]
 80011be:	4301      	orrs	r1, r0
 80011c0:	6151      	str	r1, [r2, #20]
 80011c2:	6953      	ldr	r3, [r2, #20]
 80011c4:	4003      	ands	r3, r0
 80011c6:	9305      	str	r3, [sp, #20]
 80011c8:	9b05      	ldr	r3, [sp, #20]
}
 80011ca:	e7c5      	b.n	8001158 <InitGPIOClock+0x24>
 80011cc:	0800180c 	.word	0x0800180c
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001400 	.word	0x48001400

080011e4 <GPIOWrite>:
		/* No else needed */
	}
}

void GPIOWrite(eGPIO port, eGPIOValue value)
{
 80011e4:	b510      	push	{r4, lr}
 80011e6:	000a      	movs	r2, r1
	if ( value != GPIO_DEFAULT )
 80011e8:	2903      	cmp	r1, #3
 80011ea:	d008      	beq.n	80011fe <GPIOWrite+0x1a>
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <GPIOWrite+0x30>)
 80011ee:	0100      	lsls	r0, r0, #4
	{
		if ( value != GPIO_TOGGLE )
 80011f0:	2902      	cmp	r1, #2
 80011f2:	d005      	beq.n	8001200 <GPIOWrite+0x1c>
		{
			HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 80011f4:	1819      	adds	r1, r3, r0
 80011f6:	8889      	ldrh	r1, [r1, #4]
 80011f8:	5818      	ldr	r0, [r3, r0]
 80011fa:	f7ff fabb 	bl	8000774 <HAL_GPIO_WritePin>
//			  HAL_Delay(200);
			HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
			HAL_Delay(100);
		}
	}
}
 80011fe:	bd10      	pop	{r4, pc}
			HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8001200:	181a      	adds	r2, r3, r0
 8001202:	8891      	ldrh	r1, [r2, #4]
 8001204:	5818      	ldr	r0, [r3, r0]
 8001206:	f7ff fabb 	bl	8000780 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f7ff f842 	bl	8000294 <HAL_Delay>
}
 8001210:	e7f5      	b.n	80011fe <GPIOWrite+0x1a>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	0800180c 	.word	0x0800180c

08001218 <GPIOInit>:
{
 8001218:	b530      	push	{r4, r5, lr}
	for (port = 0; port < NUM_OF_GPIO; port++)
 800121a:	2500      	movs	r5, #0
 800121c:	4c0f      	ldr	r4, [pc, #60]	; (800125c <GPIOInit+0x44>)
{
 800121e:	b087      	sub	sp, #28
		InitGPIOClock(port);
 8001220:	0028      	movs	r0, r5
 8001222:	f7ff ff87 	bl	8001134 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 8001226:	88a3      	ldrh	r3, [r4, #4]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 8001228:	a901      	add	r1, sp, #4
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 800122a:	9301      	str	r3, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 800122c:	68a3      	ldr	r3, [r4, #8]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 800122e:	6820      	ldr	r0, [r4, #0]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 8001230:	9302      	str	r3, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 8001232:	7b23      	ldrb	r3, [r4, #12]
 8001234:	9304      	str	r3, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8001236:	7b63      	ldrb	r3, [r4, #13]
 8001238:	9303      	str	r3, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 800123a:	7ba3      	ldrb	r3, [r4, #14]
 800123c:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 800123e:	f7ff f9e9 	bl	8000614 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8001242:	7be1      	ldrb	r1, [r4, #15]
 8001244:	2903      	cmp	r1, #3
 8001246:	d002      	beq.n	800124e <GPIOInit+0x36>
			GPIOWrite(port, GPIOInstanceMap[port].initialValue);
 8001248:	0028      	movs	r0, r5
 800124a:	f7ff ffcb 	bl	80011e4 <GPIOWrite>
	for (port = 0; port < NUM_OF_GPIO; port++)
 800124e:	3501      	adds	r5, #1
 8001250:	b2ed      	uxtb	r5, r5
 8001252:	3410      	adds	r4, #16
 8001254:	2d06      	cmp	r5, #6
 8001256:	d1e3      	bne.n	8001220 <GPIOInit+0x8>
}
 8001258:	b007      	add	sp, #28
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	0800180c 	.word	0x0800180c

08001260 <uartInit>:
    HAL_USART_IRQHandler(uart_instance);
}


void uartInit(void)
{
 8001260:	b570      	push	{r4, r5, r6, lr}
        uart_handler->Instance        = uart_instance->port;
        uart_handler->Init.BaudRate   = uart_instance->baudRate;
        uart_handler->Init.WordLength = uart_instance->dataSize;
        uart_handler->Init.StopBits   = uart_instance->stopBits;
        uart_handler->Init.Parity     = uart_instance->parity;
        uart_handler->Init.Mode       = USART_MODE_TX_RX;
 8001262:	260c      	movs	r6, #12
        uart_handler->Instance        = uart_instance->port;
 8001264:	4c19      	ldr	r4, [pc, #100]	; (80012cc <uartInit+0x6c>)
 8001266:	4d1a      	ldr	r5, [pc, #104]	; (80012d0 <uartInit+0x70>)
 8001268:	6823      	ldr	r3, [r4, #0]
        uart_handler->Init.Mode       = USART_MODE_TX_RX;
 800126a:	616e      	str	r6, [r5, #20]
        uart_handler->Instance        = uart_instance->port;
 800126c:	602b      	str	r3, [r5, #0]
        uart_handler->Init.BaudRate   = uart_instance->baudRate;
 800126e:	6863      	ldr	r3, [r4, #4]
        //se pueden añadir los parámetros Init.CLKPolarity, Init.CLKPhase e Init.CLKLastBit

		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 8001270:	8aa2      	ldrh	r2, [r4, #20]
        uart_handler->Init.BaudRate   = uart_instance->baudRate;
 8001272:	606b      	str	r3, [r5, #4]
        uart_handler->Init.WordLength = uart_instance->dataSize;
 8001274:	7a23      	ldrb	r3, [r4, #8]
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 8001276:	69a1      	ldr	r1, [r4, #24]
        uart_handler->Init.WordLength = uart_instance->dataSize;
 8001278:	60ab      	str	r3, [r5, #8]
        uart_handler->Init.StopBits   = uart_instance->stopBits;
 800127a:	7aa3      	ldrb	r3, [r4, #10]
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <uartInit+0x74>)
        uart_handler->Init.StopBits   = uart_instance->stopBits;
 800127e:	60eb      	str	r3, [r5, #12]
        uart_handler->Init.Parity     = uart_instance->parity;
 8001280:	7a63      	ldrb	r3, [r4, #9]
 8001282:	612b      	str	r3, [r5, #16]
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 8001284:	f7ff ff37 	bl	80010f6 <CreateFIFO>
                UARTInstanceMap[i].rxBufferPtr,
                UARTInstanceMap[i].rxBufferSize);

		CreateFIFO(&uartCircularBuffers[i].txBuffer,
 8001288:	89a2      	ldrh	r2, [r4, #12]
 800128a:	6921      	ldr	r1, [r4, #16]
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <uartInit+0x78>)
 800128e:	f7ff ff32 	bl	80010f6 <CreateFIFO>
        uart_handler->Instance        = uart_instance->port;
 8001292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        uart_handler->Init.Mode       = USART_MODE_TX_RX;
 8001294:	65ee      	str	r6, [r5, #92]	; 0x5c
        uart_handler->Instance        = uart_instance->port;
 8001296:	64ab      	str	r3, [r5, #72]	; 0x48
        uart_handler->Init.BaudRate   = uart_instance->baudRate;
 8001298:	6b23      	ldr	r3, [r4, #48]	; 0x30
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 800129a:	6c61      	ldr	r1, [r4, #68]	; 0x44
        uart_handler->Init.BaudRate   = uart_instance->baudRate;
 800129c:	64eb      	str	r3, [r5, #76]	; 0x4c
        uart_handler->Init.WordLength = uart_instance->dataSize;
 800129e:	0023      	movs	r3, r4
 80012a0:	3334      	adds	r3, #52	; 0x34
 80012a2:	781b      	ldrb	r3, [r3, #0]
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <uartInit+0x7c>)
        uart_handler->Init.WordLength = uart_instance->dataSize;
 80012a6:	652b      	str	r3, [r5, #80]	; 0x50
        uart_handler->Init.StopBits   = uart_instance->stopBits;
 80012a8:	0023      	movs	r3, r4
 80012aa:	3336      	adds	r3, #54	; 0x36
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	656b      	str	r3, [r5, #84]	; 0x54
        uart_handler->Init.Parity     = uart_instance->parity;
 80012b0:	0023      	movs	r3, r4
 80012b2:	3335      	adds	r3, #53	; 0x35
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	65ab      	str	r3, [r5, #88]	; 0x58
		CreateFIFO(&uartCircularBuffers[i].rxBuffer,
 80012b8:	1ca3      	adds	r3, r4, #2
 80012ba:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80012bc:	f7ff ff1b 	bl	80010f6 <CreateFIFO>
		CreateFIFO(&uartCircularBuffers[i].txBuffer,
 80012c0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80012c2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <uartInit+0x80>)
 80012c6:	f7ff ff16 	bl	80010f6 <CreateFIFO>
                UARTInstanceMap[i].txBufferPtr,
                UARTInstanceMap[i].txBufferSize);

    }
}
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	0800186c 	.word	0x0800186c
 80012d0:	20000058 	.word	0x20000058
 80012d4:	20000024 	.word	0x20000024
 80012d8:	20000030 	.word	0x20000030
 80012dc:	2000003c 	.word	0x2000003c
 80012e0:	20000048 	.word	0x20000048

080012e4 <uartWrite>:
    }
    return HAL_OK;
}

HAL_StatusTypeDef uartWrite(eUart uartPort, uint8_t* buffer)
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}

    bufferSize = 50;

    if(bufferSize != 0){

		if(GetFIFOFreeBytes(&uartCircularBuffers[uartPort].txBuffer) > bufferSize){
 80012e6:	2418      	movs	r4, #24
{
 80012e8:	b085      	sub	sp, #20
    uint8_t byte = 0;
 80012ea:	ab02      	add	r3, sp, #8
 80012ec:	1ddf      	adds	r7, r3, #7
 80012ee:	2300      	movs	r3, #0
		if(GetFIFOFreeBytes(&uartCircularBuffers[uartPort].txBuffer) > bufferSize){
 80012f0:	4344      	muls	r4, r0
    uint8_t byte = 0;
 80012f2:	703b      	strb	r3, [r7, #0]
		if(GetFIFOFreeBytes(&uartCircularBuffers[uartPort].txBuffer) > bufferSize){
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <uartWrite+0x60>)
 80012f6:	340c      	adds	r4, #12
 80012f8:	18e4      	adds	r4, r4, r3
{
 80012fa:	0006      	movs	r6, r0
		if(GetFIFOFreeBytes(&uartCircularBuffers[uartPort].txBuffer) > bufferSize){
 80012fc:	0020      	movs	r0, r4
{
 80012fe:	000d      	movs	r5, r1
		if(GetFIFOFreeBytes(&uartCircularBuffers[uartPort].txBuffer) > bufferSize){
 8001300:	f7ff ff12 	bl	8001128 <GetFIFOFreeBytes>
 8001304:	2832      	cmp	r0, #50	; 0x32
 8001306:	d802      	bhi.n	800130e <uartWrite+0x2a>
		    }
		    else
		    	return HAL_ERROR;
		}
		else
			return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
    }
    else
    	return HAL_ERROR;
}
 800130a:	b005      	add	sp, #20
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	002b      	movs	r3, r5
 8001310:	3332      	adds	r3, #50	; 0x32
 8001312:	9301      	str	r3, [sp, #4]
				AddFIFOByte(&uartCircularBuffers[uartPort].txBuffer, buffer[i]);
 8001314:	7829      	ldrb	r1, [r5, #0]
 8001316:	0020      	movs	r0, r4
 8001318:	f7ff fef4 	bl	8001104 <AddFIFOByte>
			for(i = 0; i < bufferSize; i++){
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	3501      	adds	r5, #1
 8001320:	429d      	cmp	r5, r3
 8001322:	d1f7      	bne.n	8001314 <uartWrite+0x30>
		    if ( GetFIFOPendingBytes(&uartCircularBuffers[uartPort].txBuffer) > 0)
 8001324:	0020      	movs	r0, r4
 8001326:	f7ff fefd 	bl	8001124 <GetFIFOPendingBytes>
 800132a:	2800      	cmp	r0, #0
 800132c:	d0ec      	beq.n	8001308 <uartWrite+0x24>
			 HAL_USART_Transmit_IT(&uartHandlers[uartPort], &byte, 1);
 800132e:	2048      	movs	r0, #72	; 0x48
 8001330:	4346      	muls	r6, r0
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <uartWrite+0x64>)
 8001334:	2201      	movs	r2, #1
 8001336:	1830      	adds	r0, r6, r0
 8001338:	0039      	movs	r1, r7
 800133a:	f7ff feaf 	bl	800109c <HAL_USART_Transmit_IT>
			 return HAL_OK;
 800133e:	2000      	movs	r0, #0
 8001340:	e7e3      	b.n	800130a <uartWrite+0x26>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000024 	.word	0x20000024
 8001348:	20000058 	.word	0x20000058

0800134c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800134c:	2312      	movs	r3, #18
{
 800134e:	b510      	push	{r4, lr}
 8001350:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001352:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001354:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001356:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001358:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800135a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800135c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001362:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001364:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f7ff fa0f 	bl	8000788 <HAL_RCC_OscConfig>
 800136a:	1e01      	subs	r1, r0, #0
 800136c:	d000      	beq.n	8001370 <SystemClock_Config+0x24>
 800136e:	e7fe      	b.n	800136e <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001372:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001374:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001378:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f7ff fc18 	bl	8000bb0 <HAL_RCC_ClockConfig>
 8001380:	2800      	cmp	r0, #0
 8001382:	d000      	beq.n	8001386 <SystemClock_Config+0x3a>
 8001384:	e7fe      	b.n	8001384 <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001386:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800138a:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f7ff fcbc 	bl	8000d08 <HAL_RCCEx_PeriphCLKConfig>
 8001390:	1e04      	subs	r4, r0, #0
 8001392:	d000      	beq.n	8001396 <SystemClock_Config+0x4a>
 8001394:	e7fe      	b.n	8001394 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001396:	f7ff fca1 	bl	8000cdc <HAL_RCC_GetHCLKFreq>
 800139a:	21fa      	movs	r1, #250	; 0xfa
 800139c:	0089      	lsls	r1, r1, #2
 800139e:	f7fe febd 	bl	800011c <__udivsi3>
 80013a2:	f7ff f8dd 	bl	8000560 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013a6:	2004      	movs	r0, #4
 80013a8:	f7ff f8f4 	bl	8000594 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013ac:	2001      	movs	r0, #1
 80013ae:	0022      	movs	r2, r4
 80013b0:	0021      	movs	r1, r4
 80013b2:	4240      	negs	r0, r0
 80013b4:	f7ff f8a4 	bl	8000500 <HAL_NVIC_SetPriority>
}
 80013b8:	b016      	add	sp, #88	; 0x58
 80013ba:	bd10      	pop	{r4, pc}

080013bc <main>:
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 80013c0:	f7fe ff4a 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 80013c4:	f7ff ffc2 	bl	800134c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	2080      	movs	r0, #128	; 0x80
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <main+0x184>)
 80013cc:	0280      	lsls	r0, r0, #10
 80013ce:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013d0:	25e0      	movs	r5, #224	; 0xe0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4301      	orrs	r1, r0
 80013d4:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	0309      	lsls	r1, r1, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4002      	ands	r2, r0
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013e4:	00ad      	lsls	r5, r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	430a      	orrs	r2, r1
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	400b      	ands	r3, r1
 80013f0:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013f2:	0029      	movs	r1, r5
 80013f4:	4853      	ldr	r0, [pc, #332]	; (8001544 <main+0x188>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013fa:	f7ff f9bb 	bl	8000774 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001402:	ac02      	add	r4, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	484f      	ldr	r0, [pc, #316]	; (8001544 <main+0x188>)
 8001406:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f7ff f901 	bl	8000614 <HAL_GPIO_Init>
  husart2.Instance = USART2;
 8001412:	484d      	ldr	r0, [pc, #308]	; (8001548 <main+0x18c>)
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <main+0x190>)
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001416:	6085      	str	r5, [r0, #8]
  husart2.Instance = USART2;
 8001418:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate = 38400;
 800141a:	2396      	movs	r3, #150	; 0x96
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	6043      	str	r3, [r0, #4]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001420:	230c      	movs	r3, #12
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001422:	60c5      	str	r5, [r0, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001424:	6105      	str	r5, [r0, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001426:	6143      	str	r3, [r0, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001428:	6185      	str	r5, [r0, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800142a:	61c5      	str	r5, [r0, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800142c:	6205      	str	r5, [r0, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800142e:	f7ff fd7f 	bl	8000f30 <HAL_USART_Init>
 8001432:	42a8      	cmp	r0, r5
 8001434:	d000      	beq.n	8001438 <main+0x7c>
 8001436:	e7fe      	b.n	8001436 <main+0x7a>
  hspi1.Instance = SPI1;
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <main+0x194>)
 800143a:	4a46      	ldr	r2, [pc, #280]	; (8001554 <main+0x198>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800143c:	6098      	str	r0, [r3, #8]
  hspi1.Instance = SPI1;
 800143e:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001440:	2282      	movs	r2, #130	; 0x82
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	605a      	str	r2, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001446:	32fd      	adds	r2, #253	; 0xfd
 8001448:	32ff      	adds	r2, #255	; 0xff
 800144a:	60da      	str	r2, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144c:	3a01      	subs	r2, #1
 800144e:	3aff      	subs	r2, #255	; 0xff
 8001450:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001452:	3afa      	subs	r2, #250	; 0xfa
 8001454:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001456:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800145a:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145c:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001464:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001466:	3201      	adds	r2, #1
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001468:	0018      	movs	r0, r3
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	f7ff fcd8 	bl	8000e20 <HAL_SPI_Init>
 8001470:	2800      	cmp	r0, #0
 8001472:	d000      	beq.n	8001476 <main+0xba>
 8001474:	e7fe      	b.n	8001474 <main+0xb8>
  hadc.Instance = ADC1;
 8001476:	4d38      	ldr	r5, [pc, #224]	; (8001558 <main+0x19c>)
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <main+0x1a0>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147a:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 800147c:	602b      	str	r3, [r5, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147e:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001480:	6068      	str	r0, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001482:	60a8      	str	r0, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001484:	60e8      	str	r0, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001486:	61a8      	str	r0, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001488:	61e8      	str	r0, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 800148a:	6228      	str	r0, [r5, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800148c:	6268      	str	r0, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001490:	62e8      	str	r0, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001492:	6328      	str	r0, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001494:	0028      	movs	r0, r5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001496:	612e      	str	r6, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001498:	616f      	str	r7, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149a:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800149c:	636e      	str	r6, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800149e:	f7fe ff09 	bl	80002b4 <HAL_ADC_Init>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d000      	beq.n	80014a8 <main+0xec>
 80014a6:	e7fe      	b.n	80014a6 <main+0xea>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ae:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 80014b0:	6020      	str	r0, [r4, #0]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014b2:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b4:	0021      	movs	r1, r4
 80014b6:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014b8:	60a3      	str	r3, [r4, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ba:	f7fe ffa1 	bl	8000400 <HAL_ADC_ConfigChannel>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d000      	beq.n	80014c4 <main+0x108>
 80014c2:	e7fe      	b.n	80014c2 <main+0x106>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c4:	0021      	movs	r1, r4
 80014c6:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80014c8:	6026      	str	r6, [r4, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ca:	f7fe ff99 	bl	8000400 <HAL_ADC_ConfigChannel>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d000      	beq.n	80014d4 <main+0x118>
 80014d2:	e7fe      	b.n	80014d2 <main+0x116>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80014d4:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d6:	0021      	movs	r1, r4
 80014d8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80014da:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014dc:	f7fe ff90 	bl	8000400 <HAL_ADC_ConfigChannel>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d000      	beq.n	80014e6 <main+0x12a>
 80014e4:	e7fe      	b.n	80014e4 <main+0x128>
  hcrc.Instance = CRC;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <main+0x1a4>)
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <main+0x1a8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014ea:	7118      	strb	r0, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014ec:	7158      	strb	r0, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014ee:	6158      	str	r0, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014f0:	6198      	str	r0, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014f2:	0018      	movs	r0, r3
  hcrc.Instance = CRC;
 80014f4:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014f6:	621e      	str	r6, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014f8:	f7ff f85f 	bl	80005ba <HAL_CRC_Init>
 80014fc:	1e05      	subs	r5, r0, #0
 80014fe:	d000      	beq.n	8001502 <main+0x146>
 8001500:	e7fe      	b.n	8001500 <main+0x144>
  GPIOInit();
 8001502:	f7ff fe89 	bl	8001218 <GPIOInit>
  uartInit();
 8001506:	f7ff feab 	bl	8001260 <uartInit>
  uint8_t buffer[128] = {0,1,2,3,4,5};
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	0029      	movs	r1, r5
 800150e:	0020      	movs	r0, r4
 8001510:	f000 f955 	bl	80017be <memset>
 8001514:	2302      	movs	r3, #2
 8001516:	70a3      	strb	r3, [r4, #2]
 8001518:	3301      	adds	r3, #1
 800151a:	70e3      	strb	r3, [r4, #3]
 800151c:	3302      	adds	r3, #2
 800151e:	7066      	strb	r6, [r4, #1]
 8001520:	7127      	strb	r7, [r4, #4]
 8001522:	7163      	strb	r3, [r4, #5]
	  if ( uartWrite(UART_2, buffer) == HAL_OK){
 8001524:	0021      	movs	r1, r4
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fedc 	bl	80012e4 <uartWrite>
 800152c:	2800      	cmp	r0, #0
 800152e:	d104      	bne.n	800153a <main+0x17e>
		  GPIOWrite(GPIO_LED_3, GPIO_TOGGLE);
 8001530:	2102      	movs	r1, #2
 8001532:	3004      	adds	r0, #4
		  GPIOWrite(GPIO_LED_4, GPIO_HIGH);
 8001534:	f7ff fe56 	bl	80011e4 <GPIOWrite>
 8001538:	e7f4      	b.n	8001524 <main+0x168>
 800153a:	2101      	movs	r1, #1
 800153c:	2005      	movs	r0, #5
 800153e:	e7f9      	b.n	8001534 <main+0x178>
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800
 8001548:	2000071c 	.word	0x2000071c
 800154c:	40004400 	.word	0x40004400
 8001550:	20000764 	.word	0x20000764
 8001554:	40013000 	.word	0x40013000
 8001558:	200007c8 	.word	0x200007c8
 800155c:	40012400 	.word	0x40012400
 8001560:	200006f8 	.word	0x200006f8
 8001564:	40023000 	.word	0x40023000

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2001      	movs	r0, #1
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_MspInit+0x38>)
 800156e:	6991      	ldr	r1, [r2, #24]
 8001570:	4301      	orrs	r1, r0
 8001572:	6191      	str	r1, [r2, #24]
 8001574:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800157a:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800157e:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001582:	f7fe ffbd 	bl	8000500 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2002      	movs	r0, #2
 800158a:	0011      	movs	r1, r2
 800158c:	4240      	negs	r0, r0
 800158e:	f7fe ffb7 	bl	8000500 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2001      	movs	r0, #1
 8001596:	0011      	movs	r1, r2
 8001598:	4240      	negs	r0, r0
 800159a:	f7fe ffb1 	bl	8000500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159e:	bd07      	pop	{r0, r1, r2, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_ADC_MspInit+0x38>)
 80015a8:	6802      	ldr	r2, [r0, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d113      	bne.n	80015d6 <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ae:	2080      	movs	r0, #128	; 0x80
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_ADC_MspInit+0x3c>)
 80015b2:	0080      	lsls	r0, r0, #2
 80015b4:	6991      	ldr	r1, [r2, #24]
 80015b6:	4301      	orrs	r1, r0
 80015b8:	6191      	str	r1, [r2, #24]
 80015ba:	6993      	ldr	r3, [r2, #24]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015be:	4003      	ands	r3, r0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f7ff f81f 	bl	8000614 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d6:	b007      	add	sp, #28
 80015d8:	bd00      	pop	{pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40012400 	.word	0x40012400
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_CRC_MspInit+0x20>)
 80015e6:	6802      	ldr	r2, [r0, #0]
{
 80015e8:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d108      	bne.n	8001600 <HAL_CRC_MspInit+0x1c>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ee:	2040      	movs	r0, #64	; 0x40
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_CRC_MspInit+0x24>)
 80015f2:	6951      	ldr	r1, [r2, #20]
 80015f4:	4301      	orrs	r1, r0
 80015f6:	6151      	str	r1, [r2, #20]
 80015f8:	6953      	ldr	r3, [r2, #20]
 80015fa:	4003      	ands	r3, r0
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001600:	b002      	add	sp, #8
 8001602:	4770      	bx	lr
 8001604:	40023000 	.word	0x40023000
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_SPI_MspInit+0x40>)
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d117      	bne.n	8001646 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001616:	2080      	movs	r0, #128	; 0x80
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_SPI_MspInit+0x44>)
 800161a:	0140      	lsls	r0, r0, #5
 800161c:	6991      	ldr	r1, [r2, #24]
 800161e:	4301      	orrs	r1, r0
 8001620:	6191      	str	r1, [r2, #24]
 8001622:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001626:	4003      	ands	r3, r0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800162c:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001630:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	3bde      	subs	r3, #222	; 0xde
 8001634:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	a901      	add	r1, sp, #4
 800163a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001640:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f7fe ffe7 	bl	8000614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001646:	b007      	add	sp, #28
 8001648:	bd00      	pop	{pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40013000 	.word	0x40013000
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_USART_MspInit>:
  }

}

void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(husart->Instance==USART2)
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_USART_MspInit+0x40>)
 8001658:	6802      	ldr	r2, [r0, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d118      	bne.n	8001690 <HAL_USART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	2080      	movs	r0, #128	; 0x80
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_USART_MspInit+0x44>)
 8001662:	0280      	lsls	r0, r0, #10
 8001664:	69d1      	ldr	r1, [r2, #28]
 8001666:	4301      	orrs	r1, r0
 8001668:	61d1      	str	r1, [r2, #28]
 800166a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	4003      	ands	r3, r0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001674:	231c      	movs	r3, #28
 8001676:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	3b1a      	subs	r3, #26
 800167a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001682:	3303      	adds	r3, #3
 8001684:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001688:	3b02      	subs	r3, #2
 800168a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f7fe ffc2 	bl	8000614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001690:	b007      	add	sp, #28
 8001692:	bd00      	pop	{pc}
 8001694:	40004400 	.word	0x40004400
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
 800169c:	4770      	bx	lr

0800169e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800169e:	e7fe      	b.n	800169e <HardFault_Handler>

080016a0 <SVC_Handler>:
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80016a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a6:	f7fe fde7 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80016aa:	f7fe ff82 	bl	80005b2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80016b0:	2101      	movs	r1, #1
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4002      	ands	r2, r0
 80016c0:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	480e      	ldr	r0, [pc, #56]	; (8001700 <SystemInit+0x50>)
 80016c6:	4002      	ands	r2, r0
 80016c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <SystemInit+0x54>)
 80016ce:	4002      	ands	r2, r0
 80016d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <SystemInit+0x58>)
 80016d6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80016d8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80016da:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	4382      	bics	r2, r0
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80016e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <SystemInit+0x5c>)
 80016e6:	4002      	ands	r2, r0
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80016ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ec:	438a      	bics	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]

}
 80016f4:	4770      	bx	lr
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40021000 	.word	0x40021000
 80016fc:	f8ffb80c 	.word	0xf8ffb80c
 8001700:	fef6ffff 	.word	0xfef6ffff
 8001704:	fffbffff 	.word	0xfffbffff
 8001708:	ffc0ffff 	.word	0xffc0ffff
 800170c:	fffffeac 	.word	0xfffffeac

08001710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001712:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490e      	ldr	r1, [pc, #56]	; (8001750 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0b      	ldr	r4, [pc, #44]	; (800175c <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800173a:	f7ff ffb9 	bl	80016b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800173e:	f000 f811 	bl	8001764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001742:	f7ff fe3b 	bl	80013bc <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   r0, =_estack
 8001748:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001754:	080018e4 	.word	0x080018e4
  ldr r2, =_sbss
 8001758:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800175c:	20000814 	.word	0x20000814

08001760 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_COMP_IRQHandler>
	...

08001764 <__libc_init_array>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	2600      	movs	r6, #0
 8001768:	4d0c      	ldr	r5, [pc, #48]	; (800179c <__libc_init_array+0x38>)
 800176a:	4c0d      	ldr	r4, [pc, #52]	; (80017a0 <__libc_init_array+0x3c>)
 800176c:	1b64      	subs	r4, r4, r5
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	42a6      	cmp	r6, r4
 8001772:	d109      	bne.n	8001788 <__libc_init_array+0x24>
 8001774:	2600      	movs	r6, #0
 8001776:	f000 f82b 	bl	80017d0 <_init>
 800177a:	4d0a      	ldr	r5, [pc, #40]	; (80017a4 <__libc_init_array+0x40>)
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <__libc_init_array+0x44>)
 800177e:	1b64      	subs	r4, r4, r5
 8001780:	10a4      	asrs	r4, r4, #2
 8001782:	42a6      	cmp	r6, r4
 8001784:	d105      	bne.n	8001792 <__libc_init_array+0x2e>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	00b3      	lsls	r3, r6, #2
 800178a:	58eb      	ldr	r3, [r5, r3]
 800178c:	4798      	blx	r3
 800178e:	3601      	adds	r6, #1
 8001790:	e7ee      	b.n	8001770 <__libc_init_array+0xc>
 8001792:	00b3      	lsls	r3, r6, #2
 8001794:	58eb      	ldr	r3, [r5, r3]
 8001796:	4798      	blx	r3
 8001798:	3601      	adds	r6, #1
 800179a:	e7f2      	b.n	8001782 <__libc_init_array+0x1e>
 800179c:	080018dc 	.word	0x080018dc
 80017a0:	080018dc 	.word	0x080018dc
 80017a4:	080018dc 	.word	0x080018dc
 80017a8:	080018e0 	.word	0x080018e0

080017ac <memcpy>:
 80017ac:	2300      	movs	r3, #0
 80017ae:	b510      	push	{r4, lr}
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d100      	bne.n	80017b6 <memcpy+0xa>
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	5ccc      	ldrb	r4, [r1, r3]
 80017b8:	54c4      	strb	r4, [r0, r3]
 80017ba:	3301      	adds	r3, #1
 80017bc:	e7f8      	b.n	80017b0 <memcpy+0x4>

080017be <memset>:
 80017be:	0003      	movs	r3, r0
 80017c0:	1882      	adds	r2, r0, r2
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d100      	bne.n	80017c8 <memset+0xa>
 80017c6:	4770      	bx	lr
 80017c8:	7019      	strb	r1, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	e7f9      	b.n	80017c2 <memset+0x4>
	...

080017d0 <_init>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr

080017dc <_fini>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr
