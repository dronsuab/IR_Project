
D:\Users\APM137\Desktop\UAB\5o\TFG\FreeRTOSEx\Debug\FreeRTOSEx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021cc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e58  20000008  08002308  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e60  08002308  00020e60  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a352  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000355d  00000000  00000000  0003a382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b56a  00000000  00000000  0003d8df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e10  00000000  00000000  00048e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001350  00000000  00000000  00049c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007e20  00000000  00000000  0004afb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000052c3  00000000  00000000  00052dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00058093  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ad0  00000000  00000000  00058110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002274 	.word	0x08002274

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002274 	.word	0x08002274

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f000 fcbe 	bl	8000bcc <HAL_RCC_GetHCLKFreq>
 8000250:	21fa      	movs	r1, #250	; 0xfa
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 f856 	bl	8000308 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800025c:	2001      	movs	r0, #1
 800025e:	2200      	movs	r2, #0
 8000260:	0021      	movs	r1, r4
 8000262:	4240      	negs	r0, r0
 8000264:	f000 f820 	bl	80002a8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	2310      	movs	r3, #16
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
{
 8000270:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	f7ff ffe5 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f001 fedf 	bl	8002040 <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000d68 	.word	0x20000d68

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000d68 	.word	0x20000d68

080002a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002ac:	2800      	cmp	r0, #0
 80002ae:	da14      	bge.n	80002da <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b0:	230f      	movs	r3, #15
 80002b2:	b2c0      	uxtb	r0, r0
 80002b4:	4003      	ands	r3, r0
 80002b6:	3b08      	subs	r3, #8
 80002b8:	4a11      	ldr	r2, [pc, #68]	; (8000300 <HAL_NVIC_SetPriority+0x58>)
 80002ba:	089b      	lsrs	r3, r3, #2
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	189b      	adds	r3, r3, r2
 80002c0:	2203      	movs	r2, #3
 80002c2:	4010      	ands	r0, r2
 80002c4:	4090      	lsls	r0, r2
 80002c6:	32fc      	adds	r2, #252	; 0xfc
 80002c8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ca:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ce:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	69dc      	ldr	r4, [r3, #28]
 80002d2:	43ac      	bics	r4, r5
 80002d4:	4321      	orrs	r1, r4
 80002d6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002da:	2503      	movs	r5, #3
 80002dc:	0883      	lsrs	r3, r0, #2
 80002de:	4028      	ands	r0, r5
 80002e0:	40a8      	lsls	r0, r5
 80002e2:	35fc      	adds	r5, #252	; 0xfc
 80002e4:	002e      	movs	r6, r5
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <HAL_NVIC_SetPriority+0x5c>)
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	189b      	adds	r3, r3, r2
 80002ec:	22c0      	movs	r2, #192	; 0xc0
 80002ee:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	4029      	ands	r1, r5
 80002f2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f4:	0092      	lsls	r2, r2, #2
 80002f6:	589c      	ldr	r4, [r3, r2]
 80002f8:	43b4      	bics	r4, r6
 80002fa:	4321      	orrs	r1, r4
 80002fc:	5099      	str	r1, [r3, r2]
 80002fe:	e7eb      	b.n	80002d8 <HAL_NVIC_SetPriority+0x30>
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	e000e100 	.word	0xe000e100

08000308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <HAL_SYSTICK_Config+0x28>)
 800030a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800030c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030e:	4293      	cmp	r3, r2
 8000310:	d80d      	bhi.n	800032e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000312:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	6a03      	ldr	r3, [r0, #32]
 800031c:	0609      	lsls	r1, r1, #24
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	430b      	orrs	r3, r1
 8000324:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000326:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000328:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800032a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032e:	4770      	bx	lr
 8000330:	00ffffff 	.word	0x00ffffff
 8000334:	e000e010 	.word	0xe000e010
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800033e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000340:	2804      	cmp	r0, #4
 8000342:	d102      	bne.n	800034a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000344:	4310      	orrs	r0, r2
 8000346:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000348:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800034a:	2104      	movs	r1, #4
 800034c:	438a      	bics	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	e7fa      	b.n	8000348 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	e000e010 	.word	0xe000e010

08000358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035a:	680b      	ldr	r3, [r1, #0]
{ 
 800035c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000360:	2300      	movs	r3, #0
{ 
 8000362:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000364:	9a02      	ldr	r2, [sp, #8]
 8000366:	40da      	lsrs	r2, r3
 8000368:	d101      	bne.n	800036e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800036a:	b007      	add	sp, #28
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800036e:	2201      	movs	r2, #1
 8000370:	409a      	lsls	r2, r3
 8000372:	9203      	str	r2, [sp, #12]
 8000374:	9903      	ldr	r1, [sp, #12]
 8000376:	9a02      	ldr	r2, [sp, #8]
 8000378:	400a      	ands	r2, r1
 800037a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800037c:	d100      	bne.n	8000380 <HAL_GPIO_Init+0x28>
 800037e:	e08c      	b.n	800049a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000380:	9a01      	ldr	r2, [sp, #4]
 8000382:	2110      	movs	r1, #16
 8000384:	6852      	ldr	r2, [r2, #4]
 8000386:	0016      	movs	r6, r2
 8000388:	438e      	bics	r6, r1
 800038a:	2e02      	cmp	r6, #2
 800038c:	d10e      	bne.n	80003ac <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800038e:	2507      	movs	r5, #7
 8000390:	401d      	ands	r5, r3
 8000392:	00ad      	lsls	r5, r5, #2
 8000394:	3901      	subs	r1, #1
 8000396:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000398:	08dc      	lsrs	r4, r3, #3
 800039a:	00a4      	lsls	r4, r4, #2
 800039c:	1904      	adds	r4, r0, r4
 800039e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003a2:	9901      	ldr	r1, [sp, #4]
 80003a4:	6909      	ldr	r1, [r1, #16]
 80003a6:	40a9      	lsls	r1, r5
 80003a8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003aa:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003ac:	2403      	movs	r4, #3
 80003ae:	005f      	lsls	r7, r3, #1
 80003b0:	40bc      	lsls	r4, r7
 80003b2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003b4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003b8:	4025      	ands	r5, r4
 80003ba:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003bc:	2503      	movs	r5, #3
 80003be:	4015      	ands	r5, r2
 80003c0:	40bd      	lsls	r5, r7
 80003c2:	4661      	mov	r1, ip
 80003c4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003c6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c8:	2e01      	cmp	r6, #1
 80003ca:	d80f      	bhi.n	80003ec <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003cc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003ce:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d4:	40bd      	lsls	r5, r7
 80003d6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003d8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003da:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003dc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003de:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e2:	2101      	movs	r1, #1
 80003e4:	400d      	ands	r5, r1
 80003e6:	409d      	lsls	r5, r3
 80003e8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003ea:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ec:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ee:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003fc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fe:	420a      	tst	r2, r1
 8000400:	d04b      	beq.n	800049a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	2101      	movs	r1, #1
 8000404:	4c26      	ldr	r4, [pc, #152]	; (80004a0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000406:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000408:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	430d      	orrs	r5, r1
 800040e:	61a5      	str	r5, [r4, #24]
 8000410:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000412:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000414:	400c      	ands	r4, r1
 8000416:	9405      	str	r4, [sp, #20]
 8000418:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041a:	240f      	movs	r4, #15
 800041c:	4921      	ldr	r1, [pc, #132]	; (80004a4 <HAL_GPIO_Init+0x14c>)
 800041e:	00ad      	lsls	r5, r5, #2
 8000420:	00b6      	lsls	r6, r6, #2
 8000422:	186d      	adds	r5, r5, r1
 8000424:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000426:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000428:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800042c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	2400      	movs	r4, #0
 8000430:	4288      	cmp	r0, r1
 8000432:	d00c      	beq.n	800044e <HAL_GPIO_Init+0xf6>
 8000434:	491c      	ldr	r1, [pc, #112]	; (80004a8 <HAL_GPIO_Init+0x150>)
 8000436:	3401      	adds	r4, #1
 8000438:	4288      	cmp	r0, r1
 800043a:	d008      	beq.n	800044e <HAL_GPIO_Init+0xf6>
 800043c:	491b      	ldr	r1, [pc, #108]	; (80004ac <HAL_GPIO_Init+0x154>)
 800043e:	3401      	adds	r4, #1
 8000440:	4288      	cmp	r0, r1
 8000442:	d004      	beq.n	800044e <HAL_GPIO_Init+0xf6>
 8000444:	491a      	ldr	r1, [pc, #104]	; (80004b0 <HAL_GPIO_Init+0x158>)
 8000446:	3403      	adds	r4, #3
 8000448:	4288      	cmp	r0, r1
 800044a:	d100      	bne.n	800044e <HAL_GPIO_Init+0xf6>
 800044c:	3c02      	subs	r4, #2
 800044e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000450:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000452:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000454:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000456:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000458:	4c16      	ldr	r4, [pc, #88]	; (80004b4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800045a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800045c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800045e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000460:	03d1      	lsls	r1, r2, #15
 8000462:	d401      	bmi.n	8000468 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000464:	003e      	movs	r6, r7
 8000466:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000468:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800046a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800046c:	9e00      	ldr	r6, [sp, #0]
 800046e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000470:	0391      	lsls	r1, r2, #14
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000474:	003e      	movs	r6, r7
 8000476:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000478:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800047a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800047c:	9e00      	ldr	r6, [sp, #0]
 800047e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000480:	02d1      	lsls	r1, r2, #11
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000484:	003e      	movs	r6, r7
 8000486:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000488:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800048a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800048c:	9f00      	ldr	r7, [sp, #0]
 800048e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000490:	0292      	lsls	r2, r2, #10
 8000492:	d401      	bmi.n	8000498 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000494:	402e      	ands	r6, r5
 8000496:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000498:	60e7      	str	r7, [r4, #12]
    position++;
 800049a:	3301      	adds	r3, #1
 800049c:	e762      	b.n	8000364 <HAL_GPIO_Init+0xc>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000
 80004a8:	48000400 	.word	0x48000400
 80004ac:	48000800 	.word	0x48000800
 80004b0:	48000c00 	.word	0x48000c00
 80004b4:	40010400 	.word	0x40010400

080004b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d001      	beq.n	80004c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004bc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004be:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004c0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004c2:	e7fc      	b.n	80004be <HAL_GPIO_WritePin+0x6>

080004c4 <IRDA_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status the new flag status (SET or RESET). The function is locked in a while loop as long as the flag remains set to Status.
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	0004      	movs	r4, r0
 80004c8:	000e      	movs	r6, r1
 80004ca:	0017      	movs	r7, r2
 80004cc:	001d      	movs	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 80004ce:	6822      	ldr	r2, [r4, #0]
 80004d0:	69d3      	ldr	r3, [r2, #28]
 80004d2:	4033      	ands	r3, r6
 80004d4:	429e      	cmp	r6, r3
 80004d6:	d101      	bne.n	80004dc <IRDA_WaitOnFlagUntilTimeout.constprop.3+0x18>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
 80004da:	e016      	b.n	800050a <IRDA_WaitOnFlagUntilTimeout.constprop.3+0x46>
    if(Timeout != HAL_MAX_DELAY)
 80004dc:	1c6b      	adds	r3, r5, #1
 80004de:	d0f7      	beq.n	80004d0 <IRDA_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d113      	bne.n	800050c <IRDA_WaitOnFlagUntilTimeout.constprop.3+0x48>
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	490c      	ldr	r1, [pc, #48]	; (8000518 <IRDA_WaitOnFlagUntilTimeout.constprop.3+0x54>)
 80004e8:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(hirda);
 80004ea:	2003      	movs	r0, #3
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80004ec:	400a      	ands	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	31a3      	adds	r1, #163	; 0xa3
 80004f4:	31ff      	adds	r1, #255	; 0xff
 80004f6:	438a      	bics	r2, r1
 80004f8:	609a      	str	r2, [r3, #8]
        hirda->gState  = HAL_IRDA_STATE_READY;
 80004fa:	0022      	movs	r2, r4
 80004fc:	2320      	movs	r3, #32
 80004fe:	3235      	adds	r2, #53	; 0x35
 8000500:	7013      	strb	r3, [r2, #0]
        hirda->RxState = HAL_IRDA_STATE_READY;
 8000502:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(hirda);
 8000504:	2300      	movs	r3, #0
 8000506:	3434      	adds	r4, #52	; 0x34
 8000508:	7023      	strb	r3, [r4, #0]
}
 800050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800050c:	f7ff fec6 	bl	800029c <HAL_GetTick>
 8000510:	1bc0      	subs	r0, r0, r7
 8000512:	4285      	cmp	r5, r0
 8000514:	d2db      	bcs.n	80004ce <IRDA_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000516:	e7e5      	b.n	80004e4 <IRDA_WaitOnFlagUntilTimeout.constprop.3+0x20>
 8000518:	fffffe5f 	.word	0xfffffe5f

0800051c <HAL_IRDA_Init>:
{
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	1e04      	subs	r4, r0, #0
  if(hirda == NULL)
 8000520:	d101      	bne.n	8000526 <HAL_IRDA_Init+0xa>
    return HAL_ERROR;
 8000522:	2001      	movs	r0, #1
 8000524:	e098      	b.n	8000658 <HAL_IRDA_Init+0x13c>
  if(hirda->gState == HAL_IRDA_STATE_RESET)
 8000526:	0007      	movs	r7, r0
 8000528:	3735      	adds	r7, #53	; 0x35
 800052a:	783b      	ldrb	r3, [r7, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d104      	bne.n	800053c <HAL_IRDA_Init+0x20>
    hirda->Lock = HAL_UNLOCKED;
 8000532:	0002      	movs	r2, r0
 8000534:	3234      	adds	r2, #52	; 0x34
 8000536:	7013      	strb	r3, [r2, #0]
    HAL_IRDA_MspInit(hirda);
 8000538:	f001 fdb6 	bl	80020a8 <HAL_IRDA_MspInit>
  hirda->gState = HAL_IRDA_STATE_BUSY;
 800053c:	2324      	movs	r3, #36	; 0x24
  __HAL_IRDA_DISABLE(hirda);
 800053e:	2201      	movs	r2, #1
 8000540:	6825      	ldr	r5, [r4, #0]
  hirda->gState = HAL_IRDA_STATE_BUSY;
 8000542:	703b      	strb	r3, [r7, #0]
  __HAL_IRDA_DISABLE(hirda);
 8000544:	682b      	ldr	r3, [r5, #0]
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8000546:	68e1      	ldr	r1, [r4, #12]
  __HAL_IRDA_DISABLE(hirda);
 8000548:	4393      	bics	r3, r2
 800054a:	602b      	str	r3, [r5, #0]
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 800054c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 800054e:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8000550:	430b      	orrs	r3, r1
 8000552:	6921      	ldr	r1, [r4, #16]
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 8000554:	4e41      	ldr	r6, [pc, #260]	; (800065c <HAL_IRDA_Init+0x140>)
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8000556:	430b      	orrs	r3, r1
  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 8000558:	4941      	ldr	r1, [pc, #260]	; (8000660 <HAL_IRDA_Init+0x144>)
 800055a:	400a      	ands	r2, r1
 800055c:	4313      	orrs	r3, r2
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 800055e:	2204      	movs	r2, #4
  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 8000560:	602b      	str	r3, [r5, #0]
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 8000562:	68ab      	ldr	r3, [r5, #8]
 8000564:	4393      	bics	r3, r2
 8000566:	8ae2      	ldrh	r2, [r4, #22]
 8000568:	4313      	orrs	r3, r2
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 800056a:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 800056c:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 800056e:	692b      	ldr	r3, [r5, #16]
 8000570:	4393      	bics	r3, r2
 8000572:	7d22      	ldrb	r2, [r4, #20]
 8000574:	4313      	orrs	r3, r2
 8000576:	612b      	str	r3, [r5, #16]
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 8000578:	42b5      	cmp	r5, r6
 800057a:	d10e      	bne.n	800059a <HAL_IRDA_Init+0x7e>
 800057c:	2203      	movs	r2, #3
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <HAL_IRDA_Init+0x148>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4013      	ands	r3, r2
  switch (clocksource)
 8000584:	4a38      	ldr	r2, [pc, #224]	; (8000668 <HAL_IRDA_Init+0x14c>)
 8000586:	5cd0      	ldrb	r0, [r2, r3]
 8000588:	2808      	cmp	r0, #8
 800058a:	d8ca      	bhi.n	8000522 <HAL_IRDA_Init+0x6>
 800058c:	f7ff fdbc 	bl	8000108 <__gnu_thumb1_case_sqi>
 8000590:	c945c908 	.word	0xc945c908
 8000594:	c9c9c94f 	.word	0xc9c9c94f
 8000598:	54          	.byte	0x54
 8000599:	00          	.byte	0x00
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <HAL_IRDA_Init+0x150>)
 800059c:	429d      	cmp	r5, r3
 800059e:	d1c0      	bne.n	8000522 <HAL_IRDA_Init+0x6>
      hirda->Instance->BRR = (uint16_t)((HAL_RCC_GetPCLK1Freq() + (hirda->Init.BaudRate/2)) / hirda->Init.BaudRate);
 80005a0:	f000 fb1a 	bl	8000bd8 <HAL_RCC_GetPCLK1Freq>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	6861      	ldr	r1, [r4, #4]
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	1818      	adds	r0, r3, r0
 80005ac:	f7ff fdc0 	bl	8000130 <__udivsi3>
 80005b0:	b280      	uxth	r0, r0
 80005b2:	60e8      	str	r0, [r5, #12]
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	492e      	ldr	r1, [pc, #184]	; (8000670 <HAL_IRDA_Init+0x154>)
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	400a      	ands	r2, r1
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 80005bc:	2128      	movs	r1, #40	; 0x28
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 80005be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	438a      	bics	r2, r1
 80005c4:	609a      	str	r2, [r3, #8]
  hirda->Instance->CR3 |= USART_CR3_IREN;
 80005c6:	2202      	movs	r2, #2
 80005c8:	6899      	ldr	r1, [r3, #8]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	609a      	str	r2, [r3, #8]
  __HAL_IRDA_ENABLE(hirda);
 80005ce:	2201      	movs	r2, #1
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	601a      	str	r2, [r3, #0]
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63a3      	str	r3, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80005da:	f7ff fe5f 	bl	800029c <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(hirda->Instance))
 80005de:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80005e0:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(hirda->Instance))
 80005e2:	42b3      	cmp	r3, r6
 80005e4:	d110      	bne.n	8000608 <HAL_IRDA_Init+0xec>
    if((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80005e6:	6833      	ldr	r3, [r6, #0]
 80005e8:	071b      	lsls	r3, r3, #28
 80005ea:	d42a      	bmi.n	8000642 <HAL_IRDA_Init+0x126>
    if((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	075b      	lsls	r3, r3, #29
 80005f2:	d509      	bpl.n	8000608 <HAL_IRDA_Init+0xec>
      if(IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 80005f4:	23fa      	movs	r3, #250	; 0xfa
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	002a      	movs	r2, r5
 80005fc:	03c9      	lsls	r1, r1, #15
 80005fe:	0020      	movs	r0, r4
 8000600:	f7ff ff60 	bl	80004c4 <IRDA_WaitOnFlagUntilTimeout.constprop.3>
 8000604:	2800      	cmp	r0, #0
 8000606:	d126      	bne.n	8000656 <HAL_IRDA_Init+0x13a>
  hirda->RxState = HAL_IRDA_STATE_READY;
 8000608:	0022      	movs	r2, r4
  hirda->gState  = HAL_IRDA_STATE_READY;
 800060a:	2320      	movs	r3, #32
  __HAL_UNLOCK(hirda);
 800060c:	2000      	movs	r0, #0
  hirda->RxState = HAL_IRDA_STATE_READY;
 800060e:	3236      	adds	r2, #54	; 0x36
  __HAL_UNLOCK(hirda);
 8000610:	3434      	adds	r4, #52	; 0x34
  hirda->gState  = HAL_IRDA_STATE_READY;
 8000612:	703b      	strb	r3, [r7, #0]
  hirda->RxState = HAL_IRDA_STATE_READY;
 8000614:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hirda);
 8000616:	7020      	strb	r0, [r4, #0]
 8000618:	e01e      	b.n	8000658 <HAL_IRDA_Init+0x13c>
      hirda->Instance->BRR = (uint16_t)((HSI_VALUE + (hirda->Init.BaudRate/2)) / hirda->Init.BaudRate);
 800061a:	6863      	ldr	r3, [r4, #4]
 800061c:	0858      	lsrs	r0, r3, #1
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_IRDA_Init+0x158>)
      hirda->Instance->BRR = (uint16_t)((LSE_VALUE  + (hirda->Init.BaudRate/2)) / hirda->Init.BaudRate);
 8000620:	6861      	ldr	r1, [r4, #4]
 8000622:	18c0      	adds	r0, r0, r3
 8000624:	f7ff fd84 	bl	8000130 <__udivsi3>
 8000628:	b280      	uxth	r0, r0
 800062a:	60f0      	str	r0, [r6, #12]
 800062c:	e7c2      	b.n	80005b4 <HAL_IRDA_Init+0x98>
      hirda->Instance->BRR = (uint16_t)((HAL_RCC_GetSysClockFreq() + (hirda->Init.BaudRate/2)) / hirda->Init.BaudRate);
 800062e:	f000 fa05 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	e7f3      	b.n	8000620 <HAL_IRDA_Init+0x104>
      hirda->Instance->BRR = (uint16_t)((LSE_VALUE  + (hirda->Init.BaudRate/2)) / hirda->Init.BaudRate);
 8000638:	6863      	ldr	r3, [r4, #4]
 800063a:	0858      	lsrs	r0, r3, #1
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	e7ee      	b.n	8000620 <HAL_IRDA_Init+0x104>
      if(IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8000642:	23fa      	movs	r3, #250	; 0xfa
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	002a      	movs	r2, r5
 800064a:	0389      	lsls	r1, r1, #14
 800064c:	0020      	movs	r0, r4
 800064e:	f7ff ff39 	bl	80004c4 <IRDA_WaitOnFlagUntilTimeout.constprop.3>
 8000652:	2800      	cmp	r0, #0
 8000654:	d0ca      	beq.n	80005ec <HAL_IRDA_Init+0xd0>
        return HAL_TIMEOUT;
 8000656:	2003      	movs	r0, #3
}
 8000658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40013800 	.word	0x40013800
 8000660:	ffffe9f3 	.word	0xffffe9f3
 8000664:	40021000 	.word	0x40021000
 8000668:	080022c0 	.word	0x080022c0
 800066c:	40004400 	.word	0x40004400
 8000670:	ffff87ff 	.word	0xffff87ff
 8000674:	007a1200 	.word	0x007a1200

08000678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800067a:	6803      	ldr	r3, [r0, #0]
{
 800067c:	b085      	sub	sp, #20
 800067e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000680:	07db      	lsls	r3, r3, #31
 8000682:	d42f      	bmi.n	80006e4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	079b      	lsls	r3, r3, #30
 8000688:	d500      	bpl.n	800068c <HAL_RCC_OscConfig+0x14>
 800068a:	e081      	b.n	8000790 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800068c:	682b      	ldr	r3, [r5, #0]
 800068e:	071b      	lsls	r3, r3, #28
 8000690:	d500      	bpl.n	8000694 <HAL_RCC_OscConfig+0x1c>
 8000692:	e0bc      	b.n	800080e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000694:	682b      	ldr	r3, [r5, #0]
 8000696:	075b      	lsls	r3, r3, #29
 8000698:	d500      	bpl.n	800069c <HAL_RCC_OscConfig+0x24>
 800069a:	e0df      	b.n	800085c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800069c:	682b      	ldr	r3, [r5, #0]
 800069e:	06db      	lsls	r3, r3, #27
 80006a0:	d51a      	bpl.n	80006d8 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80006a2:	696a      	ldr	r2, [r5, #20]
 80006a4:	4cb5      	ldr	r4, [pc, #724]	; (800097c <HAL_RCC_OscConfig+0x304>)
 80006a6:	2304      	movs	r3, #4
 80006a8:	2a01      	cmp	r2, #1
 80006aa:	d000      	beq.n	80006ae <HAL_RCC_OscConfig+0x36>
 80006ac:	e14b      	b.n	8000946 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80006ae:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80006b0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80006b2:	430b      	orrs	r3, r1
 80006b4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80006b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80006b8:	431a      	orrs	r2, r3
 80006ba:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80006bc:	f7ff fdee 	bl	800029c <HAL_GetTick>
 80006c0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80006c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80006c4:	4233      	tst	r3, r6
 80006c6:	d100      	bne.n	80006ca <HAL_RCC_OscConfig+0x52>
 80006c8:	e136      	b.n	8000938 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80006ca:	21f8      	movs	r1, #248	; 0xf8
 80006cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006ce:	69ab      	ldr	r3, [r5, #24]
 80006d0:	438a      	bics	r2, r1
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006d8:	6a29      	ldr	r1, [r5, #32]
 80006da:	2900      	cmp	r1, #0
 80006dc:	d000      	beq.n	80006e0 <HAL_RCC_OscConfig+0x68>
 80006de:	e159      	b.n	8000994 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80006e0:	2000      	movs	r0, #0
 80006e2:	e013      	b.n	800070c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006e4:	210c      	movs	r1, #12
 80006e6:	4ca5      	ldr	r4, [pc, #660]	; (800097c <HAL_RCC_OscConfig+0x304>)
 80006e8:	6862      	ldr	r2, [r4, #4]
 80006ea:	400a      	ands	r2, r1
 80006ec:	2a04      	cmp	r2, #4
 80006ee:	d006      	beq.n	80006fe <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006f0:	6863      	ldr	r3, [r4, #4]
 80006f2:	400b      	ands	r3, r1
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	d10b      	bne.n	8000710 <HAL_RCC_OscConfig+0x98>
 80006f8:	6863      	ldr	r3, [r4, #4]
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	d508      	bpl.n	8000710 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	039b      	lsls	r3, r3, #14
 8000702:	d5bf      	bpl.n	8000684 <HAL_RCC_OscConfig+0xc>
 8000704:	686b      	ldr	r3, [r5, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1bc      	bne.n	8000684 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800070a:	2001      	movs	r0, #1
}
 800070c:	b005      	add	sp, #20
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000710:	686b      	ldr	r3, [r5, #4]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d113      	bne.n	800073e <HAL_RCC_OscConfig+0xc6>
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	6822      	ldr	r2, [r4, #0]
 800071a:	025b      	lsls	r3, r3, #9
 800071c:	4313      	orrs	r3, r2
 800071e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000720:	f7ff fdbc 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000724:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000726:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000728:	02b6      	lsls	r6, r6, #10
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	4233      	tst	r3, r6
 800072e:	d1a9      	bne.n	8000684 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000730:	f7ff fdb4 	bl	800029c <HAL_GetTick>
 8000734:	1bc0      	subs	r0, r0, r7
 8000736:	2864      	cmp	r0, #100	; 0x64
 8000738:	d9f7      	bls.n	800072a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800073a:	2003      	movs	r0, #3
 800073c:	e7e6      	b.n	800070c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800073e:	2b00      	cmp	r3, #0
 8000740:	d116      	bne.n	8000770 <HAL_RCC_OscConfig+0xf8>
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	4a8e      	ldr	r2, [pc, #568]	; (8000980 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000746:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000748:	4013      	ands	r3, r2
 800074a:	6023      	str	r3, [r4, #0]
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	4a8d      	ldr	r2, [pc, #564]	; (8000984 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000750:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000752:	4013      	ands	r3, r2
 8000754:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000756:	f7ff fda1 	bl	800029c <HAL_GetTick>
 800075a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	4233      	tst	r3, r6
 8000760:	d100      	bne.n	8000764 <HAL_RCC_OscConfig+0xec>
 8000762:	e78f      	b.n	8000684 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000764:	f7ff fd9a 	bl	800029c <HAL_GetTick>
 8000768:	1bc0      	subs	r0, r0, r7
 800076a:	2864      	cmp	r0, #100	; 0x64
 800076c:	d9f6      	bls.n	800075c <HAL_RCC_OscConfig+0xe4>
 800076e:	e7e4      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000770:	2b05      	cmp	r3, #5
 8000772:	d105      	bne.n	8000780 <HAL_RCC_OscConfig+0x108>
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	6822      	ldr	r2, [r4, #0]
 8000778:	02db      	lsls	r3, r3, #11
 800077a:	4313      	orrs	r3, r2
 800077c:	6023      	str	r3, [r4, #0]
 800077e:	e7ca      	b.n	8000716 <HAL_RCC_OscConfig+0x9e>
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	4a7f      	ldr	r2, [pc, #508]	; (8000980 <HAL_RCC_OscConfig+0x308>)
 8000784:	4013      	ands	r3, r2
 8000786:	6023      	str	r3, [r4, #0]
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	4a7e      	ldr	r2, [pc, #504]	; (8000984 <HAL_RCC_OscConfig+0x30c>)
 800078c:	4013      	ands	r3, r2
 800078e:	e7c6      	b.n	800071e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000790:	220c      	movs	r2, #12
 8000792:	4c7a      	ldr	r4, [pc, #488]	; (800097c <HAL_RCC_OscConfig+0x304>)
 8000794:	6863      	ldr	r3, [r4, #4]
 8000796:	4213      	tst	r3, r2
 8000798:	d006      	beq.n	80007a8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800079a:	6863      	ldr	r3, [r4, #4]
 800079c:	4013      	ands	r3, r2
 800079e:	2b08      	cmp	r3, #8
 80007a0:	d110      	bne.n	80007c4 <HAL_RCC_OscConfig+0x14c>
 80007a2:	6863      	ldr	r3, [r4, #4]
 80007a4:	03db      	lsls	r3, r3, #15
 80007a6:	d40d      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	079b      	lsls	r3, r3, #30
 80007ac:	d502      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x13c>
 80007ae:	68eb      	ldr	r3, [r5, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d1aa      	bne.n	800070a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007b4:	21f8      	movs	r1, #248	; 0xf8
 80007b6:	6822      	ldr	r2, [r4, #0]
 80007b8:	692b      	ldr	r3, [r5, #16]
 80007ba:	438a      	bics	r2, r1
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4313      	orrs	r3, r2
 80007c0:	6023      	str	r3, [r4, #0]
 80007c2:	e763      	b.n	800068c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007c4:	68ea      	ldr	r2, [r5, #12]
 80007c6:	2301      	movs	r3, #1
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	d00f      	beq.n	80007ec <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80007cc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ce:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80007d0:	4313      	orrs	r3, r2
 80007d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007d4:	f7ff fd62 	bl	800029c <HAL_GetTick>
 80007d8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	4233      	tst	r3, r6
 80007de:	d1e9      	bne.n	80007b4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007e0:	f7ff fd5c 	bl	800029c <HAL_GetTick>
 80007e4:	1bc0      	subs	r0, r0, r7
 80007e6:	2802      	cmp	r0, #2
 80007e8:	d9f7      	bls.n	80007da <HAL_RCC_OscConfig+0x162>
 80007ea:	e7a6      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80007ec:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ee:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80007f0:	439a      	bics	r2, r3
 80007f2:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80007f4:	f7ff fd52 	bl	800029c <HAL_GetTick>
 80007f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	4233      	tst	r3, r6
 80007fe:	d100      	bne.n	8000802 <HAL_RCC_OscConfig+0x18a>
 8000800:	e744      	b.n	800068c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000802:	f7ff fd4b 	bl	800029c <HAL_GetTick>
 8000806:	1bc0      	subs	r0, r0, r7
 8000808:	2802      	cmp	r0, #2
 800080a:	d9f6      	bls.n	80007fa <HAL_RCC_OscConfig+0x182>
 800080c:	e795      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800080e:	69ea      	ldr	r2, [r5, #28]
 8000810:	2301      	movs	r3, #1
 8000812:	4c5a      	ldr	r4, [pc, #360]	; (800097c <HAL_RCC_OscConfig+0x304>)
 8000814:	2a00      	cmp	r2, #0
 8000816:	d010      	beq.n	800083a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000818:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800081a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800081c:	4313      	orrs	r3, r2
 800081e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000820:	f7ff fd3c 	bl	800029c <HAL_GetTick>
 8000824:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000828:	4233      	tst	r3, r6
 800082a:	d000      	beq.n	800082e <HAL_RCC_OscConfig+0x1b6>
 800082c:	e732      	b.n	8000694 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800082e:	f7ff fd35 	bl	800029c <HAL_GetTick>
 8000832:	1bc0      	subs	r0, r0, r7
 8000834:	2802      	cmp	r0, #2
 8000836:	d9f6      	bls.n	8000826 <HAL_RCC_OscConfig+0x1ae>
 8000838:	e77f      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800083a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800083c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800083e:	439a      	bics	r2, r3
 8000840:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000842:	f7ff fd2b 	bl	800029c <HAL_GetTick>
 8000846:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800084a:	4233      	tst	r3, r6
 800084c:	d100      	bne.n	8000850 <HAL_RCC_OscConfig+0x1d8>
 800084e:	e721      	b.n	8000694 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000850:	f7ff fd24 	bl	800029c <HAL_GetTick>
 8000854:	1bc0      	subs	r0, r0, r7
 8000856:	2802      	cmp	r0, #2
 8000858:	d9f6      	bls.n	8000848 <HAL_RCC_OscConfig+0x1d0>
 800085a:	e76e      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800085c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800085e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000860:	4c46      	ldr	r4, [pc, #280]	; (800097c <HAL_RCC_OscConfig+0x304>)
 8000862:	0552      	lsls	r2, r2, #21
 8000864:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000866:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000868:	4213      	tst	r3, r2
 800086a:	d108      	bne.n	800087e <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	69e3      	ldr	r3, [r4, #28]
 800086e:	4313      	orrs	r3, r2
 8000870:	61e3      	str	r3, [r4, #28]
 8000872:	69e3      	ldr	r3, [r4, #28]
 8000874:	4013      	ands	r3, r2
 8000876:	9303      	str	r3, [sp, #12]
 8000878:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800087a:	2301      	movs	r3, #1
 800087c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087e:	2780      	movs	r7, #128	; 0x80
 8000880:	4e41      	ldr	r6, [pc, #260]	; (8000988 <HAL_RCC_OscConfig+0x310>)
 8000882:	007f      	lsls	r7, r7, #1
 8000884:	6833      	ldr	r3, [r6, #0]
 8000886:	423b      	tst	r3, r7
 8000888:	d006      	beq.n	8000898 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800088a:	68ab      	ldr	r3, [r5, #8]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d113      	bne.n	80008b8 <HAL_RCC_OscConfig+0x240>
 8000890:	6a22      	ldr	r2, [r4, #32]
 8000892:	4313      	orrs	r3, r2
 8000894:	6223      	str	r3, [r4, #32]
 8000896:	e030      	b.n	80008fa <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000898:	6833      	ldr	r3, [r6, #0]
 800089a:	433b      	orrs	r3, r7
 800089c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800089e:	f7ff fcfd 	bl	800029c <HAL_GetTick>
 80008a2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008a4:	6833      	ldr	r3, [r6, #0]
 80008a6:	423b      	tst	r3, r7
 80008a8:	d1ef      	bne.n	800088a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008aa:	f7ff fcf7 	bl	800029c <HAL_GetTick>
 80008ae:	9b01      	ldr	r3, [sp, #4]
 80008b0:	1ac0      	subs	r0, r0, r3
 80008b2:	2864      	cmp	r0, #100	; 0x64
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0x22c>
 80008b6:	e740      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
 80008b8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d114      	bne.n	80008e8 <HAL_RCC_OscConfig+0x270>
 80008be:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008c0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c2:	4393      	bics	r3, r2
 80008c4:	6223      	str	r3, [r4, #32]
 80008c6:	6a23      	ldr	r3, [r4, #32]
 80008c8:	3203      	adds	r2, #3
 80008ca:	4393      	bics	r3, r2
 80008cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008ce:	f7ff fce5 	bl	800029c <HAL_GetTick>
 80008d2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d4:	6a23      	ldr	r3, [r4, #32]
 80008d6:	423b      	tst	r3, r7
 80008d8:	d025      	beq.n	8000926 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008da:	f7ff fcdf 	bl	800029c <HAL_GetTick>
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <HAL_RCC_OscConfig+0x314>)
 80008e0:	1b80      	subs	r0, r0, r6
 80008e2:	4298      	cmp	r0, r3
 80008e4:	d9f6      	bls.n	80008d4 <HAL_RCC_OscConfig+0x25c>
 80008e6:	e728      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	d10b      	bne.n	8000904 <HAL_RCC_OscConfig+0x28c>
 80008ec:	6a21      	ldr	r1, [r4, #32]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6223      	str	r3, [r4, #32]
 80008f4:	6a23      	ldr	r3, [r4, #32]
 80008f6:	431a      	orrs	r2, r3
 80008f8:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80008fa:	f7ff fccf 	bl	800029c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008fe:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000900:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000902:	e00d      	b.n	8000920 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000904:	6a23      	ldr	r3, [r4, #32]
 8000906:	4393      	bics	r3, r2
 8000908:	2204      	movs	r2, #4
 800090a:	6223      	str	r3, [r4, #32]
 800090c:	6a23      	ldr	r3, [r4, #32]
 800090e:	4393      	bics	r3, r2
 8000910:	e7c0      	b.n	8000894 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000912:	f7ff fcc3 	bl	800029c <HAL_GetTick>
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_RCC_OscConfig+0x314>)
 8000918:	1b80      	subs	r0, r0, r6
 800091a:	4298      	cmp	r0, r3
 800091c:	d900      	bls.n	8000920 <HAL_RCC_OscConfig+0x2a8>
 800091e:	e70c      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000920:	6a23      	ldr	r3, [r4, #32]
 8000922:	423b      	tst	r3, r7
 8000924:	d0f5      	beq.n	8000912 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000926:	9b00      	ldr	r3, [sp, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d000      	beq.n	800092e <HAL_RCC_OscConfig+0x2b6>
 800092c:	e6b6      	b.n	800069c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800092e:	69e3      	ldr	r3, [r4, #28]
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_RCC_OscConfig+0x318>)
 8000932:	4013      	ands	r3, r2
 8000934:	61e3      	str	r3, [r4, #28]
 8000936:	e6b1      	b.n	800069c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000938:	f7ff fcb0 	bl	800029c <HAL_GetTick>
 800093c:	1bc0      	subs	r0, r0, r7
 800093e:	2802      	cmp	r0, #2
 8000940:	d800      	bhi.n	8000944 <HAL_RCC_OscConfig+0x2cc>
 8000942:	e6be      	b.n	80006c2 <HAL_RCC_OscConfig+0x4a>
 8000944:	e6f9      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000946:	3205      	adds	r2, #5
 8000948:	d103      	bne.n	8000952 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 800094a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800094c:	439a      	bics	r2, r3
 800094e:	6362      	str	r2, [r4, #52]	; 0x34
 8000950:	e6bb      	b.n	80006ca <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000952:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000954:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000956:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000958:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800095a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800095c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800095e:	4393      	bics	r3, r2
 8000960:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000962:	f7ff fc9b 	bl	800029c <HAL_GetTick>
 8000966:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800096a:	4233      	tst	r3, r6
 800096c:	d100      	bne.n	8000970 <HAL_RCC_OscConfig+0x2f8>
 800096e:	e6b3      	b.n	80006d8 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000970:	f7ff fc94 	bl	800029c <HAL_GetTick>
 8000974:	1bc0      	subs	r0, r0, r7
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <HAL_RCC_OscConfig+0x2f0>
 800097a:	e6de      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
 800097c:	40021000 	.word	0x40021000
 8000980:	fffeffff 	.word	0xfffeffff
 8000984:	fffbffff 	.word	0xfffbffff
 8000988:	40007000 	.word	0x40007000
 800098c:	00001388 	.word	0x00001388
 8000990:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000994:	220c      	movs	r2, #12
 8000996:	4c26      	ldr	r4, [pc, #152]	; (8000a30 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000998:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800099a:	6863      	ldr	r3, [r4, #4]
 800099c:	4013      	ands	r3, r2
 800099e:	2b08      	cmp	r3, #8
 80009a0:	d100      	bne.n	80009a4 <HAL_RCC_OscConfig+0x32c>
 80009a2:	e6b3      	b.n	800070c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <HAL_RCC_OscConfig+0x3bc>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009ac:	2902      	cmp	r1, #2
 80009ae:	d12f      	bne.n	8000a10 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc74 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b8:	04b6      	lsls	r6, r6, #18
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	4233      	tst	r3, r6
 80009be:	d121      	bne.n	8000a04 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009c0:	220f      	movs	r2, #15
 80009c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c4:	4393      	bics	r3, r2
 80009c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80009c8:	4313      	orrs	r3, r2
 80009ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80009ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80009d0:	6862      	ldr	r2, [r4, #4]
 80009d2:	430b      	orrs	r3, r1
 80009d4:	4918      	ldr	r1, [pc, #96]	; (8000a38 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009d6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009d8:	400a      	ands	r2, r1
 80009da:	4313      	orrs	r3, r2
 80009dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	6822      	ldr	r2, [r4, #0]
 80009e2:	045b      	lsls	r3, r3, #17
 80009e4:	4313      	orrs	r3, r2
 80009e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fc58 	bl	800029c <HAL_GetTick>
 80009ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ee:	04ad      	lsls	r5, r5, #18
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	422b      	tst	r3, r5
 80009f4:	d000      	beq.n	80009f8 <HAL_RCC_OscConfig+0x380>
 80009f6:	e673      	b.n	80006e0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009f8:	f7ff fc50 	bl	800029c <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	2802      	cmp	r0, #2
 8000a00:	d9f6      	bls.n	80009f0 <HAL_RCC_OscConfig+0x378>
 8000a02:	e69a      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a04:	f7ff fc4a 	bl	800029c <HAL_GetTick>
 8000a08:	1bc0      	subs	r0, r0, r7
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9d5      	bls.n	80009ba <HAL_RCC_OscConfig+0x342>
 8000a0e:	e694      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000a10:	f7ff fc44 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a14:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a16:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a18:	04ad      	lsls	r5, r5, #18
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	422b      	tst	r3, r5
 8000a1e:	d100      	bne.n	8000a22 <HAL_RCC_OscConfig+0x3aa>
 8000a20:	e65e      	b.n	80006e0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a22:	f7ff fc3b 	bl	800029c <HAL_GetTick>
 8000a26:	1b80      	subs	r0, r0, r6
 8000a28:	2802      	cmp	r0, #2
 8000a2a:	d9f6      	bls.n	8000a1a <HAL_RCC_OscConfig+0x3a2>
 8000a2c:	e685      	b.n	800073a <HAL_RCC_OscConfig+0xc2>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40021000 	.word	0x40021000
 8000a34:	feffffff 	.word	0xfeffffff
 8000a38:	ffc2ffff 	.word	0xffc2ffff

08000a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a3c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a3e:	4c14      	ldr	r4, [pc, #80]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000a40:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a42:	2210      	movs	r2, #16
 8000a44:	0021      	movs	r1, r4
 8000a46:	4668      	mov	r0, sp
 8000a48:	f001 fc0a 	bl	8002260 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	ad04      	add	r5, sp, #16
 8000a50:	2210      	movs	r2, #16
 8000a52:	3110      	adds	r1, #16
 8000a54:	0028      	movs	r0, r5
 8000a56:	f001 fc03 	bl	8002260 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a5a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000a5c:	4e0d      	ldr	r6, [pc, #52]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x58>)
 8000a5e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a60:	401a      	ands	r2, r3
 8000a62:	2a08      	cmp	r2, #8
 8000a64:	d111      	bne.n	8000a8a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a66:	200f      	movs	r0, #15
 8000a68:	466a      	mov	r2, sp
 8000a6a:	0c99      	lsrs	r1, r3, #18
 8000a6c:	4001      	ands	r1, r0
 8000a6e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a70:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000a72:	4002      	ands	r2, r0
 8000a74:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000a76:	03db      	lsls	r3, r3, #15
 8000a78:	d505      	bpl.n	8000a86 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000a7c:	f7ff fb58 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000a80:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a82:	b008      	add	sp, #32
 8000a84:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_RCC_GetSysClockFreq+0x60>)
 8000a88:	e7fa      	b.n	8000a80 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000a8c:	e7f9      	b.n	8000a82 <HAL_RCC_GetSysClockFreq+0x46>
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	0800228c 	.word	0x0800228c
 8000a94:	40021000 	.word	0x40021000
 8000a98:	007a1200 	.word	0x007a1200
 8000a9c:	003d0900 	.word	0x003d0900

08000aa0 <HAL_RCC_ClockConfig>:
{
 8000aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4c43      	ldr	r4, [pc, #268]	; (8000bb4 <HAL_RCC_ClockConfig+0x114>)
{
 8000aa6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aa8:	6823      	ldr	r3, [r4, #0]
{
 8000aaa:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aac:	4013      	ands	r3, r2
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d31c      	bcc.n	8000aec <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ab2:	6832      	ldr	r2, [r6, #0]
 8000ab4:	0793      	lsls	r3, r2, #30
 8000ab6:	d423      	bmi.n	8000b00 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ab8:	07d3      	lsls	r3, r2, #31
 8000aba:	d429      	bmi.n	8000b10 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000abc:	2301      	movs	r3, #1
 8000abe:	6822      	ldr	r2, [r4, #0]
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	4297      	cmp	r7, r2
 8000ac4:	d367      	bcc.n	8000b96 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ac6:	6833      	ldr	r3, [r6, #0]
 8000ac8:	4c3b      	ldr	r4, [pc, #236]	; (8000bb8 <HAL_RCC_ClockConfig+0x118>)
 8000aca:	075b      	lsls	r3, r3, #29
 8000acc:	d46a      	bmi.n	8000ba4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ace:	f7ff ffb5 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 8000ad2:	6863      	ldr	r3, [r4, #4]
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_RCC_ClockConfig+0x11c>)
 8000ad6:	061b      	lsls	r3, r3, #24
 8000ad8:	0f1b      	lsrs	r3, r3, #28
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	40d8      	lsrs	r0, r3
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <HAL_RCC_ClockConfig+0x120>)
 8000ae0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f7ff fbb0 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e008      	b.n	8000afe <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	4393      	bics	r3, r2
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	4013      	ands	r3, r2
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d0da      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
}
 8000afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b00:	20f0      	movs	r0, #240	; 0xf0
 8000b02:	492d      	ldr	r1, [pc, #180]	; (8000bb8 <HAL_RCC_ClockConfig+0x118>)
 8000b04:	684b      	ldr	r3, [r1, #4]
 8000b06:	4383      	bics	r3, r0
 8000b08:	68b0      	ldr	r0, [r6, #8]
 8000b0a:	4303      	orrs	r3, r0
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e7d3      	b.n	8000ab8 <HAL_RCC_ClockConfig+0x18>
 8000b10:	4d29      	ldr	r5, [pc, #164]	; (8000bb8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b12:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b14:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b16:	2a01      	cmp	r2, #1
 8000b18:	d11a      	bne.n	8000b50 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1a:	039b      	lsls	r3, r3, #14
 8000b1c:	d5ee      	bpl.n	8000afc <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b1e:	2103      	movs	r1, #3
 8000b20:	686b      	ldr	r3, [r5, #4]
 8000b22:	438b      	bics	r3, r1
 8000b24:	4313      	orrs	r3, r2
 8000b26:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b28:	f7ff fbb8 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b2c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b2e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d115      	bne.n	8000b60 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b34:	220c      	movs	r2, #12
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d0be      	beq.n	8000abc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3e:	f7ff fbad 	bl	800029c <HAL_GetTick>
 8000b42:	9b01      	ldr	r3, [sp, #4]
 8000b44:	1ac0      	subs	r0, r0, r3
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <HAL_RCC_ClockConfig+0x124>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d9f3      	bls.n	8000b34 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e7d6      	b.n	8000afe <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b50:	2a02      	cmp	r2, #2
 8000b52:	d102      	bne.n	8000b5a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	d4e2      	bmi.n	8000b1e <HAL_RCC_ClockConfig+0x7e>
 8000b58:	e7d0      	b.n	8000afc <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5a:	079b      	lsls	r3, r3, #30
 8000b5c:	d4df      	bmi.n	8000b1e <HAL_RCC_ClockConfig+0x7e>
 8000b5e:	e7cd      	b.n	8000afc <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d012      	beq.n	8000b8a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b64:	220c      	movs	r2, #12
 8000b66:	686b      	ldr	r3, [r5, #4]
 8000b68:	4213      	tst	r3, r2
 8000b6a:	d0a7      	beq.n	8000abc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6c:	f7ff fb96 	bl	800029c <HAL_GetTick>
 8000b70:	9b01      	ldr	r3, [sp, #4]
 8000b72:	1ac0      	subs	r0, r0, r3
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_RCC_ClockConfig+0x124>)
 8000b76:	4298      	cmp	r0, r3
 8000b78:	d9f4      	bls.n	8000b64 <HAL_RCC_ClockConfig+0xc4>
 8000b7a:	e7e7      	b.n	8000b4c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f7ff fb8e 	bl	800029c <HAL_GetTick>
 8000b80:	9b01      	ldr	r3, [sp, #4]
 8000b82:	1ac0      	subs	r0, r0, r3
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_RCC_ClockConfig+0x124>)
 8000b86:	4298      	cmp	r0, r3
 8000b88:	d8e0      	bhi.n	8000b4c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	686b      	ldr	r3, [r5, #4]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d1f3      	bne.n	8000b7c <HAL_RCC_ClockConfig+0xdc>
 8000b94:	e792      	b.n	8000abc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	439a      	bics	r2, r3
 8000b9a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b9c:	6822      	ldr	r2, [r4, #0]
 8000b9e:	421a      	tst	r2, r3
 8000ba0:	d1ac      	bne.n	8000afc <HAL_RCC_ClockConfig+0x5c>
 8000ba2:	e790      	b.n	8000ac6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba4:	6863      	ldr	r3, [r4, #4]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_RCC_ClockConfig+0x128>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	68f2      	ldr	r2, [r6, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6063      	str	r3, [r4, #4]
 8000bb0:	e78d      	b.n	8000ace <HAL_RCC_ClockConfig+0x2e>
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	080022df 	.word	0x080022df
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	00001388 	.word	0x00001388
 8000bc8:	fffff8ff 	.word	0xfffff8ff

08000bcc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000bcc:	4b01      	ldr	r3, [pc, #4]	; (8000bd4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bce:	6818      	ldr	r0, [r3, #0]
}
 8000bd0:	4770      	bx	lr
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <HAL_RCC_GetPCLK1Freq+0x14>)
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	055b      	lsls	r3, r3, #21
 8000be0:	0f5b      	lsrs	r3, r3, #29
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000be6:	6810      	ldr	r0, [r2, #0]
 8000be8:	40d8      	lsrs	r0, r3
}    
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	080022ef 	.word	0x080022ef
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bfa:	6803      	ldr	r3, [r0, #0]
{
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c00:	03db      	lsls	r3, r3, #15
 8000c02:	d528      	bpl.n	8000c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c04:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c06:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c08:	4c3b      	ldr	r4, [pc, #236]	; (8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000c0a:	0552      	lsls	r2, r2, #21
 8000c0c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c0e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c10:	4213      	tst	r3, r2
 8000c12:	d108      	bne.n	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	69e3      	ldr	r3, [r4, #28]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61e3      	str	r3, [r4, #28]
 8000c1a:	69e3      	ldr	r3, [r4, #28]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	9303      	str	r3, [sp, #12]
 8000c20:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c22:	2301      	movs	r3, #1
 8000c24:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c26:	2780      	movs	r7, #128	; 0x80
 8000c28:	4e34      	ldr	r6, [pc, #208]	; (8000cfc <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c2a:	007f      	lsls	r7, r7, #1
 8000c2c:	6833      	ldr	r3, [r6, #0]
 8000c2e:	423b      	tst	r3, r7
 8000c30:	d02f      	beq.n	8000c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c32:	22c0      	movs	r2, #192	; 0xc0
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	0092      	lsls	r2, r2, #2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	4e31      	ldr	r6, [pc, #196]	; (8000d00 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c3c:	d13b      	bne.n	8000cb6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c3e:	6a23      	ldr	r3, [r4, #32]
 8000c40:	401e      	ands	r6, r3
 8000c42:	686b      	ldr	r3, [r5, #4]
 8000c44:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c46:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c48:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d103      	bne.n	8000c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c4e:	69e3      	ldr	r3, [r4, #28]
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c56:	682a      	ldr	r2, [r5, #0]
 8000c58:	07d3      	lsls	r3, r2, #31
 8000c5a:	d506      	bpl.n	8000c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	4926      	ldr	r1, [pc, #152]	; (8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000c60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000c62:	4383      	bics	r3, r0
 8000c64:	68a8      	ldr	r0, [r5, #8]
 8000c66:	4303      	orrs	r3, r0
 8000c68:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c6a:	0693      	lsls	r3, r2, #26
 8000c6c:	d506      	bpl.n	8000c7c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c6e:	2010      	movs	r0, #16
 8000c70:	4921      	ldr	r1, [pc, #132]	; (8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000c72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000c74:	4383      	bics	r3, r0
 8000c76:	68e8      	ldr	r0, [r5, #12]
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000c7c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000c7e:	0553      	lsls	r3, r2, #21
 8000c80:	d517      	bpl.n	8000cb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000c82:	2140      	movs	r1, #64	; 0x40
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000c86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c88:	438b      	bics	r3, r1
 8000c8a:	6929      	ldr	r1, [r5, #16]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	e00f      	b.n	8000cb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c92:	6833      	ldr	r3, [r6, #0]
 8000c94:	433b      	orrs	r3, r7
 8000c96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c98:	f7ff fb00 	bl	800029c <HAL_GetTick>
 8000c9c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c9e:	6833      	ldr	r3, [r6, #0]
 8000ca0:	423b      	tst	r3, r7
 8000ca2:	d1c6      	bne.n	8000c32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca4:	f7ff fafa 	bl	800029c <HAL_GetTick>
 8000ca8:	9b01      	ldr	r3, [sp, #4]
 8000caa:	1ac0      	subs	r0, r0, r3
 8000cac:	2864      	cmp	r0, #100	; 0x64
 8000cae:	d9f6      	bls.n	8000c9e <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8000cb0:	2003      	movs	r0, #3
}
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cb6:	6869      	ldr	r1, [r5, #4]
 8000cb8:	400a      	ands	r2, r1
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d0bf      	beq.n	8000c3e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cbe:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cc0:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cc2:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cc4:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	4303      	orrs	r3, r0
 8000cca:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ccc:	6a23      	ldr	r3, [r4, #32]
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cd0:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000cd6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000cd8:	07d3      	lsls	r3, r2, #31
 8000cda:	d5b0      	bpl.n	8000c3e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fade 	bl	800029c <HAL_GetTick>
 8000ce0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	6a23      	ldr	r3, [r4, #32]
 8000ce6:	4213      	tst	r3, r2
 8000ce8:	d1a9      	bne.n	8000c3e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cea:	f7ff fad7 	bl	800029c <HAL_GetTick>
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000cf0:	1bc0      	subs	r0, r0, r7
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d9f5      	bls.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8000cf6:	e7db      	b.n	8000cb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40007000 	.word	0x40007000
 8000d00:	fffffcff 	.word	0xfffffcff
 8000d04:	efffffff 	.word	0xefffffff
 8000d08:	fffeffff 	.word	0xfffeffff
 8000d0c:	00001388 	.word	0x00001388

08000d10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <TIM_Base_SetConfig+0x84>)
{
 8000d12:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000d14:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d006      	beq.n	8000d28 <TIM_Base_SetConfig+0x18>
 8000d1a:	2480      	movs	r4, #128	; 0x80
 8000d1c:	05e4      	lsls	r4, r4, #23
 8000d1e:	42a0      	cmp	r0, r4
 8000d20:	d002      	beq.n	8000d28 <TIM_Base_SetConfig+0x18>
 8000d22:	4c1d      	ldr	r4, [pc, #116]	; (8000d98 <TIM_Base_SetConfig+0x88>)
 8000d24:	42a0      	cmp	r0, r4
 8000d26:	d10c      	bne.n	8000d42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d28:	2470      	movs	r4, #112	; 0x70
 8000d2a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000d2c:	684c      	ldr	r4, [r1, #4]
 8000d2e:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d012      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	05e4      	lsls	r4, r4, #23
 8000d38:	42a0      	cmp	r0, r4
 8000d3a:	d00e      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d3c:	4c16      	ldr	r4, [pc, #88]	; (8000d98 <TIM_Base_SetConfig+0x88>)
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	d00b      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d42:	4c16      	ldr	r4, [pc, #88]	; (8000d9c <TIM_Base_SetConfig+0x8c>)
 8000d44:	42a0      	cmp	r0, r4
 8000d46:	d008      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d48:	4c15      	ldr	r4, [pc, #84]	; (8000da0 <TIM_Base_SetConfig+0x90>)
 8000d4a:	42a0      	cmp	r0, r4
 8000d4c:	d005      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d4e:	4c15      	ldr	r4, [pc, #84]	; (8000da4 <TIM_Base_SetConfig+0x94>)
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	d002      	beq.n	8000d5a <TIM_Base_SetConfig+0x4a>
 8000d54:	4c14      	ldr	r4, [pc, #80]	; (8000da8 <TIM_Base_SetConfig+0x98>)
 8000d56:	42a0      	cmp	r0, r4
 8000d58:	d103      	bne.n	8000d62 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d5a:	4c14      	ldr	r4, [pc, #80]	; (8000dac <TIM_Base_SetConfig+0x9c>)
 8000d5c:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d5e:	68cc      	ldr	r4, [r1, #12]
 8000d60:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d62:	2480      	movs	r4, #128	; 0x80
 8000d64:	43a3      	bics	r3, r4
 8000d66:	694c      	ldr	r4, [r1, #20]
 8000d68:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8000d6a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d6c:	688b      	ldr	r3, [r1, #8]
 8000d6e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d70:	680b      	ldr	r3, [r1, #0]
 8000d72:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d74:	4290      	cmp	r0, r2
 8000d76:	d008      	beq.n	8000d8a <TIM_Base_SetConfig+0x7a>
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <TIM_Base_SetConfig+0x90>)
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	d005      	beq.n	8000d8a <TIM_Base_SetConfig+0x7a>
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <TIM_Base_SetConfig+0x94>)
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d002      	beq.n	8000d8a <TIM_Base_SetConfig+0x7a>
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <TIM_Base_SetConfig+0x98>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d101      	bne.n	8000d8e <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d8a:	690b      	ldr	r3, [r1, #16]
 8000d8c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	6143      	str	r3, [r0, #20]
}
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40002000 	.word	0x40002000
 8000da0:	40014000 	.word	0x40014000
 8000da4:	40014400 	.word	0x40014400
 8000da8:	40014800 	.word	0x40014800
 8000dac:	fffffcff 	.word	0xfffffcff

08000db0 <HAL_TIM_Base_Init>:
{
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
  if(htim == NULL)
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d014      	beq.n	8000de4 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dba:	0025      	movs	r5, r4
 8000dbc:	353d      	adds	r5, #61	; 0x3d
 8000dbe:	782b      	ldrb	r3, [r5, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d105      	bne.n	8000dd2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000dc6:	0022      	movs	r2, r4
 8000dc8:	323c      	adds	r2, #60	; 0x3c
 8000dca:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000dcc:	0020      	movs	r0, r4
 8000dce:	f001 f955 	bl	800207c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000dd2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dd4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000dd6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dd8:	1d21      	adds	r1, r4, #4
 8000dda:	f7ff ff99 	bl	8000d10 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dde:	2301      	movs	r3, #1
  return HAL_OK;
 8000de0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000de2:	702b      	strb	r3, [r5, #0]
}
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000de8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000dea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dec:	4d03      	ldr	r5, [pc, #12]	; (8000dfc <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dee:	430a      	orrs	r2, r1
 8000df0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000df2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000df4:	4313      	orrs	r3, r2
 8000df6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000df8:	6083      	str	r3, [r0, #8]
}
 8000dfa:	bd30      	pop	{r4, r5, pc}
 8000dfc:	ffff00ff 	.word	0xffff00ff

08000e00 <HAL_TIM_ConfigClockSource>:
{
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000e02:	0005      	movs	r5, r0
 8000e04:	2302      	movs	r3, #2
 8000e06:	353c      	adds	r5, #60	; 0x3c
 8000e08:	782a      	ldrb	r2, [r5, #0]
{
 8000e0a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2a01      	cmp	r2, #1
 8000e10:	d019      	beq.n	8000e46 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e12:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8000e14:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000e16:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e18:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8000e1a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000e1c:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000e1e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e20:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <HAL_TIM_ConfigClockSource+0x160>)
 8000e22:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e24:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e26:	680b      	ldr	r3, [r1, #0]
 8000e28:	2b40      	cmp	r3, #64	; 0x40
 8000e2a:	d100      	bne.n	8000e2e <HAL_TIM_ConfigClockSource+0x2e>
 8000e2c:	e06f      	b.n	8000f0e <HAL_TIM_ConfigClockSource+0x10e>
 8000e2e:	d816      	bhi.n	8000e5e <HAL_TIM_ConfigClockSource+0x5e>
 8000e30:	2b10      	cmp	r3, #16
 8000e32:	d100      	bne.n	8000e36 <HAL_TIM_ConfigClockSource+0x36>
 8000e34:	e087      	b.n	8000f46 <HAL_TIM_ConfigClockSource+0x146>
 8000e36:	d807      	bhi.n	8000e48 <HAL_TIM_ConfigClockSource+0x48>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d100      	bne.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
 8000e3c:	e07d      	b.n	8000f3a <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8000e3e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e40:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e42:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8000e44:	7028      	strb	r0, [r5, #0]
}
 8000e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d100      	bne.n	8000e4e <HAL_TIM_ConfigClockSource+0x4e>
 8000e4c:	e081      	b.n	8000f52 <HAL_TIM_ConfigClockSource+0x152>
 8000e4e:	2b30      	cmp	r3, #48	; 0x30
 8000e50:	d1f5      	bne.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e52:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000e54:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e56:	4393      	bics	r3, r2
 8000e58:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e5a:	2337      	movs	r3, #55	; 0x37
 8000e5c:	e055      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000e5e:	2b70      	cmp	r3, #112	; 0x70
 8000e60:	d033      	beq.n	8000eca <HAL_TIM_ConfigClockSource+0xca>
 8000e62:	d81b      	bhi.n	8000e9c <HAL_TIM_ConfigClockSource+0x9c>
 8000e64:	2b50      	cmp	r3, #80	; 0x50
 8000e66:	d03b      	beq.n	8000ee0 <HAL_TIM_ConfigClockSource+0xe0>
 8000e68:	2b60      	cmp	r3, #96	; 0x60
 8000e6a:	d1e8      	bne.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e6c:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e6e:	684b      	ldr	r3, [r1, #4]
 8000e70:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e72:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e74:	4f3b      	ldr	r7, [pc, #236]	; (8000f64 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e76:	43a1      	bics	r1, r4
 8000e78:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e7a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e7c:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e7e:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e80:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e82:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000e84:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8000e86:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e88:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e8a:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8000e90:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000e92:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e94:	4393      	bics	r3, r2
 8000e96:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e98:	2367      	movs	r3, #103	; 0x67
 8000e9a:	e036      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0152      	lsls	r2, r2, #5
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_TIM_ConfigClockSource+0xc0>
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	0192      	lsls	r2, r2, #6
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d1c8      	bne.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000eac:	68cb      	ldr	r3, [r1, #12]
 8000eae:	684a      	ldr	r2, [r1, #4]
 8000eb0:	6889      	ldr	r1, [r1, #8]
 8000eb2:	f7ff ff99 	bl	8000de8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	6822      	ldr	r2, [r4, #0]
 8000eba:	01db      	lsls	r3, r3, #7
 8000ebc:	6891      	ldr	r1, [r2, #8]
 8000ebe:	e00c      	b.n	8000eda <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	6883      	ldr	r3, [r0, #8]
 8000ec4:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8000ec6:	6083      	str	r3, [r0, #8]
 8000ec8:	e7b9      	b.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8000eca:	68cb      	ldr	r3, [r1, #12]
 8000ecc:	684a      	ldr	r2, [r1, #4]
 8000ece:	6889      	ldr	r1, [r1, #8]
 8000ed0:	f7ff ff8a 	bl	8000de8 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000ed4:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6093      	str	r3, [r2, #8]
    break;
 8000ede:	e7ae      	b.n	8000e3e <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ee0:	684a      	ldr	r2, [r1, #4]
 8000ee2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ee4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ee8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eea:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eec:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ef0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ef2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ef4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ef6:	240a      	movs	r4, #10
 8000ef8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000efa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000efc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000efe:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f00:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f02:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f04:	4393      	bics	r3, r2
 8000f06:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f08:	2357      	movs	r3, #87	; 0x57
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	e7db      	b.n	8000ec6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f0e:	684a      	ldr	r2, [r1, #4]
 8000f10:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f12:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f14:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f16:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f18:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f1a:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f1c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f1e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f20:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f22:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f24:	240a      	movs	r4, #10
 8000f26:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000f28:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f2a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f2c:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f2e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f30:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f32:	4393      	bics	r3, r2
 8000f34:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f36:	2347      	movs	r3, #71	; 0x47
 8000f38:	e7e7      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f3a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f3c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f3e:	4393      	bics	r3, r2
 8000f40:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f42:	2307      	movs	r3, #7
 8000f44:	e7e1      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f46:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f48:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f4e:	2317      	movs	r3, #23
 8000f50:	e7db      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f52:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8000f54:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f56:	4393      	bics	r3, r2
 8000f58:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f5a:	2327      	movs	r3, #39	; 0x27
 8000f5c:	e7d5      	b.n	8000f0a <HAL_TIM_ConfigClockSource+0x10a>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	ffff0088 	.word	0xffff0088
 8000f64:	ffff0fff 	.word	0xffff0fff

08000f68 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f68:	2270      	movs	r2, #112	; 0x70
{
 8000f6a:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr &= ~TIM_SMCR_SMS;
 8000f6c:	2407      	movs	r4, #7
  tmpsmcr = htim->Instance->SMCR;
 8000f6e:	6800      	ldr	r0, [r0, #0]
 8000f70:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f72:	4393      	bics	r3, r2
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8000f74:	684a      	ldr	r2, [r1, #4]
 8000f76:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8000f78:	43a3      	bics	r3, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8000f7a:	680c      	ldr	r4, [r1, #0]
 8000f7c:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8000f7e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8000f80:	2a50      	cmp	r2, #80	; 0x50
 8000f82:	d01c      	beq.n	8000fbe <TIM_SlaveTimer_SetConfig+0x56>
 8000f84:	d802      	bhi.n	8000f8c <TIM_SlaveTimer_SetConfig+0x24>
 8000f86:	2a40      	cmp	r2, #64	; 0x40
 8000f88:	d00a      	beq.n	8000fa0 <TIM_SlaveTimer_SetConfig+0x38>
}
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8000f8c:	2a60      	cmp	r2, #96	; 0x60
 8000f8e:	d028      	beq.n	8000fe2 <TIM_SlaveTimer_SetConfig+0x7a>
 8000f90:	2a70      	cmp	r2, #112	; 0x70
 8000f92:	d1fa      	bne.n	8000f8a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8000f94:	690b      	ldr	r3, [r1, #16]
 8000f96:	688a      	ldr	r2, [r1, #8]
 8000f98:	68c9      	ldr	r1, [r1, #12]
 8000f9a:	f7ff ff25 	bl	8000de8 <TIM_ETR_SetConfig>
    break;
 8000f9e:	e7f4      	b.n	8000f8a <TIM_SlaveTimer_SetConfig+0x22>
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8000fa0:	2201      	movs	r2, #1
      tmpccer = htim->Instance->CCER;
 8000fa2:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8000fa4:	6a03      	ldr	r3, [r0, #32]
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8000faa:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fac:	32ef      	adds	r2, #239	; 0xef
 8000fae:	4393      	bics	r3, r2
 8000fb0:	001a      	movs	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8000fb2:	690b      	ldr	r3, [r1, #16]
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8000fb8:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8000fba:	6204      	str	r4, [r0, #32]
    break;
 8000fbc:	e7e5      	b.n	8000f8a <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fbe:	2501      	movs	r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fc0:	688a      	ldr	r2, [r1, #8]
 8000fc2:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8000fc4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fc6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fc8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fca:	43ac      	bics	r4, r5
 8000fcc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fce:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fd0:	35ef      	adds	r5, #239	; 0xef
 8000fd2:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fd4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fd6:	240a      	movs	r4, #10
 8000fd8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8000fda:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000fdc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fde:	6202      	str	r2, [r0, #32]
 8000fe0:	e7d3      	b.n	8000f8a <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fe2:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000fe4:	688b      	ldr	r3, [r1, #8]
 8000fe6:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fe8:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000fea:	4d07      	ldr	r5, [pc, #28]	; (8001008 <TIM_SlaveTimer_SetConfig+0xa0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fec:	43a1      	bics	r1, r4
 8000fee:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ff0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ff2:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ff4:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ff6:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ff8:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8000ffa:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ffc:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ffe:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001000:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8001002:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001004:	6203      	str	r3, [r0, #32]
}
 8001006:	e7c0      	b.n	8000f8a <TIM_SlaveTimer_SetConfig+0x22>
 8001008:	ffff0fff 	.word	0xffff0fff

0800100c <HAL_TIM_SlaveConfigSynchronization>:
{
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800100e:	0005      	movs	r5, r0
 8001010:	353c      	adds	r5, #60	; 0x3c
 8001012:	782b      	ldrb	r3, [r5, #0]
{
 8001014:	0004      	movs	r4, r0
 8001016:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001018:	2b01      	cmp	r3, #1
 800101a:	d013      	beq.n	8001044 <HAL_TIM_SlaveConfigSynchronization+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800101c:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 800101e:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001020:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001022:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001024:	7030      	strb	r0, [r6, #0]
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001026:	0020      	movs	r0, r4
 8001028:	f7ff ff9e 	bl	8000f68 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800102c:	2140      	movs	r1, #64	; 0x40
  __HAL_UNLOCK(htim);
 800102e:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	438a      	bics	r2, r1
 8001036:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	4903      	ldr	r1, [pc, #12]	; (8001048 <HAL_TIM_SlaveConfigSynchronization+0x3c>)
 800103c:	400a      	ands	r2, r1
 800103e:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001040:	7037      	strb	r7, [r6, #0]
  __HAL_UNLOCK(htim);
 8001042:	7028      	strb	r0, [r5, #0]
    }
 8001044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	ffffbfff 	.word	0xffffbfff

0800104c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800104c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800104e:	0004      	movs	r4, r0
 8001050:	343c      	adds	r4, #60	; 0x3c
 8001052:	7822      	ldrb	r2, [r4, #0]
{
 8001054:	0003      	movs	r3, r0
 8001056:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001058:	2a01      	cmp	r2, #1
 800105a:	d017      	beq.n	800108c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800105c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800105e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001060:	353d      	adds	r5, #61	; 0x3d
 8001062:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	306e      	adds	r0, #110	; 0x6e
 8001068:	4382      	bics	r2, r0
 800106a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001070:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001072:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001074:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001076:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	4382      	bics	r2, r0
 800107c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800107e:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001080:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001082:	430a      	orrs	r2, r1
 8001084:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001086:	2301      	movs	r3, #1
 8001088:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800108a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800108c:	bd30      	pop	{r4, r5, pc}
	...

08001090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001094:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001096:	69c2      	ldr	r2, [r0, #28]
 8001098:	6883      	ldr	r3, [r0, #8]
 800109a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800109c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800109e:	4303      	orrs	r3, r0
 80010a0:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010a2:	4e3f      	ldr	r6, [pc, #252]	; (80011a0 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010a4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010a6:	483f      	ldr	r0, [pc, #252]	; (80011a4 <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010a8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010aa:	4001      	ands	r1, r0
 80010ac:	430b      	orrs	r3, r1
 80010ae:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b0:	686b      	ldr	r3, [r5, #4]
 80010b2:	493d      	ldr	r1, [pc, #244]	; (80011a8 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010b4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b6:	400b      	ands	r3, r1
 80010b8:	68e1      	ldr	r1, [r4, #12]
 80010ba:	430b      	orrs	r3, r1
 80010bc:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010be:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010c0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010c4:	4839      	ldr	r0, [pc, #228]	; (80011ac <UART_SetConfig+0x11c>)
 80010c6:	4001      	ands	r1, r0
 80010c8:	430b      	orrs	r3, r1
 80010ca:	60ab      	str	r3, [r5, #8]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010d0:	42b5      	cmp	r5, r6
 80010d2:	d110      	bne.n	80010f6 <UART_SetConfig+0x66>
 80010d4:	2003      	movs	r0, #3
 80010d6:	4936      	ldr	r1, [pc, #216]	; (80011b0 <UART_SetConfig+0x120>)
 80010d8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80010da:	4001      	ands	r1, r0
 80010dc:	4835      	ldr	r0, [pc, #212]	; (80011b4 <UART_SetConfig+0x124>)
 80010de:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d013      	beq.n	800110c <UART_SetConfig+0x7c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80010e4:	2808      	cmp	r0, #8
 80010e6:	d858      	bhi.n	800119a <UART_SetConfig+0x10a>
 80010e8:	f7ff f818 	bl	800011c <__gnu_thumb1_case_uqi>
 80010ec:	57425737 	.word	0x57425737
 80010f0:	5757574b 	.word	0x5757574b
 80010f4:	50          	.byte	0x50
 80010f5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010f6:	4930      	ldr	r1, [pc, #192]	; (80011b8 <UART_SetConfig+0x128>)
 80010f8:	428d      	cmp	r5, r1
 80010fa:	d14c      	bne.n	8001196 <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d12c      	bne.n	800115a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001100:	f7ff fd6a 	bl	8000bd8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001104:	6863      	ldr	r3, [r4, #4]
 8001106:	0040      	lsls	r0, r0, #1
 8001108:	085b      	lsrs	r3, r3, #1
 800110a:	e00b      	b.n	8001124 <UART_SetConfig+0x94>
    switch (clocksource)
 800110c:	2808      	cmp	r0, #8
 800110e:	d821      	bhi.n	8001154 <UART_SetConfig+0xc4>
 8001110:	f7fe fffa 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001114:	200520f6 	.word	0x200520f6
 8001118:	20202018 	.word	0x20202018
 800111c:	1b          	.byte	0x1b
 800111d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	0858      	lsrs	r0, r3, #1
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001124:	18c0      	adds	r0, r0, r3
 8001126:	6861      	ldr	r1, [r4, #4]
 8001128:	f7ff f802 	bl	8000130 <__udivsi3>
 800112c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800112e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001130:	220f      	movs	r2, #15
 8001132:	0019      	movs	r1, r3
 8001134:	4391      	bics	r1, r2
 8001136:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001138:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 800113a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800113c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800113e:	4313      	orrs	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001142:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001144:	f7ff fc7a 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 8001148:	e7dc      	b.n	8001104 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800114a:	6863      	ldr	r3, [r4, #4]
 800114c:	0858      	lsrs	r0, r3, #1
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	025b      	lsls	r3, r3, #9
 8001152:	e7e7      	b.n	8001124 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8001154:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001156:	2300      	movs	r3, #0
 8001158:	e7ea      	b.n	8001130 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800115a:	f7ff fd3d 	bl	8000bd8 <HAL_RCC_GetPCLK1Freq>
 800115e:	6861      	ldr	r1, [r4, #4]
 8001160:	084b      	lsrs	r3, r1, #1
 8001162:	1818      	adds	r0, r3, r0
 8001164:	f7fe ffe4 	bl	8000130 <__udivsi3>
 8001168:	b280      	uxth	r0, r0
 800116a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800116c:	2000      	movs	r0, #0
        break;
 800116e:	e7e8      	b.n	8001142 <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001170:	6861      	ldr	r1, [r4, #4]
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <UART_SetConfig+0x130>)
 8001174:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001176:	18c0      	adds	r0, r0, r3
 8001178:	f7fe ffda 	bl	8000130 <__udivsi3>
 800117c:	b280      	uxth	r0, r0
 800117e:	60f0      	str	r0, [r6, #12]
 8001180:	e7f4      	b.n	800116c <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001182:	f7ff fc5b 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 8001186:	6861      	ldr	r1, [r4, #4]
 8001188:	084b      	lsrs	r3, r1, #1
 800118a:	e7f4      	b.n	8001176 <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	6861      	ldr	r1, [r4, #4]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	0848      	lsrs	r0, r1, #1
 8001194:	e7ef      	b.n	8001176 <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001196:	429a      	cmp	r2, r3
 8001198:	d0dc      	beq.n	8001154 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 800119a:	2001      	movs	r0, #1
  return ret;
 800119c:	e7d1      	b.n	8001142 <UART_SetConfig+0xb2>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40013800 	.word	0x40013800
 80011a4:	ffff69f3 	.word	0xffff69f3
 80011a8:	ffffcfff 	.word	0xffffcfff
 80011ac:	fffff4ff 	.word	0xfffff4ff
 80011b0:	40021000 	.word	0x40021000
 80011b4:	080022c4 	.word	0x080022c4
 80011b8:	40004400 	.word	0x40004400
 80011bc:	00f42400 	.word	0x00f42400
 80011c0:	007a1200 	.word	0x007a1200

080011c4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80011c6:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80011c8:	07da      	lsls	r2, r3, #31
 80011ca:	d506      	bpl.n	80011da <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80011cc:	6801      	ldr	r1, [r0, #0]
 80011ce:	4c28      	ldr	r4, [pc, #160]	; (8001270 <UART_AdvFeatureConfig+0xac>)
 80011d0:	684a      	ldr	r2, [r1, #4]
 80011d2:	4022      	ands	r2, r4
 80011d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011d6:	4322      	orrs	r2, r4
 80011d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011da:	079a      	lsls	r2, r3, #30
 80011dc:	d506      	bpl.n	80011ec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011de:	6801      	ldr	r1, [r0, #0]
 80011e0:	4c24      	ldr	r4, [pc, #144]	; (8001274 <UART_AdvFeatureConfig+0xb0>)
 80011e2:	684a      	ldr	r2, [r1, #4]
 80011e4:	4022      	ands	r2, r4
 80011e6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80011e8:	4322      	orrs	r2, r4
 80011ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80011ec:	075a      	lsls	r2, r3, #29
 80011ee:	d506      	bpl.n	80011fe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80011f0:	6801      	ldr	r1, [r0, #0]
 80011f2:	4c21      	ldr	r4, [pc, #132]	; (8001278 <UART_AdvFeatureConfig+0xb4>)
 80011f4:	684a      	ldr	r2, [r1, #4]
 80011f6:	4022      	ands	r2, r4
 80011f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011fa:	4322      	orrs	r2, r4
 80011fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011fe:	071a      	lsls	r2, r3, #28
 8001200:	d506      	bpl.n	8001210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001202:	6801      	ldr	r1, [r0, #0]
 8001204:	4c1d      	ldr	r4, [pc, #116]	; (800127c <UART_AdvFeatureConfig+0xb8>)
 8001206:	684a      	ldr	r2, [r1, #4]
 8001208:	4022      	ands	r2, r4
 800120a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800120c:	4322      	orrs	r2, r4
 800120e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001210:	06da      	lsls	r2, r3, #27
 8001212:	d506      	bpl.n	8001222 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001214:	6801      	ldr	r1, [r0, #0]
 8001216:	4c1a      	ldr	r4, [pc, #104]	; (8001280 <UART_AdvFeatureConfig+0xbc>)
 8001218:	688a      	ldr	r2, [r1, #8]
 800121a:	4022      	ands	r2, r4
 800121c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800121e:	4322      	orrs	r2, r4
 8001220:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001222:	069a      	lsls	r2, r3, #26
 8001224:	d506      	bpl.n	8001234 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001226:	6801      	ldr	r1, [r0, #0]
 8001228:	4c16      	ldr	r4, [pc, #88]	; (8001284 <UART_AdvFeatureConfig+0xc0>)
 800122a:	688a      	ldr	r2, [r1, #8]
 800122c:	4022      	ands	r2, r4
 800122e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001230:	4322      	orrs	r2, r4
 8001232:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001234:	065a      	lsls	r2, r3, #25
 8001236:	d510      	bpl.n	800125a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001238:	6801      	ldr	r1, [r0, #0]
 800123a:	4d13      	ldr	r5, [pc, #76]	; (8001288 <UART_AdvFeatureConfig+0xc4>)
 800123c:	684a      	ldr	r2, [r1, #4]
 800123e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001240:	402a      	ands	r2, r5
 8001242:	4322      	orrs	r2, r4
 8001244:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0352      	lsls	r2, r2, #13
 800124a:	4294      	cmp	r4, r2
 800124c:	d105      	bne.n	800125a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800124e:	684a      	ldr	r2, [r1, #4]
 8001250:	4c0e      	ldr	r4, [pc, #56]	; (800128c <UART_AdvFeatureConfig+0xc8>)
 8001252:	4022      	ands	r2, r4
 8001254:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001256:	4322      	orrs	r2, r4
 8001258:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	d506      	bpl.n	800126c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800125e:	6802      	ldr	r2, [r0, #0]
 8001260:	490b      	ldr	r1, [pc, #44]	; (8001290 <UART_AdvFeatureConfig+0xcc>)
 8001262:	6853      	ldr	r3, [r2, #4]
 8001264:	400b      	ands	r3, r1
 8001266:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001268:	430b      	orrs	r3, r1
 800126a:	6053      	str	r3, [r2, #4]
  }
}
 800126c:	bd30      	pop	{r4, r5, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	fffdffff 	.word	0xfffdffff
 8001274:	fffeffff 	.word	0xfffeffff
 8001278:	fffbffff 	.word	0xfffbffff
 800127c:	ffff7fff 	.word	0xffff7fff
 8001280:	ffffefff 	.word	0xffffefff
 8001284:	ffffdfff 	.word	0xffffdfff
 8001288:	ffefffff 	.word	0xffefffff
 800128c:	ff9fffff 	.word	0xff9fffff
 8001290:	fff7ffff 	.word	0xfff7ffff

08001294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	0004      	movs	r4, r0
 8001298:	000e      	movs	r6, r1
 800129a:	0015      	movs	r5, r2
 800129c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	69d3      	ldr	r3, [r2, #28]
 80012a2:	4033      	ands	r3, r6
 80012a4:	1b9b      	subs	r3, r3, r6
 80012a6:	4259      	negs	r1, r3
 80012a8:	414b      	adcs	r3, r1
 80012aa:	42ab      	cmp	r3, r5
 80012ac:	d001      	beq.n	80012b2 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80012ae:	2000      	movs	r0, #0
 80012b0:	e018      	b.n	80012e4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80012b2:	9b06      	ldr	r3, [sp, #24]
 80012b4:	3301      	adds	r3, #1
 80012b6:	d0f3      	beq.n	80012a0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012b8:	9b06      	ldr	r3, [sp, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d113      	bne.n	80012e6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <UART_WaitOnFlagUntilTimeout+0x60>)
 80012c2:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80012c4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	31a3      	adds	r1, #163	; 0xa3
 80012ce:	31ff      	adds	r1, #255	; 0xff
 80012d0:	438a      	bics	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80012d4:	0022      	movs	r2, r4
 80012d6:	2320      	movs	r3, #32
 80012d8:	3269      	adds	r2, #105	; 0x69
 80012da:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80012dc:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80012de:	2300      	movs	r3, #0
 80012e0:	3468      	adds	r4, #104	; 0x68
 80012e2:	7023      	strb	r3, [r4, #0]
}
 80012e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012e6:	f7fe ffd9 	bl	800029c <HAL_GetTick>
 80012ea:	9b06      	ldr	r3, [sp, #24]
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	4283      	cmp	r3, r0
 80012f0:	d2d5      	bcs.n	800129e <UART_WaitOnFlagUntilTimeout+0xa>
 80012f2:	e7e4      	b.n	80012be <UART_WaitOnFlagUntilTimeout+0x2a>
 80012f4:	fffffe5f 	.word	0xfffffe5f

080012f8 <UART_CheckIdleState>:
{
 80012f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012fa:	2600      	movs	r6, #0
{
 80012fc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012fe:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001300:	f7fe ffcc 	bl	800029c <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <UART_CheckIdleState+0x68>)
 8001306:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001308:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800130a:	4293      	cmp	r3, r2
 800130c:	d008      	beq.n	8001320 <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 800130e:	0022      	movs	r2, r4
 8001310:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001312:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001314:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001316:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001318:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800131a:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 800131c:	7020      	strb	r0, [r4, #0]
}
 800131e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	071b      	lsls	r3, r3, #28
 8001324:	d40f      	bmi.n	8001346 <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	075b      	lsls	r3, r3, #29
 800132c:	d5ef      	bpl.n	800130e <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <UART_CheckIdleState+0x6c>)
 8001332:	2200      	movs	r2, #0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	03c9      	lsls	r1, r1, #15
 8001338:	002b      	movs	r3, r5
 800133a:	0020      	movs	r0, r4
 800133c:	f7ff ffaa 	bl	8001294 <UART_WaitOnFlagUntilTimeout>
 8001340:	2800      	cmp	r0, #0
 8001342:	d10b      	bne.n	800135c <UART_CheckIdleState+0x64>
 8001344:	e7e3      	b.n	800130e <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <UART_CheckIdleState+0x6c>)
 800134a:	0032      	movs	r2, r6
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	0389      	lsls	r1, r1, #14
 8001350:	0003      	movs	r3, r0
 8001352:	0020      	movs	r0, r4
 8001354:	f7ff ff9e 	bl	8001294 <UART_WaitOnFlagUntilTimeout>
 8001358:	2800      	cmp	r0, #0
 800135a:	d0e4      	beq.n	8001326 <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 800135c:	2003      	movs	r0, #3
 800135e:	e7de      	b.n	800131e <UART_CheckIdleState+0x26>
 8001360:	40013800 	.word	0x40013800
 8001364:	01ffffff 	.word	0x01ffffff

08001368 <HAL_UART_Init>:
{
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800136c:	d101      	bne.n	8001372 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
}
 8001370:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001372:	0005      	movs	r5, r0
 8001374:	3569      	adds	r5, #105	; 0x69
 8001376:	782b      	ldrb	r3, [r5, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d104      	bne.n	8001388 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800137e:	0002      	movs	r2, r0
 8001380:	3268      	adds	r2, #104	; 0x68
 8001382:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001384:	f000 feb6 	bl	80020f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001388:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800138a:	2101      	movs	r1, #1
 800138c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800138e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001390:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001392:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001394:	438b      	bics	r3, r1
 8001396:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001398:	f7ff fe7a 	bl	8001090 <UART_SetConfig>
 800139c:	2801      	cmp	r0, #1
 800139e:	d0e6      	beq.n	800136e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80013a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7ff ff0c 	bl	80011c4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <HAL_UART_Init+0x68>)
 80013b0:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80013b2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013b4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013b6:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	438a      	bics	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80013c0:	2201      	movs	r2, #1
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80013c8:	f7ff ff96 	bl	80012f8 <UART_CheckIdleState>
 80013cc:	e7d0      	b.n	8001370 <HAL_UART_Init+0x8>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	ffffb7ff 	.word	0xffffb7ff

080013d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80013d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80013d6:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013d8:	6846      	ldr	r6, [r0, #4]
 80013da:	6801      	ldr	r1, [r0, #0]
 80013dc:	8a02      	ldrh	r2, [r0, #16]
 80013de:	2508      	movs	r5, #8
 80013e0:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80013e2:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 80013e4:	2d84      	cmp	r5, #132	; 0x84
 80013e6:	d000      	beq.n	80013ea <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 80013e8:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013ea:	a803      	add	r0, sp, #12
 80013ec:	9001      	str	r0, [sp, #4]
 80013ee:	9400      	str	r4, [sp, #0]
 80013f0:	0030      	movs	r0, r6
 80013f2:	f000 fa8f 	bl	8001914 <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 80013f6:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013f8:	2801      	cmp	r0, #1
 80013fa:	d100      	bne.n	80013fe <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 80013fc:	9b03      	ldr	r3, [sp, #12]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	b004      	add	sp, #16
 8001402:	bd70      	pop	{r4, r5, r6, pc}

08001404 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001404:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001406:	2800      	cmp	r0, #0
 8001408:	d100      	bne.n	800140c <osDelay+0x8>
 800140a:	3001      	adds	r0, #1
 800140c:	f000 fc5e 	bl	8001ccc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001410:	2000      	movs	r0, #0
 8001412:	bd10      	pop	{r4, pc}

08001414 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001414:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001416:	f000 fd19 	bl	8001e4c <xTaskGetSchedulerState>
 800141a:	2801      	cmp	r0, #1
 800141c:	d001      	beq.n	8001422 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800141e:	f000 f8d1 	bl	80015c4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001422:	bd10      	pop	{r4, pc}

08001424 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001424:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001426:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001428:	3308      	adds	r3, #8
 800142a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800142c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800142e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001430:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001432:	4252      	negs	r2, r2
 8001434:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001436:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001438:	4770      	bx	lr

0800143a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800143a:	2300      	movs	r3, #0
 800143c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800143e:	4770      	bx	lr

08001440 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001440:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001442:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001444:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001446:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800144c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800144e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001450:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001452:	3301      	adds	r3, #1
 8001454:	6003      	str	r3, [r0, #0]
}
 8001456:	4770      	bx	lr

08001458 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001458:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800145a:	680a      	ldr	r2, [r1, #0]
{
 800145c:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800145e:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8001460:	1c54      	adds	r4, r2, #1
 8001462:	d10b      	bne.n	800147c <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 8001464:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800146a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800146c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800146e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001470:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001472:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001474:	3301      	adds	r3, #1
 8001476:	6003      	str	r3, [r0, #0]
}
 8001478:	bd30      	pop	{r4, r5, pc}
 800147a:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800147c:	685c      	ldr	r4, [r3, #4]
 800147e:	6825      	ldr	r5, [r4, #0]
 8001480:	42aa      	cmp	r2, r5
 8001482:	d2fa      	bcs.n	800147a <vListInsert+0x22>
 8001484:	e7ef      	b.n	8001466 <vListInsert+0xe>

08001486 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001486:	6841      	ldr	r1, [r0, #4]
 8001488:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800148a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800148c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800148e:	6882      	ldr	r2, [r0, #8]
 8001490:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	4288      	cmp	r0, r1
 8001496:	d100      	bne.n	800149a <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001498:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800149a:	2200      	movs	r2, #0
 800149c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	1e50      	subs	r0, r2, #1
 80014a2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80014a4:	4770      	bx	lr
	...

080014a8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <prvTaskExitError+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	d001      	beq.n	80014b4 <prvTaskExitError+0xc>
 80014b0:	b672      	cpsid	i
 80014b2:	e7fe      	b.n	80014b2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80014b4:	b672      	cpsid	i
 80014b6:	e7fe      	b.n	80014b6 <prvTaskExitError+0xe>
 80014b8:	20000000 	.word	0x20000000
 80014bc:	00000000 	.word	0x00000000

080014c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <pxCurrentTCBConst2>)
 80014c2:	6813      	ldr	r3, [r2, #0]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	3020      	adds	r0, #32
 80014c8:	f380 8809 	msr	PSP, r0
 80014cc:	2002      	movs	r0, #2
 80014ce:	f380 8814 	msr	CONTROL, r0
 80014d2:	f3bf 8f6f 	isb	sy
 80014d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80014d8:	46ae      	mov	lr, r5
 80014da:	bc08      	pop	{r3}
 80014dc:	bc04      	pop	{r2}
 80014de:	b662      	cpsie	i
 80014e0:	4718      	bx	r3
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46c0      	nop			; (mov r8, r8)

080014f0 <pxCurrentTCBConst2>:
 80014f0:	20000c3c 	.word	0x20000c3c

080014f4 <pxPortInitialiseStack>:
{
 80014f4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014f6:	2480      	movs	r4, #128	; 0x80
 80014f8:	1f03      	subs	r3, r0, #4
 80014fa:	0464      	lsls	r4, r4, #17
 80014fc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80014fe:	3b04      	subs	r3, #4
 8001500:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001502:	4903      	ldr	r1, [pc, #12]	; (8001510 <pxPortInitialiseStack+0x1c>)
 8001504:	3b04      	subs	r3, #4
 8001506:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001508:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800150a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bd10      	pop	{r4, pc}
 8001510:	080014a9 	.word	0x080014a9

08001514 <SVC_Handler>:
}
 8001514:	4770      	bx	lr
	...

08001518 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <vPortYield+0x14>)
 800151c:	0552      	lsls	r2, r2, #21
 800151e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001520:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001524:	f3bf 8f6f 	isb	sy
}
 8001528:	4770      	bx	lr
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	e000ed04 	.word	0xe000ed04

08001530 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8001530:	b672      	cpsid	i
    uxCriticalNesting++;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <vPortEnterCritical+0x14>)
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800153a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800153e:	f3bf 8f6f 	isb	sy
}
 8001542:	4770      	bx	lr
 8001544:	20000000 	.word	0x20000000

08001548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <vPortExitCritical+0x18>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <vPortExitCritical+0xc>
 8001550:	b672      	cpsid	i
 8001552:	e7fe      	b.n	8001552 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8001554:	3b01      	subs	r3, #1
 8001556:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8001558:	2b00      	cmp	r3, #0
 800155a:	d100      	bne.n	800155e <vPortExitCritical+0x16>
    {
        portENABLE_INTERRUPTS();
 800155c:	b662      	cpsie	i
    }
}
 800155e:	4770      	bx	lr
 8001560:	20000000 	.word	0x20000000

08001564 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8001564:	f3ef 8010 	mrs	r0, PRIMASK
 8001568:	b672      	cpsid	i
 800156a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 800156c:	2000      	movs	r0, #0

0800156e <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 800156e:	f380 8810 	msr	PRIMASK, r0
 8001572:	4770      	bx	lr
	...

08001580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001580:	f3ef 8009 	mrs	r0, PSP
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <pxCurrentTCBConst>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	3820      	subs	r0, #32
 800158a:	6010      	str	r0, [r2, #0]
 800158c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800158e:	4644      	mov	r4, r8
 8001590:	464d      	mov	r5, r9
 8001592:	4656      	mov	r6, sl
 8001594:	465f      	mov	r7, fp
 8001596:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8001598:	b508      	push	{r3, lr}
 800159a:	b672      	cpsid	i
 800159c:	f000 fbe4 	bl	8001d68 <vTaskSwitchContext>
 80015a0:	b662      	cpsie	i
 80015a2:	bc0c      	pop	{r2, r3}
 80015a4:	6811      	ldr	r1, [r2, #0]
 80015a6:	6808      	ldr	r0, [r1, #0]
 80015a8:	3010      	adds	r0, #16
 80015aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80015ac:	46a0      	mov	r8, r4
 80015ae:	46a9      	mov	r9, r5
 80015b0:	46b2      	mov	sl, r6
 80015b2:	46bb      	mov	fp, r7
 80015b4:	f380 8809 	msr	PSP, r0
 80015b8:	3820      	subs	r0, #32
 80015ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80015bc:	4718      	bx	r3
 80015be:	46c0      	nop			; (mov r8, r8)

080015c0 <pxCurrentTCBConst>:
 80015c0:	20000c3c 	.word	0x20000c3c

080015c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80015c4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80015c6:	f7ff ffcd 	bl	8001564 <ulSetInterruptMaskFromISR>
 80015ca:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80015cc:	f000 fa98 	bl	8001b00 <xTaskIncrementTick>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d003      	beq.n	80015dc <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <xPortSysTickHandler+0x20>)
 80015d8:	0552      	lsls	r2, r2, #21
 80015da:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80015dc:	0020      	movs	r0, r4
 80015de:	f7ff ffc6 	bl	800156e <vClearInterruptMaskFromISR>
}
 80015e2:	bd10      	pop	{r4, pc}
 80015e4:	e000ed04 	.word	0xe000ed04

080015e8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015e8:	21fa      	movs	r1, #250	; 0xfa
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <vPortSetupTimerInterrupt+0x1c>)
{
 80015ec:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	0089      	lsls	r1, r1, #2
 80015f2:	f7fe fd9d 	bl	8000130 <__udivsi3>
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80015f6:	2207      	movs	r2, #7
	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <vPortSetupTimerInterrupt+0x20>)
 80015fa:	3801      	subs	r0, #1
 80015fc:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <vPortSetupTimerInterrupt+0x24>)
 8001600:	601a      	str	r2, [r3, #0]
}
 8001602:	bd10      	pop	{r4, pc}
 8001604:	20000004 	.word	0x20000004
 8001608:	e000e014 	.word	0xe000e014
 800160c:	e000e010 	.word	0xe000e010

08001610 <xPortStartScheduler>:
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <xPortStartScheduler+0x2c>)
 8001614:	0412      	lsls	r2, r2, #16
 8001616:	6819      	ldr	r1, [r3, #0]
{
 8001618:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	0612      	lsls	r2, r2, #24
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001628:	f7ff ffde 	bl	80015e8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800162c:	2200      	movs	r2, #0
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <xPortStartScheduler+0x30>)
 8001630:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8001632:	f7ff ff45 	bl	80014c0 <vPortStartFirstTask>
	prvTaskExitError();
 8001636:	f7ff ff37 	bl	80014a8 <prvTaskExitError>
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	e000ed20 	.word	0xe000ed20
 8001640:	20000000 	.word	0x20000000

08001644 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001644:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <prvInsertBlockIntoFreeList+0x40>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4282      	cmp	r2, r0
 800164c:	d318      	bcc.n	8001680 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800164e:	685c      	ldr	r4, [r3, #4]
 8001650:	1919      	adds	r1, r3, r4
 8001652:	4288      	cmp	r0, r1
 8001654:	d103      	bne.n	800165e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001656:	6841      	ldr	r1, [r0, #4]
 8001658:	0018      	movs	r0, r3
 800165a:	1909      	adds	r1, r1, r4
 800165c:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800165e:	6841      	ldr	r1, [r0, #4]
 8001660:	1844      	adds	r4, r0, r1
 8001662:	42a2      	cmp	r2, r4
 8001664:	d107      	bne.n	8001676 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001666:	4c08      	ldr	r4, [pc, #32]	; (8001688 <prvInsertBlockIntoFreeList+0x44>)
 8001668:	6824      	ldr	r4, [r4, #0]
 800166a:	42a2      	cmp	r2, r4
 800166c:	d003      	beq.n	8001676 <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800166e:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001670:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001672:	1861      	adds	r1, r4, r1
 8001674:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001676:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001678:	4298      	cmp	r0, r3
 800167a:	d000      	beq.n	800167e <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800167c:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800167e:	bd10      	pop	{r4, pc}
 8001680:	0013      	movs	r3, r2
 8001682:	e7e1      	b.n	8001648 <prvInsertBlockIntoFreeList+0x4>
 8001684:	20000c34 	.word	0x20000c34
 8001688:	20000024 	.word	0x20000024

0800168c <pvPortMalloc>:
{
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8001690:	f000 fa2e 	bl	8001af0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <pvPortMalloc+0xec>)
 8001696:	4839      	ldr	r0, [pc, #228]	; (800177c <pvPortMalloc+0xf0>)
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d11e      	bne.n	80016dc <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800169e:	4938      	ldr	r1, [pc, #224]	; (8001780 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016a0:	3307      	adds	r3, #7
 80016a2:	4219      	tst	r1, r3
 80016a4:	d036      	beq.n	8001714 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016a6:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016a8:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016aa:	23c0      	movs	r3, #192	; 0xc0
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	18c9      	adds	r1, r1, r3
 80016b0:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016b2:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 80016b4:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016b6:	4e33      	ldr	r6, [pc, #204]	; (8001784 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016b8:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 80016ba:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016bc:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016be:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 80016c0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016c2:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 80016c4:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 80016c6:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016c8:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 80016ca:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016cc:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <pvPortMalloc+0xfc>)
 80016d0:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <pvPortMalloc+0x100>)
 80016d4:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016dc:	6806      	ldr	r6, [r0, #0]
 80016de:	4234      	tst	r4, r6
 80016e0:	d116      	bne.n	8001710 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d014      	beq.n	8001710 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80016e6:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016e8:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 80016ea:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016ec:	420b      	tst	r3, r1
 80016ee:	d001      	beq.n	80016f4 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016f0:	438b      	bics	r3, r1
 80016f2:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <pvPortMalloc+0x84>
 80016f8:	4924      	ldr	r1, [pc, #144]	; (800178c <pvPortMalloc+0x100>)
 80016fa:	680d      	ldr	r5, [r1, #0]
 80016fc:	42ab      	cmp	r3, r5
 80016fe:	d807      	bhi.n	8001710 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8001700:	4920      	ldr	r1, [pc, #128]	; (8001784 <pvPortMalloc+0xf8>)
 8001702:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001704:	6860      	ldr	r0, [r4, #4]
 8001706:	4283      	cmp	r3, r0
 8001708:	d807      	bhi.n	800171a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4294      	cmp	r4, r2
 800170e:	d10b      	bne.n	8001728 <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 8001710:	2500      	movs	r5, #0
 8001712:	e028      	b.n	8001766 <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001714:	23c0      	movs	r3, #192	; 0xc0
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	e7cc      	b.n	80016b4 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800171a:	6827      	ldr	r7, [r4, #0]
 800171c:	46bc      	mov	ip, r7
 800171e:	2f00      	cmp	r7, #0
 8001720:	d0f3      	beq.n	800170a <pvPortMalloc+0x7e>
 8001722:	0021      	movs	r1, r4
 8001724:	4664      	mov	r4, ip
 8001726:	e7ed      	b.n	8001704 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001728:	680a      	ldr	r2, [r1, #0]
 800172a:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001730:	1ac2      	subs	r2, r0, r3
 8001732:	2a10      	cmp	r2, #16
 8001734:	d908      	bls.n	8001748 <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001736:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001738:	0741      	lsls	r1, r0, #29
 800173a:	d001      	beq.n	8001740 <pvPortMalloc+0xb4>
 800173c:	b672      	cpsid	i
 800173e:	e7fe      	b.n	800173e <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001740:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001742:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001744:	f7ff ff7e 	bl	8001644 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001748:	6863      	ldr	r3, [r4, #4]
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <pvPortMalloc+0x100>)
 800174c:	1aed      	subs	r5, r5, r3
 800174e:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <pvPortMalloc+0xfc>)
 8001752:	6811      	ldr	r1, [r2, #0]
 8001754:	428d      	cmp	r5, r1
 8001756:	d200      	bcs.n	800175a <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001758:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800175a:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800175c:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 800175e:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001760:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001762:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001764:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8001766:	f000 fa49 	bl	8001bfc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800176a:	076b      	lsls	r3, r5, #29
 800176c:	d001      	beq.n	8001772 <pvPortMalloc+0xe6>
 800176e:	b672      	cpsid	i
 8001770:	e7fe      	b.n	8001770 <pvPortMalloc+0xe4>
}
 8001772:	0028      	movs	r0, r5
 8001774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	20000024 	.word	0x20000024
 800177c:	20000c28 	.word	0x20000c28
 8001780:	20000028 	.word	0x20000028
 8001784:	20000c34 	.word	0x20000c34
 8001788:	20000c30 	.word	0x20000c30
 800178c:	20000c2c 	.word	0x20000c2c

08001790 <vPortFree>:
{
 8001790:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001792:	2800      	cmp	r0, #0
 8001794:	d01b      	beq.n	80017ce <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <vPortFree+0x40>)
 8001798:	3808      	subs	r0, #8
 800179a:	6843      	ldr	r3, [r0, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	0004      	movs	r4, r0
 80017a0:	421a      	tst	r2, r3
 80017a2:	d101      	bne.n	80017a8 <vPortFree+0x18>
 80017a4:	b672      	cpsid	i
 80017a6:	e7fe      	b.n	80017a6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017a8:	6801      	ldr	r1, [r0, #0]
 80017aa:	2900      	cmp	r1, #0
 80017ac:	d001      	beq.n	80017b2 <vPortFree+0x22>
 80017ae:	b672      	cpsid	i
 80017b0:	e7fe      	b.n	80017b0 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017b2:	4393      	bics	r3, r2
 80017b4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80017b6:	f000 f99b 	bl	8001af0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <vPortFree+0x44>)
 80017bc:	6863      	ldr	r3, [r4, #4]
 80017be:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017c0:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017c2:	185b      	adds	r3, r3, r1
 80017c4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017c6:	f7ff ff3d 	bl	8001644 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80017ca:	f000 fa17 	bl	8001bfc <xTaskResumeAll>
}
 80017ce:	bd10      	pop	{r4, pc}
 80017d0:	20000c28 	.word	0x20000c28
 80017d4:	20000c2c 	.word	0x20000c2c

080017d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	0004      	movs	r4, r0
 80017dc:	000d      	movs	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80017de:	2800      	cmp	r0, #0
 80017e0:	d101      	bne.n	80017e6 <xQueueGenericReset+0xe>
 80017e2:	b672      	cpsid	i
 80017e4:	e7fe      	b.n	80017e4 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
 80017e6:	f7ff fea3 	bl	8001530 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80017ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	434b      	muls	r3, r1
 80017f2:	18d0      	adds	r0, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017f4:	1a5b      	subs	r3, r3, r1
 80017f6:	18d3      	adds	r3, r2, r3
 80017f8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80017fa:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017fc:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017fe:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001800:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001802:	22ff      	movs	r2, #255	; 0xff
 8001804:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001806:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001808:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
 800180a:	705a      	strb	r2, [r3, #1]

		if( xNewQueue == pdFALSE )
 800180c:	4285      	cmp	r5, r0
 800180e:	d10e      	bne.n	800182e <xQueueGenericReset+0x56>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001810:	6923      	ldr	r3, [r4, #16]
 8001812:	4283      	cmp	r3, r0
 8001814:	d007      	beq.n	8001826 <xQueueGenericReset+0x4e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001816:	0020      	movs	r0, r4
 8001818:	3010      	adds	r0, #16
 800181a:	f000 fadb 	bl	8001dd4 <xTaskRemoveFromEventList>
 800181e:	2800      	cmp	r0, #0
 8001820:	d001      	beq.n	8001826 <xQueueGenericReset+0x4e>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001822:	f7ff fe79 	bl	8001518 <vPortYield>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8001826:	f7ff fe8f 	bl	8001548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800182a:	2001      	movs	r0, #1
 800182c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800182e:	0020      	movs	r0, r4
 8001830:	3010      	adds	r0, #16
 8001832:	f7ff fdf7 	bl	8001424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001836:	0020      	movs	r0, r4
 8001838:	3024      	adds	r0, #36	; 0x24
 800183a:	f7ff fdf3 	bl	8001424 <vListInitialise>
 800183e:	e7f2      	b.n	8001826 <xQueueGenericReset+0x4e>

08001840 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	0006      	movs	r6, r0
 8001844:	000d      	movs	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001846:	2800      	cmp	r0, #0
 8001848:	d101      	bne.n	800184e <xQueueGenericCreate+0xe>
 800184a:	b672      	cpsid	i
 800184c:	e7fe      	b.n	800184c <xQueueGenericCreate+0xc>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800184e:	0008      	movs	r0, r1
 8001850:	4370      	muls	r0, r6
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001852:	3048      	adds	r0, #72	; 0x48
 8001854:	f7ff ff1a 	bl	800168c <pvPortMalloc>
 8001858:	1e04      	subs	r4, r0, #0

		if( pxNewQueue != NULL )
 800185a:	d008      	beq.n	800186e <xQueueGenericCreate+0x2e>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800185c:	2d00      	cmp	r5, #0
 800185e:	d108      	bne.n	8001872 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001860:	6020      	str	r0, [r4, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001862:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001864:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001866:	2101      	movs	r1, #1
 8001868:	0020      	movs	r0, r4
 800186a:	f7ff ffb5 	bl	80017d8 <xQueueGenericReset>
	}
 800186e:	0020      	movs	r0, r4
 8001870:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001872:	0003      	movs	r3, r0
 8001874:	3348      	adds	r3, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001876:	6003      	str	r3, [r0, #0]
 8001878:	e7f3      	b.n	8001862 <xQueueGenericCreate+0x22>
	...

0800187c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <prvResetNextTaskUnblockTime+0x20>)
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <prvResetNextTaskUnblockTime+0x24>)
 8001884:	2900      	cmp	r1, #0
 8001886:	d103      	bne.n	8001890 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001888:	2201      	movs	r2, #1
 800188a:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800188c:	601a      	str	r2, [r3, #0]
	}
}
 800188e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001894:	68d2      	ldr	r2, [r2, #12]
 8001896:	6852      	ldr	r2, [r2, #4]
 8001898:	e7f8      	b.n	800188c <prvResetNextTaskUnblockTime+0x10>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000c40 	.word	0x20000c40
 80018a0:	20000d18 	.word	0x20000d18

080018a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018aa:	4d15      	ldr	r5, [pc, #84]	; (8001900 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80018ac:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018ae:	6828      	ldr	r0, [r5, #0]
{
 80018b0:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018b2:	3004      	adds	r0, #4
 80018b4:	f7ff fde7 	bl	8001486 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80018b8:	1c63      	adds	r3, r4, #1
 80018ba:	d107      	bne.n	80018cc <prvAddCurrentTaskToDelayedList+0x28>
 80018bc:	2f00      	cmp	r7, #0
 80018be:	d005      	beq.n	80018cc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018c0:	6829      	ldr	r1, [r5, #0]
 80018c2:	4810      	ldr	r0, [pc, #64]	; (8001904 <prvAddCurrentTaskToDelayedList+0x60>)
 80018c4:	3104      	adds	r1, #4
 80018c6:	f7ff fdbb 	bl	8001440 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018cc:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 80018ce:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018d0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d906      	bls.n	80018e4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <prvAddCurrentTaskToDelayedList+0x64>)
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	6829      	ldr	r1, [r5, #0]
 80018dc:	3104      	adds	r1, #4
 80018de:	f7ff fdbb 	bl	8001458 <vListInsert>
 80018e2:	e7f2      	b.n	80018ca <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <prvAddCurrentTaskToDelayedList+0x68>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	6829      	ldr	r1, [r5, #0]
 80018ea:	3104      	adds	r1, #4
 80018ec:	f7ff fdb4 	bl	8001458 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <prvAddCurrentTaskToDelayedList+0x6c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4294      	cmp	r4, r2
 80018f6:	d2e8      	bcs.n	80018ca <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 80018f8:	601c      	str	r4, [r3, #0]
}
 80018fa:	e7e6      	b.n	80018ca <prvAddCurrentTaskToDelayedList+0x26>
 80018fc:	20000d60 	.word	0x20000d60
 8001900:	20000c3c 	.word	0x20000c3c
 8001904:	20000d38 	.word	0x20000d38
 8001908:	20000c44 	.word	0x20000c44
 800190c:	20000c40 	.word	0x20000c40
 8001910:	20000d18 	.word	0x20000d18

08001914 <xTaskCreate>:
	{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001916:	0095      	lsls	r5, r2, #2
	{
 8001918:	b085      	sub	sp, #20
 800191a:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800191c:	0028      	movs	r0, r5
	{
 800191e:	000f      	movs	r7, r1
 8001920:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001922:	f7ff feb3 	bl	800168c <pvPortMalloc>
 8001926:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8001928:	d100      	bne.n	800192c <xTaskCreate+0x18>
 800192a:	e08e      	b.n	8001a4a <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800192c:	2054      	movs	r0, #84	; 0x54
 800192e:	f7ff fead 	bl	800168c <pvPortMalloc>
 8001932:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 8001934:	d100      	bne.n	8001938 <xTaskCreate+0x24>
 8001936:	e085      	b.n	8001a44 <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001938:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800193a:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 800193c:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800193e:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001940:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001942:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001944:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001946:	001a      	movs	r2, r3
 8001948:	5cf9      	ldrb	r1, [r7, r3]
 800194a:	3234      	adds	r2, #52	; 0x34
 800194c:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 800194e:	5cfa      	ldrb	r2, [r7, r3]
 8001950:	2a00      	cmp	r2, #0
 8001952:	d002      	beq.n	800195a <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001954:	3301      	adds	r3, #1
 8001956:	2b10      	cmp	r3, #16
 8001958:	d1f5      	bne.n	8001946 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800195a:	0023      	movs	r3, r4
 800195c:	2500      	movs	r5, #0
 800195e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001960:	3343      	adds	r3, #67	; 0x43
 8001962:	701d      	strb	r5, [r3, #0]
 8001964:	2e06      	cmp	r6, #6
 8001966:	d900      	bls.n	800196a <xTaskCreate+0x56>
 8001968:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800196a:	1d23      	adds	r3, r4, #4
 800196c:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 800196e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001970:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001972:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f7ff fd60 	bl	800143a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800197a:	0020      	movs	r0, r4
 800197c:	3018      	adds	r0, #24
 800197e:	f7ff fd5c 	bl	800143a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001982:	2307      	movs	r3, #7
 8001984:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001986:	0023      	movs	r3, r4
 8001988:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800198a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800198c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800198e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001990:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001992:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001994:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001996:	9902      	ldr	r1, [sp, #8]
 8001998:	9800      	ldr	r0, [sp, #0]
 800199a:	f7ff fdab 	bl	80014f4 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 800199e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019a0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d000      	beq.n	80019a8 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019a6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 80019a8:	f7ff fdc2 	bl	8001530 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 80019ae:	4d2f      	ldr	r5, [pc, #188]	; (8001a6c <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	3201      	adds	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80019b6:	682a      	ldr	r2, [r5, #0]
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	d149      	bne.n	8001a50 <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 80019bc:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d11d      	bne.n	8001a00 <xTaskCreate+0xec>
 80019c4:	4e2a      	ldr	r6, [pc, #168]	; (8001a70 <xTaskCreate+0x15c>)
 80019c6:	0037      	movs	r7, r6
 80019c8:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019ca:	0030      	movs	r0, r6
 80019cc:	3614      	adds	r6, #20
 80019ce:	f7ff fd29 	bl	8001424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019d2:	42b7      	cmp	r7, r6
 80019d4:	d1f9      	bne.n	80019ca <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 80019d6:	4e27      	ldr	r6, [pc, #156]	; (8001a74 <xTaskCreate+0x160>)
 80019d8:	0030      	movs	r0, r6
 80019da:	f7ff fd23 	bl	8001424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019de:	4f26      	ldr	r7, [pc, #152]	; (8001a78 <xTaskCreate+0x164>)
 80019e0:	0038      	movs	r0, r7
 80019e2:	f7ff fd1f 	bl	8001424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019e6:	4825      	ldr	r0, [pc, #148]	; (8001a7c <xTaskCreate+0x168>)
 80019e8:	f7ff fd1c 	bl	8001424 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019ec:	4824      	ldr	r0, [pc, #144]	; (8001a80 <xTaskCreate+0x16c>)
 80019ee:	f7ff fd19 	bl	8001424 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019f2:	4824      	ldr	r0, [pc, #144]	; (8001a84 <xTaskCreate+0x170>)
 80019f4:	f7ff fd16 	bl	8001424 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <xTaskCreate+0x174>)
 80019fa:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <xTaskCreate+0x178>)
 80019fe:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <xTaskCreate+0x17c>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <xTaskCreate+0x180>)
 8001a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a0c:	6811      	ldr	r1, [r2, #0]
 8001a0e:	428b      	cmp	r3, r1
 8001a10:	d900      	bls.n	8001a14 <xTaskCreate+0x100>
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	2014      	movs	r0, #20
 8001a16:	4358      	muls	r0, r3
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <xTaskCreate+0x15c>)
 8001a1a:	9901      	ldr	r1, [sp, #4]
 8001a1c:	1818      	adds	r0, r3, r0
 8001a1e:	f7ff fd0f 	bl	8001440 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a22:	f7ff fd91 	bl	8001548 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 8001a28:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d201      	bcs.n	8001a3e <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 8001a3a:	f7ff fd6d 	bl	8001518 <vPortYield>
	}
 8001a3e:	0030      	movs	r0, r6
 8001a40:	b005      	add	sp, #20
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8001a44:	0030      	movs	r0, r6
 8001a46:	f7ff fea3 	bl	8001790 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a4a:	2601      	movs	r6, #1
 8001a4c:	4276      	negs	r6, r6
 8001a4e:	e7f6      	b.n	8001a3e <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <xTaskCreate+0x184>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1d3      	bne.n	8001a00 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d8ce      	bhi.n	8001a00 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 8001a62:	602c      	str	r4, [r5, #0]
 8001a64:	e7cc      	b.n	8001a00 <xTaskCreate+0xec>
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	20000cd4 	.word	0x20000cd4
 8001a6c:	20000c3c 	.word	0x20000c3c
 8001a70:	20000c48 	.word	0x20000c48
 8001a74:	20000cec 	.word	0x20000cec
 8001a78:	20000d00 	.word	0x20000d00
 8001a7c:	20000d20 	.word	0x20000d20
 8001a80:	20000d4c 	.word	0x20000d4c
 8001a84:	20000d38 	.word	0x20000d38
 8001a88:	20000c40 	.word	0x20000c40
 8001a8c:	20000c44 	.word	0x20000c44
 8001a90:	20000ce4 	.word	0x20000ce4
 8001a94:	20000ce8 	.word	0x20000ce8
 8001a98:	20000d34 	.word	0x20000d34

08001a9c <vTaskStartScheduler>:
{
 8001a9c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <vTaskStartScheduler+0x3c>)
 8001aa2:	9400      	str	r4, [sp, #0]
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0023      	movs	r3, r4
 8001aaa:	490c      	ldr	r1, [pc, #48]	; (8001adc <vTaskStartScheduler+0x40>)
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <vTaskStartScheduler+0x44>)
 8001aae:	f7ff ff31 	bl	8001914 <xTaskCreate>
	if( xReturn == pdPASS )
 8001ab2:	2801      	cmp	r0, #1
 8001ab4:	d10b      	bne.n	8001ace <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8001ab6:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <vTaskStartScheduler+0x48>)
 8001abc:	4252      	negs	r2, r2
 8001abe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <vTaskStartScheduler+0x4c>)
 8001ac2:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <vTaskStartScheduler+0x50>)
 8001ac6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001ac8:	f7ff fda2 	bl	8001610 <xPortStartScheduler>
}
 8001acc:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ace:	1c43      	adds	r3, r0, #1
 8001ad0:	d1fc      	bne.n	8001acc <vTaskStartScheduler+0x30>
 8001ad2:	b672      	cpsid	i
 8001ad4:	e7fe      	b.n	8001ad4 <vTaskStartScheduler+0x38>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	20000d14 	.word	0x20000d14
 8001adc:	080022c8 	.word	0x080022c8
 8001ae0:	08001d01 	.word	0x08001d01
 8001ae4:	20000d18 	.word	0x20000d18
 8001ae8:	20000d34 	.word	0x20000d34
 8001aec:	20000d60 	.word	0x20000d60

08001af0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001af0:	4a02      	ldr	r2, [pc, #8]	; (8001afc <vTaskSuspendAll+0xc>)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	3301      	adds	r3, #1
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	4770      	bx	lr
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	20000ce0 	.word	0x20000ce0

08001b00 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b00:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <xTaskIncrementTick+0xd0>)
{
 8001b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d135      	bne.n	8001b76 <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <xTaskIncrementTick+0xd4>)
 8001b0c:	681c      	ldr	r4, [r3, #0]
 8001b0e:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001b10:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d111      	bne.n	8001b3a <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <xTaskIncrementTick+0xd8>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	2a00      	cmp	r2, #0
 8001b1e:	d001      	beq.n	8001b24 <xTaskIncrementTick+0x24>
 8001b20:	b672      	cpsid	i
 8001b22:	e7fe      	b.n	8001b22 <xTaskIncrementTick+0x22>
 8001b24:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <xTaskIncrementTick+0xdc>)
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	6810      	ldr	r0, [r2, #0]
 8001b2a:	6018      	str	r0, [r3, #0]
 8001b2c:	6011      	str	r1, [r2, #0]
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <xTaskIncrementTick+0xe0>)
 8001b30:	6813      	ldr	r3, [r2, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	f7ff fea1 	bl	800187c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b3a:	4f2a      	ldr	r7, [pc, #168]	; (8001be4 <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 8001b3c:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d307      	bcc.n	8001b54 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <xTaskIncrementTick+0xd8>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	2a00      	cmp	r2, #0
 8001b4c:	d119      	bne.n	8001b82 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	425b      	negs	r3, r3
 8001b52:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b54:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <xTaskIncrementTick+0xe8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5a:	2314      	movs	r3, #20
 8001b5c:	4353      	muls	r3, r2
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <xTaskIncrementTick+0xec>)
 8001b60:	58d3      	ldr	r3, [r2, r3]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d900      	bls.n	8001b68 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8001b66:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <xTaskIncrementTick+0xf0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d000      	beq.n	8001b72 <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 8001b70:	2601      	movs	r6, #1
}
 8001b72:	0030      	movs	r0, r6
 8001b74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8001b78:	2600      	movs	r6, #0
		++uxPendedTicks;
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e7f2      	b.n	8001b68 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b88:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8001b8a:	429c      	cmp	r4, r3
 8001b8c:	d3e1      	bcc.n	8001b52 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b8e:	1d2b      	adds	r3, r5, #4
 8001b90:	0018      	movs	r0, r3
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	f7ff fc77 	bl	8001486 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b9e:	0028      	movs	r0, r5
 8001ba0:	3018      	adds	r0, #24
 8001ba2:	f7ff fc70 	bl	8001486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <xTaskIncrementTick+0xf8>)
 8001ba8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4290      	cmp	r0, r2
 8001bae:	d900      	bls.n	8001bb2 <xTaskIncrementTick+0xb2>
 8001bb0:	6018      	str	r0, [r3, #0]
 8001bb2:	2314      	movs	r3, #20
 8001bb4:	4358      	muls	r0, r3
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <xTaskIncrementTick+0xec>)
 8001bb8:	1d29      	adds	r1, r5, #4
 8001bba:	1818      	adds	r0, r3, r0
 8001bbc:	f7ff fc40 	bl	8001440 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <xTaskIncrementTick+0xe8>)
 8001bc2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3bb      	bcc.n	8001b44 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 8001bcc:	2601      	movs	r6, #1
 8001bce:	e7b9      	b.n	8001b44 <xTaskIncrementTick+0x44>
 8001bd0:	20000ce0 	.word	0x20000ce0
 8001bd4:	20000d60 	.word	0x20000d60
 8001bd8:	20000c40 	.word	0x20000c40
 8001bdc:	20000c44 	.word	0x20000c44
 8001be0:	20000d1c 	.word	0x20000d1c
 8001be4:	20000d18 	.word	0x20000d18
 8001be8:	20000c3c 	.word	0x20000c3c
 8001bec:	20000c48 	.word	0x20000c48
 8001bf0:	20000d64 	.word	0x20000d64
 8001bf4:	20000cdc 	.word	0x20000cdc
 8001bf8:	20000ce8 	.word	0x20000ce8

08001bfc <xTaskResumeAll>:
{
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8001bfe:	4c2b      	ldr	r4, [pc, #172]	; (8001cac <xTaskResumeAll+0xb0>)
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <xTaskResumeAll+0xe>
 8001c06:	b672      	cpsid	i
 8001c08:	e7fe      	b.n	8001c08 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8001c0a:	f7ff fc91 	bl	8001530 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c14:	6824      	ldr	r4, [r4, #0]
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d004      	beq.n	8001c24 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8001c1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001c1c:	f7ff fc94 	bl	8001548 <vPortExitCritical>
}
 8001c20:	0020      	movs	r0, r4
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <xTaskResumeAll+0xb4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f6      	beq.n	8001c1a <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8001c2c:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8001c2e:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c30:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <xTaskResumeAll+0xb8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d11a      	bne.n	8001c6e <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d001      	beq.n	8001c40 <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 8001c3c:	f7ff fe1e 	bl	800187c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c40:	4d1d      	ldr	r5, [pc, #116]	; (8001cb8 <xTaskResumeAll+0xbc>)
 8001c42:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c44:	2c00      	cmp	r4, #0
 8001c46:	d00a      	beq.n	8001c5e <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8001c48:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001c4a:	f7ff ff59 	bl	8001b00 <xTaskIncrementTick>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d001      	beq.n	8001c56 <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <xTaskResumeAll+0xc0>)
 8001c54:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8001c56:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d1f6      	bne.n	8001c4a <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 8001c5c:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <xTaskResumeAll+0xc0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0d9      	beq.n	8001c1a <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8001c66:	f7ff fc57 	bl	8001518 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8001c6a:	2401      	movs	r4, #1
 8001c6c:	e7d6      	b.n	8001c1c <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c72:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c74:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c76:	3018      	adds	r0, #24
 8001c78:	f7ff fc05 	bl	8001486 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c7c:	0028      	movs	r0, r5
 8001c7e:	f7ff fc02 	bl	8001486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <xTaskResumeAll+0xc4>)
 8001c84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4290      	cmp	r0, r2
 8001c8a:	d900      	bls.n	8001c8e <xTaskResumeAll+0x92>
 8001c8c:	6018      	str	r0, [r3, #0]
 8001c8e:	4370      	muls	r0, r6
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <xTaskResumeAll+0xc8>)
 8001c92:	0029      	movs	r1, r5
 8001c94:	1818      	adds	r0, r3, r0
 8001c96:	f7ff fbd3 	bl	8001440 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <xTaskResumeAll+0xcc>)
 8001c9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d3c4      	bcc.n	8001c30 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <xTaskResumeAll+0xc0>)
 8001ca8:	601f      	str	r7, [r3, #0]
 8001caa:	e7c1      	b.n	8001c30 <xTaskResumeAll+0x34>
 8001cac:	20000ce0 	.word	0x20000ce0
 8001cb0:	20000cd4 	.word	0x20000cd4
 8001cb4:	20000d20 	.word	0x20000d20
 8001cb8:	20000cdc 	.word	0x20000cdc
 8001cbc:	20000d64 	.word	0x20000d64
 8001cc0:	20000ce8 	.word	0x20000ce8
 8001cc4:	20000c48 	.word	0x20000c48
 8001cc8:	20000c3c 	.word	0x20000c3c

08001ccc <vTaskDelay>:
	{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001cd0:	d102      	bne.n	8001cd8 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8001cd2:	f7ff fc21 	bl	8001518 <vPortYield>
	}
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <vTaskDelay+0x30>)
 8001cda:	681d      	ldr	r5, [r3, #0]
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	d001      	beq.n	8001ce4 <vTaskDelay+0x18>
 8001ce0:	b672      	cpsid	i
 8001ce2:	e7fe      	b.n	8001ce2 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8001ce4:	f7ff ff04 	bl	8001af0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ce8:	0029      	movs	r1, r5
 8001cea:	0020      	movs	r0, r4
 8001cec:	f7ff fdda 	bl	80018a4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001cf0:	f7ff ff84 	bl	8001bfc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d1ee      	bne.n	8001cd6 <vTaskDelay+0xa>
 8001cf8:	e7eb      	b.n	8001cd2 <vTaskDelay+0x6>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000ce0 	.word	0x20000ce0

08001d00 <prvIdleTask>:
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d02:	4c15      	ldr	r4, [pc, #84]	; (8001d58 <prvIdleTask+0x58>)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <prvIdleTask+0x5c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d9f7      	bls.n	8001d02 <prvIdleTask+0x2>
				taskYIELD();
 8001d12:	f7ff fc01 	bl	8001518 <vPortYield>
 8001d16:	e7f4      	b.n	8001d02 <prvIdleTask+0x2>
			vTaskSuspendAll();
 8001d18:	f7ff feea 	bl	8001af0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001d1c:	4d10      	ldr	r5, [pc, #64]	; (8001d60 <prvIdleTask+0x60>)
 8001d1e:	682e      	ldr	r6, [r5, #0]
			( void ) xTaskResumeAll();
 8001d20:	f7ff ff6c 	bl	8001bfc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001d24:	2e00      	cmp	r6, #0
 8001d26:	d0ec      	beq.n	8001d02 <prvIdleTask+0x2>
				taskENTER_CRITICAL();
 8001d28:	f7ff fc02 	bl	8001530 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d2c:	68eb      	ldr	r3, [r5, #12]
 8001d2e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d30:	1d28      	adds	r0, r5, #4
 8001d32:	f7ff fba8 	bl	8001486 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <prvIdleTask+0x64>)
 8001d38:	6813      	ldr	r3, [r2, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001d44:	f7ff fc00 	bl	8001548 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001d48:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d4a:	f7ff fd21 	bl	8001790 <vPortFree>
			vPortFree( pxTCB );
 8001d4e:	0028      	movs	r0, r5
 8001d50:	f7ff fd1e 	bl	8001790 <vPortFree>
 8001d54:	e7d5      	b.n	8001d02 <prvIdleTask+0x2>
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	20000cd8 	.word	0x20000cd8
 8001d5c:	20000c48 	.word	0x20000c48
 8001d60:	20000d4c 	.word	0x20000d4c
 8001d64:	20000cd4 	.word	0x20000cd4

08001d68 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <vTaskSwitchContext+0x58>)
{
 8001d6a:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <vTaskSwitchContext+0x5c>)
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d002      	beq.n	8001d7a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	bd30      	pop	{r4, r5, pc}
 8001d7a:	2414      	movs	r4, #20
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8001d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d80:	6802      	ldr	r2, [r0, #0]
 8001d82:	4912      	ldr	r1, [pc, #72]	; (8001dcc <vTaskSwitchContext+0x64>)
 8001d84:	0023      	movs	r3, r4
 8001d86:	4353      	muls	r3, r2
 8001d88:	585d      	ldr	r5, [r3, r1]
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d012      	beq.n	8001db4 <vTaskSwitchContext+0x4c>
 8001d8e:	18cc      	adds	r4, r1, r3
 8001d90:	6865      	ldr	r5, [r4, #4]
 8001d92:	3308      	adds	r3, #8
 8001d94:	686d      	ldr	r5, [r5, #4]
 8001d96:	18cb      	adds	r3, r1, r3
 8001d98:	6065      	str	r5, [r4, #4]
 8001d9a:	429d      	cmp	r5, r3
 8001d9c:	d101      	bne.n	8001da2 <vTaskSwitchContext+0x3a>
 8001d9e:	686b      	ldr	r3, [r5, #4]
 8001da0:	6063      	str	r3, [r4, #4]
 8001da2:	2314      	movs	r3, #20
 8001da4:	4353      	muls	r3, r2
 8001da6:	18c9      	adds	r1, r1, r3
 8001da8:	684b      	ldr	r3, [r1, #4]
 8001daa:	68d9      	ldr	r1, [r3, #12]
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <vTaskSwitchContext+0x68>)
 8001dae:	6019      	str	r1, [r3, #0]
 8001db0:	6002      	str	r2, [r0, #0]
}
 8001db2:	e7e1      	b.n	8001d78 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d101      	bne.n	8001dbc <vTaskSwitchContext+0x54>
 8001db8:	b672      	cpsid	i
 8001dba:	e7fe      	b.n	8001dba <vTaskSwitchContext+0x52>
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	e7e1      	b.n	8001d84 <vTaskSwitchContext+0x1c>
 8001dc0:	20000ce0 	.word	0x20000ce0
 8001dc4:	20000d64 	.word	0x20000d64
 8001dc8:	20000ce8 	.word	0x20000ce8
 8001dcc:	20000c48 	.word	0x20000c48
 8001dd0:	20000c3c 	.word	0x20000c3c

08001dd4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001dd4:	68c3      	ldr	r3, [r0, #12]
{
 8001dd6:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001dd8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001dda:	2c00      	cmp	r4, #0
 8001ddc:	d101      	bne.n	8001de2 <xTaskRemoveFromEventList+0xe>
 8001dde:	b672      	cpsid	i
 8001de0:	e7fe      	b.n	8001de0 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001de2:	0025      	movs	r5, r4
 8001de4:	3518      	adds	r5, #24
 8001de6:	0028      	movs	r0, r5
 8001de8:	f7ff fb4d 	bl	8001486 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <xTaskRemoveFromEventList+0x60>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11b      	bne.n	8001e2c <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001df4:	1d25      	adds	r5, r4, #4
 8001df6:	0028      	movs	r0, r5
 8001df8:	f7ff fb45 	bl	8001486 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <xTaskRemoveFromEventList+0x64>)
 8001dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	428b      	cmp	r3, r1
 8001e04:	d900      	bls.n	8001e08 <xTaskRemoveFromEventList+0x34>
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	2014      	movs	r0, #20
 8001e0a:	0029      	movs	r1, r5
 8001e0c:	4343      	muls	r3, r0
 8001e0e:	480b      	ldr	r0, [pc, #44]	; (8001e3c <xTaskRemoveFromEventList+0x68>)
 8001e10:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e12:	f7ff fb15 	bl	8001440 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <xTaskRemoveFromEventList+0x6c>)
 8001e18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e1a:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 8001e1c:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d902      	bls.n	8001e2a <xTaskRemoveFromEventList+0x56>
		xYieldPending = pdTRUE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <xTaskRemoveFromEventList+0x70>)
 8001e26:	3001      	adds	r0, #1
 8001e28:	6018      	str	r0, [r3, #0]
}
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e2c:	0029      	movs	r1, r5
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <xTaskRemoveFromEventList+0x74>)
 8001e30:	e7ef      	b.n	8001e12 <xTaskRemoveFromEventList+0x3e>
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	20000ce0 	.word	0x20000ce0
 8001e38:	20000ce8 	.word	0x20000ce8
 8001e3c:	20000c48 	.word	0x20000c48
 8001e40:	20000c3c 	.word	0x20000c3c
 8001e44:	20000d64 	.word	0x20000d64
 8001e48:	20000d20 	.word	0x20000d20

08001e4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001e4e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <xTaskGetSchedulerState+0x1c>)
 8001e58:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8001e5a:	4243      	negs	r3, r0
 8001e5c:	4158      	adcs	r0, r3
 8001e5e:	0040      	lsls	r0, r0, #1
	}
 8001e60:	4770      	bx	lr
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	20000d34 	.word	0x20000d34
 8001e68:	20000ce0 	.word	0x20000ce0

08001e6c <ToggleLED_Timer>:
  }
  /* USER CODE END 3 */

}

void ToggleLED_Timer(void *pvParameters){
 8001e6c:	b510      	push	{r4, lr}

  while (1) {

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	2201      	movs	r2, #1
 8001e72:	0089      	lsls	r1, r1, #2
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <ToggleLED_Timer+0x18>)
 8001e76:	f7fe fb1f 	bl	80004b8 <HAL_GPIO_WritePin>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); //Toggle the state of pin PC9
    vTaskDelay(1500 / portTICK_RATE_MS);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <ToggleLED_Timer+0x1c>)
 8001e7c:	f7ff ff26 	bl	8001ccc <vTaskDelay>
 8001e80:	e7f5      	b.n	8001e6e <ToggleLED_Timer+0x2>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	48000800 	.word	0x48000800
 8001e88:	000005dc 	.word	0x000005dc

08001e8c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001e8c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7ff fab8 	bl	8001404 <osDelay>
 8001e94:	e7fb      	b.n	8001e8e <StartDefaultTask+0x2>

08001e96 <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e96:	2302      	movs	r3, #2
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e9c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e9e:	330e      	adds	r3, #14
 8001ea0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea2:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ea4:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eaa:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eac:	f7fe fbe4 	bl	8000678 <HAL_RCC_OscConfig>
 8001eb0:	1e01      	subs	r1, r0, #0
 8001eb2:	d000      	beq.n	8001eb6 <SystemClock_Config+0x20>
 8001eb4:	e7fe      	b.n	8001eb4 <SystemClock_Config+0x1e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001eb8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ebc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ebe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec2:	f7fe fded 	bl	8000aa0 <HAL_RCC_ClockConfig>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d000      	beq.n	8001ecc <SystemClock_Config+0x36>
 8001eca:	e7fe      	b.n	8001eca <SystemClock_Config+0x34>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ecc:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ece:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ed0:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed2:	f7fe fe91 	bl	8000bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	1e04      	subs	r4, r0, #0
 8001ed8:	d000      	beq.n	8001edc <SystemClock_Config+0x46>
 8001eda:	e7fe      	b.n	8001eda <SystemClock_Config+0x44>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001edc:	f7fe fe76 	bl	8000bcc <HAL_RCC_GetHCLKFreq>
 8001ee0:	21fa      	movs	r1, #250	; 0xfa
 8001ee2:	0089      	lsls	r1, r1, #2
 8001ee4:	f7fe f924 	bl	8000130 <__udivsi3>
 8001ee8:	f7fe fa0e 	bl	8000308 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001eec:	2004      	movs	r0, #4
 8001eee:	f7fe fa25 	bl	800033c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	0022      	movs	r2, r4
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	4240      	negs	r0, r0
 8001efa:	f7fe f9d5 	bl	80002a8 <HAL_NVIC_SetPriority>
}
 8001efe:	b016      	add	sp, #88	; 0x58
 8001f00:	bd10      	pop	{r4, pc}
	...

08001f04 <main>:
{
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001f08:	f7fe f9b0 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001f0c:	f7ff ffc3 	bl	8001e96 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2080      	movs	r0, #128	; 0x80
 8001f12:	4a3f      	ldr	r2, [pc, #252]	; (8002010 <main+0x10c>)
 8001f14:	0280      	lsls	r0, r0, #10
 8001f16:	6951      	ldr	r1, [r2, #20]
  hirda1.Init.BaudRate = 38400;
 8001f18:	2696      	movs	r6, #150	; 0x96
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	4301      	orrs	r1, r0
 8001f1c:	6151      	str	r1, [r2, #20]
 8001f1e:	6953      	ldr	r3, [r2, #20]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8001f20:	240c      	movs	r4, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4003      	ands	r3, r0
 8001f24:	9302      	str	r3, [sp, #8]
  hirda1.Instance = USART1;
 8001f26:	483b      	ldr	r0, [pc, #236]	; (8002014 <main+0x110>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	9b02      	ldr	r3, [sp, #8]
  hirda1.Instance = USART1;
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <main+0x114>)
  hirda1.Init.Prescaler = 10;
 8001f2c:	250a      	movs	r5, #10
  hirda1.Instance = USART1;
 8001f2e:	6003      	str	r3, [r0, #0]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8001f30:	2300      	movs	r3, #0
  hirda1.Init.BaudRate = 38400;
 8001f32:	0236      	lsls	r6, r6, #8
 8001f34:	6046      	str	r6, [r0, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8001f36:	6083      	str	r3, [r0, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8001f38:	60c3      	str	r3, [r0, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8001f3a:	6104      	str	r4, [r0, #16]
  hirda1.Init.Prescaler = 10;
 8001f3c:	7505      	strb	r5, [r0, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 8001f3e:	82c3      	strh	r3, [r0, #22]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8001f40:	f7fe faec 	bl	800051c <HAL_IRDA_Init>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d000      	beq.n	8001f4a <main+0x46>
 8001f48:	e7fe      	b.n	8001f48 <main+0x44>
  huart2.Instance = USART2;
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <main+0x118>)
 8001f4c:	4a34      	ldr	r2, [pc, #208]	; (8002020 <main+0x11c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	6098      	str	r0, [r3, #8]
  huart2.Instance = USART2;
 8001f50:	601a      	str	r2, [r3, #0]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f52:	22c0      	movs	r2, #192	; 0xc0
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f54:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f56:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f58:	0092      	lsls	r2, r2, #2
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5a:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5c:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5e:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f60:	0018      	movs	r0, r3
  huart2.Init.BaudRate = 38400;
 8001f62:	605e      	str	r6, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f64:	615c      	str	r4, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f68:	f7ff f9fe 	bl	8001368 <HAL_UART_Init>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d000      	beq.n	8001f72 <main+0x6e>
 8001f70:	e7fe      	b.n	8001f70 <main+0x6c>
  htim1.Instance = TIM1;
 8001f72:	4c2c      	ldr	r4, [pc, #176]	; (8002024 <main+0x120>)
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <main+0x124>)
  htim1.Init.Prescaler = 0;
 8001f76:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8001f7a:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f7e:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f82:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 8001f84:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f86:	f7fe ff13 	bl	8000db0 <HAL_TIM_Base_Init>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d000      	beq.n	8001f90 <main+0x8c>
 8001f8e:	e7fe      	b.n	8001f8e <main+0x8a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f92:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f94:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f96:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f9a:	f7fe ff31 	bl	8000e00 <HAL_TIM_ConfigClockSource>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d000      	beq.n	8001fa4 <main+0xa0>
 8001fa2:	e7fe      	b.n	8001fa2 <main+0x9e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001fa4:	ae09      	add	r6, sp, #36	; 0x24
 8001fa6:	9009      	str	r0, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001fa8:	6070      	str	r0, [r6, #4]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001faa:	0031      	movs	r1, r6
 8001fac:	0020      	movs	r0, r4
 8001fae:	f7ff f82d 	bl	800100c <HAL_TIM_SlaveConfigSynchronization>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d000      	beq.n	8001fb8 <main+0xb4>
 8001fb6:	e7fe      	b.n	8001fb6 <main+0xb2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fba:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fbc:	a903      	add	r1, sp, #12
 8001fbe:	0020      	movs	r0, r4
 8001fc0:	f7ff f844 	bl	800104c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	1e04      	subs	r4, r0, #0
 8001fc6:	d000      	beq.n	8001fca <main+0xc6>
 8001fc8:	e7fe      	b.n	8001fc8 <main+0xc4>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001fca:	0032      	movs	r2, r6
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <main+0x128>)
 8001fce:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001fd0:	c283      	stmia	r2!, {r0, r1, r7}
 8001fd2:	cb03      	ldmia	r3!, {r0, r1}
 8001fd4:	c203      	stmia	r2!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fd6:	0021      	movs	r1, r4
 8001fd8:	0030      	movs	r0, r6
 8001fda:	f7ff f9fb 	bl	80013d4 <osThreadCreate>
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <main+0x12c>)
  pbq = xQueueCreate(10, sizeof(int));
 8001fe0:	0022      	movs	r2, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fe2:	6018      	str	r0, [r3, #0]
  pbq = xQueueCreate(10, sizeof(int));
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	0028      	movs	r0, r5
 8001fe8:	f7ff fc2a 	bl	8001840 <xQueueGenericCreate>
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <main+0x130>)
 8001fee:	6018      	str	r0, [r3, #0]
    if (pbq == 0) {
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d100      	bne.n	8001ff6 <main+0xf2>
 8001ff4:	e7fe      	b.n	8001ff4 <main+0xf0>
    xTaskCreate(
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <main+0x134>)
 8001ffe:	0023      	movs	r3, r4
 8002000:	9401      	str	r4, [sp, #4]
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <main+0x138>)
 8002004:	f7ff fc86 	bl	8001914 <xTaskCreate>
    vTaskStartScheduler();
 8002008:	f7ff fd48 	bl	8001a9c <vTaskStartScheduler>
 800200c:	e7fe      	b.n	800200c <main+0x108>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	20000d6c 	.word	0x20000d6c
 8002018:	40013800 	.word	0x40013800
 800201c:	20000df0 	.word	0x20000df0
 8002020:	40004400 	.word	0x40004400
 8002024:	20000db0 	.word	0x20000db0
 8002028:	40012c00 	.word	0x40012c00
 800202c:	080022ac 	.word	0x080022ac
 8002030:	20000da8 	.word	0x20000da8
 8002034:	20000dac 	.word	0x20000dac
 8002038:	080022cd 	.word	0x080022cd
 800203c:	08001e6d 	.word	0x08001e6d

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2001      	movs	r0, #1
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_MspInit+0x38>)
 8002046:	6991      	ldr	r1, [r2, #24]
 8002048:	4301      	orrs	r1, r0
 800204a:	6191      	str	r1, [r2, #24]
 800204c:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002050:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002052:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002056:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002058:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800205a:	f7fe f925 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800205e:	2002      	movs	r0, #2
 8002060:	2200      	movs	r2, #0
 8002062:	2103      	movs	r1, #3
 8002064:	4240      	negs	r0, r0
 8002066:	f7fe f91f 	bl	80002a8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 3, 0);
 800206a:	2001      	movs	r0, #1
 800206c:	2200      	movs	r2, #0
 800206e:	2103      	movs	r1, #3
 8002070:	4240      	negs	r0, r0
 8002072:	f7fe f919 	bl	80002a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bd07      	pop	{r0, r1, r2, pc}
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_TIM_Base_MspInit+0x24>)
 800207e:	6802      	ldr	r2, [r0, #0]
{
 8002080:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8002082:	429a      	cmp	r2, r3
 8002084:	d109      	bne.n	800209a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	2080      	movs	r0, #128	; 0x80
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_TIM_Base_MspInit+0x28>)
 800208a:	0100      	lsls	r0, r0, #4
 800208c:	6991      	ldr	r1, [r2, #24]
 800208e:	4301      	orrs	r1, r0
 8002090:	6191      	str	r1, [r2, #24]
 8002092:	6993      	ldr	r3, [r2, #24]
 8002094:	4003      	ands	r3, r0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800209a:	b002      	add	sp, #8
 800209c:	4770      	bx	lr
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_IRDA_MspInit>:
  }

}

void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 80020a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hirda->Instance==USART1)
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_IRDA_MspInit+0x44>)
 80020ac:	6802      	ldr	r2, [r0, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d119      	bne.n	80020e6 <HAL_IRDA_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b2:	2080      	movs	r0, #128	; 0x80
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_IRDA_MspInit+0x48>)
 80020b6:	01c0      	lsls	r0, r0, #7
 80020b8:	6991      	ldr	r1, [r2, #24]
 80020ba:	4301      	orrs	r1, r0
 80020bc:	6191      	str	r1, [r2, #24]
 80020be:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c2:	4003      	ands	r3, r0
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d8:	3303      	adds	r3, #3
 80020da:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80020de:	3b02      	subs	r3, #2
 80020e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f7fe f939 	bl	8000358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020e6:	b007      	add	sp, #28
 80020e8:	bd00      	pop	{pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_UART_MspInit+0x58>)
 80020f8:	6802      	ldr	r2, [r0, #0]
{
 80020fa:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d122      	bne.n	8002146 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002100:	2080      	movs	r0, #128	; 0x80
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_UART_MspInit+0x5c>)
 8002104:	0280      	lsls	r0, r0, #10
 8002106:	69d1      	ldr	r1, [r2, #28]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002108:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 800210a:	4301      	orrs	r1, r0
 800210c:	61d1      	str	r1, [r2, #28]
 800210e:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002110:	2401      	movs	r4, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8002112:	4003      	ands	r3, r0
 8002114:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8002118:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	a901      	add	r1, sp, #4
 8002120:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002124:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800212a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f7fe f914 	bl	8000358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002132:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	a901      	add	r1, sp, #4
 8002136:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002138:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002140:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f7fe f909 	bl	8000358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002146:	b006      	add	sp, #24
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40004400 	.word	0x40004400
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002154:	4770      	bx	lr

08002156 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler>

08002158 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002158:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215a:	f7fe f897 	bl	800028c <HAL_IncTick>
  osSystickHandler();
 800215e:	f7ff f959 	bl	8001414 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002162:	bd10      	pop	{r4, pc}

08002164 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002164:	2101      	movs	r1, #1
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <SystemInit+0x48>)

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4002      	ands	r2, r0
 8002174:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	480e      	ldr	r0, [pc, #56]	; (80021b4 <SystemInit+0x50>)
 800217a:	4002      	ands	r2, r0
 800217c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <SystemInit+0x54>)
 8002182:	4002      	ands	r2, r0
 8002184:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <SystemInit+0x58>)
 800218a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800218c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800218e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	4382      	bics	r2, r0
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <SystemInit+0x5c>)
 800219a:	4002      	ands	r2, r0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800219e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a0:	438a      	bics	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]

}
 80021a8:	4770      	bx	lr
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	f8ffb80c 	.word	0xf8ffb80c
 80021b4:	fef6ffff 	.word	0xfef6ffff
 80021b8:	fffbffff 	.word	0xfffbffff
 80021bc:	ffc0ffff 	.word	0xffc0ffff
 80021c0:	fffffeac 	.word	0xfffffeac

080021c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	; (8002204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <LoopForever+0xe>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	; (8002210 <LoopForever+0x16>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021ee:	f7ff ffb9 	bl	8002164 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021f2:	f000 f811 	bl	8002218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021f6:	f7ff fe85 	bl	8001f04 <main>

080021fa <LoopForever>:

LoopForever:
    b LoopForever
 80021fa:	e7fe      	b.n	80021fa <LoopForever>
  ldr   r0, =_estack
 80021fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002208:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 800220c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002210:	20000e60 	.word	0x20000e60

08002214 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_COMP_IRQHandler>
	...

08002218 <__libc_init_array>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	2600      	movs	r6, #0
 800221c:	4d0c      	ldr	r5, [pc, #48]	; (8002250 <__libc_init_array+0x38>)
 800221e:	4c0d      	ldr	r4, [pc, #52]	; (8002254 <__libc_init_array+0x3c>)
 8002220:	1b64      	subs	r4, r4, r5
 8002222:	10a4      	asrs	r4, r4, #2
 8002224:	42a6      	cmp	r6, r4
 8002226:	d109      	bne.n	800223c <__libc_init_array+0x24>
 8002228:	2600      	movs	r6, #0
 800222a:	f000 f823 	bl	8002274 <_init>
 800222e:	4d0a      	ldr	r5, [pc, #40]	; (8002258 <__libc_init_array+0x40>)
 8002230:	4c0a      	ldr	r4, [pc, #40]	; (800225c <__libc_init_array+0x44>)
 8002232:	1b64      	subs	r4, r4, r5
 8002234:	10a4      	asrs	r4, r4, #2
 8002236:	42a6      	cmp	r6, r4
 8002238:	d105      	bne.n	8002246 <__libc_init_array+0x2e>
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	00b3      	lsls	r3, r6, #2
 800223e:	58eb      	ldr	r3, [r5, r3]
 8002240:	4798      	blx	r3
 8002242:	3601      	adds	r6, #1
 8002244:	e7ee      	b.n	8002224 <__libc_init_array+0xc>
 8002246:	00b3      	lsls	r3, r6, #2
 8002248:	58eb      	ldr	r3, [r5, r3]
 800224a:	4798      	blx	r3
 800224c:	3601      	adds	r6, #1
 800224e:	e7f2      	b.n	8002236 <__libc_init_array+0x1e>
 8002250:	080022f8 	.word	0x080022f8
 8002254:	080022f8 	.word	0x080022f8
 8002258:	080022f8 	.word	0x080022f8
 800225c:	080022fc 	.word	0x080022fc

08002260 <memcpy>:
 8002260:	2300      	movs	r3, #0
 8002262:	b510      	push	{r4, lr}
 8002264:	429a      	cmp	r2, r3
 8002266:	d100      	bne.n	800226a <memcpy+0xa>
 8002268:	bd10      	pop	{r4, pc}
 800226a:	5ccc      	ldrb	r4, [r1, r3]
 800226c:	54c4      	strb	r4, [r0, r3]
 800226e:	3301      	adds	r3, #1
 8002270:	e7f8      	b.n	8002264 <memcpy+0x4>
	...

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
